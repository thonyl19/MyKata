<div id="app" v-cloak>
    <%_ _fn(html_tpl,(el)=>{ _%>
    <%- el %><% }) %>
</div>
<script>
    $(() => {
        new Vue({
            el: '#app',
            data() {
                return {
                    <%_ _fn(vue_GridData,(el)=>{ _%>
                    <%- el %><% }) %>
                    <%_ _fn(vue_data_form,(el)=>{ _%>
                    <%- el %><% }) %>
                    <%_ _fn(vue_data_i18n,(el)=>{ _%>
                    <%- el %><% }) %>
                    Code: null,
                    readonly: false,
                    confirm_arg: {
                            distinguishCancelAndClose: true,
                            showClose:false,
                            //closeOnClickModal: false,
                            //closeOnPressEscape:false,
                            //dangerouslyUseHTMLString:true,
                            confirmButtonText: `@RES.BLL.Face.FunctionBarConfirmButton`,
                            cancelButtonText: `@RES.BLL.Face.FunctionBarCancelButton`,
                            type: 'info'
                        },
                }
            },
            methods: {
                e_clear() {
                    for (key in this.form) {
                        this.form[key] = "";
                    }
                },
                _test() {
                    this.MessageDelSuccess();
                },
                MessageDelSuccess() {
                    return this.$Alert.Info('@RES.BLL.Message.DeleteSuccessfulmsg');
                },
                //排序事件
                sort_change(column) {
                    this.grid.Sort = {
                        Name: column.prop,
                        isAsc: column.order == "ascending"
                    }
                    if (this.grid.data.length == 0) return;
                    this.query(1);
                },
                e_SizeChange: function (size) {
                    this.pagesize = size;
                    this.query(1);
                },
                // 換頁事件
                e_CurrentChange: function (currentPage) {
                    this.query(currentPage);
                },
                e_Add() {
                    this.act_Item("");
                },
                // 子視窗查詢程序
                act_Item(SID) {
                    if (SID != "") {
                        SID = `&SID=${SID}`
                    }
                    var arg = {
                        title: this.i18n.編碼原則維護,
                        content: `@Url.Action("SequenceNum_Item")?SingleMode=true${SID}`
                    }
                    this.$UT.layer(arg, this);
                },
                //父視窗reload 功能
                reload() {
                    console.log("父視窗reload!!");
                    this.query(this.grid.Page.Index);
                },
                //查詢事件
                click_Query() {
                    debugger
                    var Conditions = {
                        condition: "AND",
                        rules: []
                    };
                    _.each(this.form, (value, field) => {
                        if (value != "") {
                            var _rule = { field, type: "string", operator: "contains", value };
                            switch (field) {
                                case "ENABLE_FLAG":
                                    if (value != 'All') {
                                        _rule.operator = "equal";
                                        _rule.value = [value];
                                        Conditions.rules.push(_rule);
                                    }
                                    break;
                                default:
                                    Conditions.rules.push(_rule);
                                    break;
                            }
                        }
                    });
                    this.grid.Conditions = Conditions;
                    this.query(1);
                },

                // 查詢處理程序
                query(pageIdx) {
                    var _self = this;
                    _self.grid.Page.Index = pageIdx;
                    var param = _self.grid.query_rule;
                    console.log({ query: param });
                    var _ajax = {
                        url: '@Url.Action("ListData")',
                        type: 'post',
                        param,
                        success: this.query_success
                    };
                    $.submitForm(_ajax);
                },
                // 查詢成功處理程序
                query_success(res) {
                    debugger
                    let { Data, Code = null, Message, Success = false } = res;
                    if (Success) {
                        let { PageInfo, gridData } = Data || {};
                        this.grid.data = gridData;
                        this.grid.row_count = PageInfo.RowCount;
                    } else {
                        var msg = Message != null
                            ? Message
                            : '@BLL.InterFace.ErrCode.GenericErrorMessage'
                            ;
                        this.$Alert.Err(msg);
                    }
                },
                parse_ENABLE_FLAG(row, column){
                    return this.$UT.parse_Enable(row.ENABLE_FLAG);
                },
                e_del(SID) {
                    var _self = this;
                    var _ops = this.$Alert.genConfirm({ title: _self.i18n.ConfirmDel});
                    Swal.fire(_ops).then(result => {
                        let { value = false } = result;
                        if (value) {
                            var url = '@Url.Action("Delete")';
                            var _ajax = {
                                url,
                                param: { SID},
                                type: 'post',
                                success :_self.Ajax_success
                            };
                            $.submitForm(_ajax);
                        }
                    });
                },
                Ajax_success(res) {
                    let { Success=true, Data, Message = ""} = res;
                    if (Success) {
                        var _self = this;
                        this.MessageDelSuccess().then(() => {
                            _self.reload();
                        });
                    } else {
                        this.$Alert.Warning(Message);
                    }
                },
            }
        })
    });
</script>