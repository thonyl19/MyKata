# input data
Areas: ADM
FunctionName: SequenceNum
row: {
  CREATE_DATE: "2021-01-13 13:50:00"
  ,CREATE_USER: "EIS"
  ,ENCODE_FORMAT_CONTROL_SID: "GTI21011313500003072"
  ,ENCODE_FORMAT_NAME: "LotNoRework"
  ,ENCODE_FORMAT_NO: "LotNoRework"
  ,ENCODE_FORMAT_SID: "GTI20111910362484429"
  ,ENCODE_FORMAT_TYPE: "Lot"
  ,RESET_FORMAT_MASK: "14-03-2224P...."
  ,SERIAL_LAST_VALUE: "01"
  ,UPDATE_DATE: "2021-01-13 13:50:00"
  ,UPDATE_USER: "EIS"
}
--- |
<%- $.outfile('~tmp1.cs') _%>
using BLL.MES;
using BLL.MES.DataViews;
using Frame.Code;
using Frame.Code.Web.Select;
using Genesis.Common;
using Genesis.Library.BLL.MES;
using Genesis.Library.Frame.Code.Web.TableQuery;
using System.Dynamic;
using System.Linq;
using System.Web.Mvc;

namespace Genesis.Areas.<%=Areas%>.Controllers
{
	public class <%=FunctionName%>Controller : BaseController
	{
		ADMServices _svc = new ADMServices();
		#region == Page ==
		public ActionResult <%=FunctionName%>()
		{
			return View();
		}
		public ActionResult <%=FunctionName%>_Item(string SID, bool SingleMode = false)
		{
			/*
			dynamic data = new ExpandoObject();
			//處理基本的選項資料
			var EncodeFormatType = TableQueryService
				.AD_PARAMETER("EncodeFormatType", MDL.SearchKey.No)
				.FirstOrDefault()?.PARAMETER_VALUE;
			if (string.IsNullOrEmpty(EncodeFormatType) == false)
			{
				data.EncodeFormatType = (
					from x in EncodeFormatType.Split(',')
					select new SelectModel
					{
						No = x,
						Display = x,
						Value = x,
					}
					).ToList();
			}
			//依據 SID 判別新增 OR 讀取 ,再各別處理
			if (string.IsNullOrWhiteSpace(SID) == false)
			{
				var _data = _svc.SequenceNum_Read(SID);
				if (_data == null)
				{
					data.Msg = RES.BLL.Message.NoDataFound;
				}
				else {
					data.main = _data.main;
					data.items = _data.items;
					data.ctrl_items = _data.ctrl_items;
				}
			} 
			ViewData["result"] = ((object)data).ToJson(true);
			ViewData["SingleModel"] = SingleMode;
			return View();
		}
		*/
		#endregion
		#region == API ==

		[HttpPost]
		public ActionResult Create(SequenceNum_PostData post)
		{
			var result = _svc.SequenceNum_Save(post,true);
			return Content((result).ToJson(true));
		}

		[HttpPost]
		public ActionResult Update(SequenceNum_PostData post)
		{
			var result = _svc.SequenceNum_Save(post);
			return Content((result).ToJson(true));
		}


		[HttpPost]
		public ActionResult ListData(PagerQuery obj)
		{
			var Result = _svc.AD_ENCODE_FORMAT_PagerQuery(obj);
			return Content(Result.ToJson(true));
		}

		[HttpPost]
		public ActionResult Delete(string SID)
		{
			var result = _svc.SequenceNum_Delete(SID);
			return Content((result).ToJson(true));
		}

		[HttpPost]
		public ActionResult Enable(string SID,bool Enable)
		{
			var result = _svc.SequenceNum_Enable(SID, Enable);
			return Content((result).ToJson(true));
		}
		#endregion

	}


}