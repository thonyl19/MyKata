@{
    ViewBag.Title = @Genesis.Common.PageBaseInfo.getCurrentResource("編碼原則維護表單").RESOURCE_NAME;
    bool isSingleModel = (bool)ViewData["SingleModel"];
    if (isSingleModel) Layout = "~/Views/Shared/_LayoutSingle.cshtml";
}

@eBundle.QRender_CSS()
@eBundle.QRender_JS()
@Html.AntiForgeryToken()
<div id="app" v-cloak class="m-sm">
    <gt-toolbar<%- html.toolbar %> :enable.sync="ENABLE_FLAG" fixed='top'>
    </gt-toolbar>
    <div Area-Main class=" panel b ">
        <div Area-Form class="panel-body form-horizontal gt-form">
            <div class="row ">
                <gt-form-col label="@RES.BLL.Face.lblSetSequenceNo" v-model="form.ENCODE_FORMAT_NO">
                </gt-form-col>
                <gt-form-col label="@RES.BLL.Face.lblSetSequenceName" v-model="form.ENCODE_FORMAT_NAME">
                </gt-form-col>
                <gt-form-col label="@RES.BLL.Face.lblEncodeFormatType">
                    <vue-selectize v-model="form.ENCODE_FORMAT_TYPE"
                                   :options="options.EncodeFormatType" />
                </gt-form-col>

                <gt-form-col label="@RES.BLL.Face.lblMultiSerialDirection">
                    <vue-selectize v-model="form.MULTI_SERIAL_DIRECTION"
                                   :options="options.MultiSerialDirection" />
                </gt-form-col>
                <gt-form-col label="@RES.BLL.Face.Description">
                    <el-input type="textarea"
                              :autosize="{ minRows: 4}"
                              v-model="form.DESCRIPTION">
                    </el-input>
                </gt-form-col>
            </div>
            <el-tabs v-model="activeName">
                <el-tab-pane label="@RES.BLL.Face.BaseInfo" name="first">
                    <%- include('./tab_BaseInfo.cshtml') %>
                </el-tab-pane>
                <el-tab-pane label="@RES.BLL.Face.Other" name="second">
                    <%- include('./tab_Other.cshtml') %>
                </el-tab-pane>
            </el-tabs>
        </div>

    </div>
</div>


<script>
        var _data = @Html.Raw(ViewData["result"] ?? "{}");
        console.log(_data);
        let { EncodeFormatType = [], main = {},items,ctrl_items  } = _data;

        if (main == null) {
            main = {
                ENCODE_FORMAT_NO: '',
                ENCODE_FORMAT_NAME:'',
                MULTI_SERIAL_DIRECTION: '1',
            };
        }
        if (items == null)  items = [];
        $(() => {
            new Vue({
                el: '#app',
                data() {
                    return {
                        <%- include('./VueDataI18n.json') %>
                        <%- include('./VueDataGrid.json') %>
                        form: main,
                        grid_height:350,
                        items,
                        ctrl_items,
                        list: ["FIX", "INPUT", "YEAR", "MONTH", "DAY", "QUARTER", "WEEK", "COLUMN", "SERIAL", "CUSTOM"],
                        fileds: [
                            'ITEM_SEQ', 'ITEM_TYPE', 'ITEM_VALUE_LENGTH'
                            , 'ITEM_VALUE', 'SERIAL_CHARS', 'TABLE_NAME'
                            , 'COLUMN_NAME', 'COLUMN_VALUE_START', 'SERIAL_START_VALUE'
                            , 'CUSTOM_ENTRY_FUNCTION'
                        ],
                        //outerVisible: false,
                        currentRow:null,
                        activeName:'first',
                        enable:true,
                        edit_row: {},
                        options: {
                            EncodeFormatType,
                            MultiSerialDirection:[
                                { "No": "1", "Value": "1", "Display": "@RES.BLL.Face.MultiSerialDirectionBackToFront"},
                                { "No": "2", "Value": "2", "Display": "@RES.BLL.Face.MultiSerialDirectionFrontToBack"}
                            ],
                        },
                        ,confirm_arg:{
                            showClose:false,
                            closeOnClickModal: false,
                            closeOnPressEscape:false,
                            dangerouslyUseHTMLString:true,
                            confirmButtonText: `@RES.BLL.Face.FunctionBarConfirmButton`,
                            cancelButtonText: `@RES.BLL.Face.FunctionBarCancelButton`,
                            type: 'info'
                        },
                        isLock:false,
                    }
                },
                computed: {
                    <%_ ut.echo(VueComputedToolbar,(el)=>{ _%>
                    <%- el %><% }) %>
                    <%- include('./VueComputed_isAddMode.json') %>
                    <%- include('./VueComputed_ENABLE_FLAG.json') %>
                    isCanSave() {
                        //debugger
                        var mustHaveItem = this.items
                            .filter(el => el['ENCODE_FORMAT_ITEM_SID'] != -1)
                            .length > 0;
                        var isNotEditing = this.currentRow == null;
                        return mustHaveItem && isNotEditing;
                    },
                },
                watch: {
                    <%- include('./VueWatch_ENABLE_FLAG.json') %>
                },
                methods: {
                    <%- include('./VueMethods_e_enable.json') %>
                    <%- include('./VueMethods_SaveDel.json') %>

                    //#region [ToolBar 相關程序]
                    <% for (var item in toolbar){ _%><%= item %>(){},
                    <% } _%>//#endregion [ToolBar 相關程序]
                    //#region [Grid 相關程序]
                    OnEscapeKeyUp(event) {
                        if (event.which === 27) {
                            this.Cancel();
                        }
                    },
                    RowStyle(item) {
                        let { row } = item;
                        var isEditRow = row === this.currentRow;
                        if (isEditRow) {
                            let { ITEM_TYPE = "INPUT" } = this.edit_row;
                            switch (ITEM_TYPE) {
                                case "FIX":
                                    this.SetNull(this.edit_row, 5, 6, 7, 8, 9);
                                    break;
                                case "INPUT":
                                    this.SetNull(this.edit_row, 4, 5, 6, 7, 8, 9);
                                    break;
                                case "COLUMN":
                                    this.SetNull(this.edit_row, 3, 8, 9);
                                    break;
                                case "SERIAL":
                                    this.SetNull(this.edit_row, 3, 5, 6, 7, 9);
                                    break;
                                case "CUSTOM":
                                    this.SetNull(this.edit_row, 3, 5, 6, 7, 8);
                                    break;
                                default:
                                    ITEM_TYPE = "TIME";
                                    this.SetNull(this.edit_row, 3, 5, 6, 7, 8, 9);
                                    break;
                            }
                            return `gt-sty s${ITEM_TYPE}`;
                        }
                        return "";
                    },
                    SetNull(target, ...Idx) {
                        var _self = this;
                        _.each(Idx, (i) => {
                            var key = _self.fileds[i];
                            target[key] = null;
                        })
                    },

                    AddItem() {
                        var _self = this;
                        var _fn = () => {
                            var _obj = _.maxBy(this.items, (el) => { return el.ITEM_SEQ })
                                || { ITEM_SEQ: 0 };
                            var ITEM_SEQ = _obj.ITEM_SEQ + 1;
                            var _new = { ITEM_SEQ, ITEM_TYPE: 'INPUT', RESET_ON_CHANGED: 'T', ENCODE_FORMAT_ITEM_SID: -1 };
                            _self.SetNull(_new, 2, 3, 4, 5, 6, 7, 8, 9);
                            _self.items.push(_new);
                            _self.currentRow = _new;
                            _self.edit_row = Object.assign({}, _new);
                        }
                        _self.CancelEdit(_fn);

                    },
                    Edit(idx, row) {
                        var _self = this;
                        var _fn = () => {
                            _self.currentRow = row;
                            _self.edit_row = Object.assign({}, row);
                        }
                        _self.CancelEdit(_fn);
                    },
                    CancelEdit(_fn) {
                        var _self = this;
                        if (_self.currentRow != null) {
                            _self.$confirm(_self.i18n.ConfirmCancel, '提示', _self.confirm_arg).then(() => {
                                _fn();
                            });
                        } else {
                            _fn();
                        }
                    },
                    Confirm(idx, row) {
                        var _tar = this.items[idx];
                        var isNew = false;
                        _.each(this.edit_row, (el, key) => {
                            _tar[key] = el;
                            if (key == 'ENCODE_FORMAT_ITEM_SID' && el == -1) {
                                _tar[key] = null;
                            }
                        })
                        this.edit_row = {};
                        this.currentRow = null;
                    },
                    Cancel(idx) {
                        var _self = this;
                        _self.$confirm(_self.i18n.ConfirmCancel, '提示', _self.confirm_arg).then(() => {
                            debugger
                            var isNew = _self.currentRow['ENCODE_FORMAT_ITEM_SID'] == -1;
                            if (isNew) _self.items.splice(idx, 1);
                            _self.edit_row = {};
                            _self.currentRow = null;
                        });
                    },
                    DelRow(idx, row) {
                        var _self = this;
                        _self.$confirm(_self.i18n.ConfirmDel, '提示', _self.confirm_arg).then(() => {
                            _self.items.splice(idx, 1);
                        });
                    },
                    //#endregion [input_grid]

                    _test() {
                        var _self = this;
                        _self.MessageMustInputOne();
                    },
                    e_add() {
                        var _self = this;
                        this.$confirm(_self.i18n.ConfirmAdd, '提示', _self.confirm_arg).then(() => {
                            _self.$URL.chgSearchParam({ SID: null }, true);
                        });
                    },

                    MessageMustInputOne() {
                        var _msg = "@RES.BLL.Message.MustInputOne".replace("{0}","@RES.BLL.Face.SequenceDetail")
                        this.$Alert.Err(_msg);
                    },

                    
                }
            })
        });
</script>
    <style>

    </style>
