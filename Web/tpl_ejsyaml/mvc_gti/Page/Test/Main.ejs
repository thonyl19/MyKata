@{
	ViewBag.Title = @Genesis.Common.PageBaseInfo.getCurrentResource("編碼原則維護").RESOURCE_NAME;

}
@eBundle.QRender_CSS()
@eBundle.QRender_JS()
<h3>
	@ViewBag.Title
</h3>
<div id="app" v-cloak>
	<gt-toolbar  :e_Add="e_Add" :e_query="click_Query" :e_clear="e_clear" >

	</gt-toolbar>
	<%_ Src.ut.echo_file('~Htm_Code.txt',(el)=>{ _%>
                <%- el %><% }) %>
		
		<%_ Src.ut.echo_file('~Htm_Table.txt',(el)=>{ _%>
                <%- el %><% }) %>
</div>
</div>

<script>
	$(() => {
		new Vue({
			el: '#app',
			data() {
				return {
					grid: {
						data: [],
						pageSize: 10,
						pageIdx: 1,
						row_count: 0,
						Sort: {
							Name: "CREATE_DATE",
							isAsc: true
						},
						Conditions: {},
						Page: {
							Index: 1,
							Size: 10,
						},
						get query_rule() {
							{
								let { Conditions, Sort, Page } = this;
								return {
									Conditions, Sort, Page
								}
							}
						}
					},

					form: {
						ENCODE_FORMAT_NO: '',
						ENCODE_FORMAT_NAME: '',
						ENABLE_FLAG: 'All',
					},
                    //TODO-i18n:
					i18n: {
                        操作: "@RES.BLL.Face.Operate",
						ConfirmDel: '請確認是刪除這筆資料?',
                        編碼原則維護:'編碼原則維護',
					},
					Code: null,
					readonly: false,
					confirm_arg: {
							distinguishCancelAndClose: true,
                            showClose:false,
                            //closeOnClickModal: false,
                            //closeOnPressEscape:false,
                            //dangerouslyUseHTMLString:true,
                            confirmButtonText: `@RES.BLL.Face.FunctionBarConfirmButton`,
                            cancelButtonText: `@RES.BLL.Face.FunctionBarCancelButton`,
                            type: 'info'
                        },
				}
			},
			methods: {
				e_clear() {
                    for (key in this.form) {
						this.form[key] = "";
					}
				},
				_test() {
					this.MessageDelSuccess();
				},
				MessageDelSuccess() {
					return this.$Alert.Info('@RES.BLL.Message.DeleteSuccessfulmsg');
                },
				//排序事件
				sort_change(column) {
					this.grid.Sort = {
						Name: column.prop,
						isAsc: column.order == "ascending"
					}
					if (this.grid.data.length == 0) return;
					this.query(1);
				},
				e_SizeChange: function (size) {
					this.pagesize = size;
					this.query(1);
				},
				// 換頁事件
				e_CurrentChange: function (currentPage) {
					this.query(currentPage);
				},
				e_Add() {
					this.act_Item("");
				},
				// 子視窗查詢程序
				act_Item(SID) {
					if (SID != "") {
                        SID = `&SID=${SID}`
					}
					var arg = {
                        title: this.i18n.編碼原則維護,
                        content: `@Url.Action("SequenceNum_Item")?SingleMode=true${SID}`
					}
					this.$UT.layer(arg, this);
				},
				//父視窗reload 功能
				reload() {
					console.log("父視窗reload!!");
					this.query(this.grid.Page.Index);
				},
				//查詢事件
				click_Query() {
					debugger
					var Conditions = {
						condition: "AND",
						rules: []
					};
					_.each(this.form, (value, field) => {
						if (value != "") {
                            var _rule = { field, type: "string", operator: "contains", value };
							switch (field) {
								case "ENABLE_FLAG":
									if (value != 'All') {
										_rule.operator = "equal";
										_rule.value = [value];
										Conditions.rules.push(_rule);
									}
									break;
								default:
                                    Conditions.rules.push(_rule);
									break;
							}
						}
					});
					this.grid.Conditions = Conditions;
					this.query(1);
				},

				// 查詢處理程序
				query(pageIdx) {
					var _self = this;
					_self.grid.Page.Index = pageIdx;
					var param = _self.grid.query_rule;
					console.log({ query: param });
					var _ajax = {
						url: '@Url.Action("ListData")',
						type: 'post',
						param,
						success: this.query_success
					};
					$.submitForm(_ajax);
				},
				// 查詢成功處理程序
				query_success(res) {
					debugger
					let { Data, Code = null, Message, Success = false } = res;
					if (Success) {
						let { PageInfo, gridData } = Data || {};
						this.grid.data = gridData;
						this.grid.row_count = PageInfo.RowCount;
					} else {
						var msg = Message != null
							? Message
							: '@BLL.InterFace.ErrCode.GenericErrorMessage'
							;
						this.$Alert.Err(msg);
					}
				},
				parse_ENABLE_FLAG(row, column){
					return this.$UT.parse_Enable(row.ENABLE_FLAG);
				},
                e_del(SID) {
					var _self = this;
                    var _ops = this.$Alert.genConfirm({ title: _self.i18n.ConfirmDel});
					Swal.fire(_ops).then(result => {
                        let { value = false } = result;
                        if (value) {
							var url = '@Url.Action("Delete")';
							var _ajax = {
								url,
								param: { SID},
								type: 'post',
								success :_self.Ajax_success
							};
							$.submitForm(_ajax);
						}
					});
				},
				Ajax_success(res) {
                    let { Success=true, Data, Message = ""} = res;
                    if (Success) {
                        var _self = this;
                        this.MessageDelSuccess().then(() => {
							_self.reload();
                        });
                    } else {
                        this.$Alert.Warning(Message);
                    }
                },
			}
		})
	});
</script>
