<%
    arg.ut.fn_inc = include;
%>
@{
    ViewBag.Title = @Genesis.Common.PageBaseInfo.getCurrentResource("<%= arg.RESOURCE_NAME%>").RESOURCE_NAME;
    bool isSingleModel = (bool)ViewData["SingleModel"];
    if (isSingleModel) Layout = "~/Views/Shared/_LayoutSingle.cshtml";
}
@eBundle.QRender_CSS()
@eBundle.QRender_JS()
@Html.AntiForgeryToken()
<div id="app" v-cloak class="m-sm">
    <%_ arg.ut.echo_file('./~Htm_Toolbar.cshtml',(el)=>{ _%>
    <%- el %><% }) %>
    <div Area-Main class=" panel b ">
        <div Area-Form class="panel-body form-horizontal gt-form">
            <div class="row ">
                <%_ arg.ut.echo_file('./~Htm_FormCol.cshtml',(el)=>{ _%>
			    <%- el %><% }) %>
            </div>
            <%_ arg.ut.echo_file('./~Htm_Tabs.cshtml',(el)=>{ _%>
            <%- el %><% }) %>
        </div>
    </div>
</div>
<script>
        var _data = @Html.Raw(ViewData["result"] ?? "{}");
        console.log(_data);
        let {form = {}} = _data;
        /*
        if (main == null) {
            main = {
                ENCODE_FORMAT_NO: '',
                ENCODE_FORMAT_NAME:'',
                MULTI_SERIAL_DIRECTION: '1',
            };
        }
        */
        $(() => {
            new Vue({
                el: '#app',
                data() {
                    return {
                        <%_ arg.ut.echo_file('./~Vue_Data.js',(el)=>{ _%>
                        <%- el %><% }) %>
                        form,
                        tabName:'first',
                        enable:true,
                        isLock:false,
                        ,confirm_arg:{
                            showClose:false,
                            closeOnClickModal: false,
                            closeOnPressEscape:false,
                            dangerouslyUseHTMLString:true,
                            confirmButtonText: `@RES.BLL.Face.FunctionBarConfirmButton`,
                            cancelButtonText: `@RES.BLL.Face.FunctionBarCancelButton`,
                            type: 'info'
                        },
                    }
                },
                computed: {
                    <%_ arg.ut.echo_file('./~Vue_Computed.js',(el)=>{ _%>
                    <%- el %><% }) %>
                    isAddMode() {
                        var url = new URL(location);
                        var SID = url.searchParams.get('SID') ?? "";
                        var isAddMode = (SID == "");
                        return isAddMode;
                    },
                    isCanSave() {
                        //debugger
                        var mustHaveItem = this.items
                            .filter(el => el['ENCODE_FORMAT_ITEM_SID'] != -1)
                            .length > 0;
                        var isNotEditing = this.currentRow == null;
                        return mustHaveItem && isNotEditing;
                    },
                },
                watch: {
                    <%_ arg.ut.echo_file('./~Vue_Watch.js',(el)=>{ _%>
                    <%- el %><% }) %>
                },
                methods: {
                    <%_ arg.ut.echo_file('./~Vue_Methods.js',(el)=>{ _%>
                    <%- el %><% }) %>
                    getSID(){
                        let {<%= arg.SID_Filed%>:SID} = this.form;
                        return SID;
                    },
                    _test() {
                        var _self = this;
                        _self.MessageMustInputOne();
                    },
                    MessageMustInputOne() {
                        var _msg = "@RES.BLL.Message.MustInputOne".replace("{0}","@RES.BLL.Face.SequenceDetail")
                        this.$Alert.Err(_msg);
                    },
                }
            })
        });
</script>
<style>

</style>
