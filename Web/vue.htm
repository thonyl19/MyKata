<!DOCTYPE html>
<html>
<head runat="server">
    <title></title>
    <script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/moment@2.24.0/moment.min.js"></script>
    <script src="https://unpkg.com/vuex@3.1.2/dist/vuex.js"></script>
    <script src="https://unpkg.com/vue-router/dist/vue-router.js"></script>
    <script src="https://unpkg.com/jss@9.8.7/dist/jss.js"></script>
    <script src="https://unpkg.com/jss-preset-default/dist/jss-preset-default.min.js"></script>
    
    <!-- <script type="text/javascript" src="https://unpkg.com/json-fns/json-fns.js"></script> -->
    <script type="text/javascript" src="https://npmcdn.com/@reactivex/rxjs@5.0.0-beta.8/dist/global/Rx.umd.js"></script>
    
    <style>
        .flex, .flex dt, .flex dd {
            width:100%;
            display: block;
            padding:0px;
            margin:0px;
        }
        .flex.f-col{
            flex-flow: column;
        }
        .flex.f-row{
            flex-flow: row;
        }
    
        dl.flex {
            display: flex;
        }
        
        .flex dt 
        {
            flex:0;
        }
        
        .flex dd
        {
            flex:1;
        }
        textarea{
            width:100%;
            height:15em;
        }
        pre{
            width:100%;
            height:100%;
            background:yellow;
            margin-top:.5em;
            overflow-y:auto;
        }
        ul {
            list-style-type:none;
            margin:0;
            padding:.3em;
        }
        li {
            min-width:5em;
            line-height:1.3em;
            white-space:nowrap;
        }
        li:hover{
            color:blue;
            font-weight:400;
            cursor:pointer;
        }
        li.active {
            background-color:#20FFA6;
        }
     
    </style>
</head>
<body class="CSBody">
    <div id="app">
        <dl class="flex f-row">
            <dt>
                <ul> 
                    <li v-for="(item) in tabsList"
                        v-bind:key="item"
                        v-bind:class="['tab-button', { active: currentTab === item }]"
                        >
                        <a @click="currentTab=item"> {{item}}</a>
                    </li>
                </ul>
            </dt>
            <dd style="height:95vh ;" >
                <dl class="flex f-col">
                    <dt>
                        <input type="button" value="Copy" @click="copy" />
                         <input type="button" value="Copy Components" @click="copy_com" />
                        <textarea v-model="Code" @blur="change()"></textarea>
                        <component
                            :is="currentTabComponent"
                            :sets="currentTab"
                        ></component>
                         
                    </dt>
                    <dd>
                        <!-- <pre>{{result}}</pre> -->
                    </dd>
                </dl>
            </dd>
        </dl>
    </div>
    
<script>
    /*
    https://www.w3cplus.com/vue/seven-ways-to-define-a-component-template-by-vuejs.html
    */
    let views = {
        "T01"(){
            var _obj = {
                "template": `<div>test</div>`,
            }
            return _obj;
         },
        destroyed(){
            var _obj = {
                "template": "<div>destroyed 測試,當切換到另一個頁籤時觸發.</div>",
                destroyed(){
                    alert('物件己被銷毀!');
                }
            }
            return _obj;
        },

        propsCase(){
            var ex_compoment = {
                "template": "<h1>{{message}}</h1>",
                "props": ["message"]
            }
            Vue.component('ex_compoment', ex_compoment);
            var _obj = {
                template: `
                <div>
                    <ex_compoment message=\"Welcome to the VueJs Components Tutorial\"></ex_compoment>
                </div>
                `,
           }
           return _obj;
        },

 

        rxjs連撃限制(){
            var _obj = {
                data(){
                    return {
                        clicks:0
                    }
                },
                "template": `
                    <div>限制點撃每秒只能作用一次,其餘不會觸發<input type=button ref='myButton' value='exec'>
                    <div>{{clicks}}</div></div>
                `,
                mounted(){
                    let _self = this;
                    //Rx.Observable.fromEvent(this.$refs.myButton, 'click')
                        //.subscribe(_self.exec);
                    let z = Rx.Observable.fromEvent(this.$refs.myButton,'click');
                        z.throttleTime(1000)
                        //.scan(count => count + 1, 0)
                        .subscribe(_self.exec);

                },
                methods:{
                    exec(){
                        this.clicks++;
                    }
                }
            };
            return _obj;
        },
        
        rxjs連續輸入延遲反應(){
            var _obj = {
                data(){
                    return {
                        val:'',
                        cb_val:'',
                        keyupObs:null,
                    }
                },
                template: `
                    <div>限制點撃每秒只能作用一次,其餘不會觸發
                        <input type=text ref='myTxt' v-model='val' >
                    <div>當前己輸入值：{{val}} , 1秒後才整個接收的完整值：{{cb_val}}</div></div>
                `,
                mounted(){
                    let _self = this;
                    //Rx.Observable.fromEvent(this.$refs.myButton, 'click')
                        //.subscribe(_self.exec);
                    this.keyupObs = Rx.Observable
                        .fromEvent(this.$refs.myTxt,'keyup')
                        .debounceTime(700)
                        .subscribe(_self.exec);
                },
                destroyed(){
                    this.keyupObs.unsubscribe();
                    console.log('keyupObs 註銷',this.keyupObs);
                },
                methods:{
                    exec(){
                        this.cb_val = this.val;
                    }
                }
            };
            return _obj;
        },
        
        vuex範例(){
            const store = new Vuex.Store({
                state: {
                    count: 0
                },
                mutations: {
                    increment: state => state.count++,
                    decrement: state => state.count--
                }
            });

            var _obj={
                template:`
                    <div>
                        <p>{{ count }}</p>
                        <p>
                            <button @click="increment">+</button>
                            <button @click="decrement">-</button>
                        </p>
                    </div>`,
                computed: {
                    count () {
                        //取得 store的資料
                        return store.state.count
                    }
                },
                methods: {
                    increment() {
                        store.commit('increment');
                    },
                    decrement(){
                        store.commit('decrement');
                    }
                }
            };
            return _obj;
        },
        router範例(){
            const http404 = { 
                template: '<div>http404 path is : {{$route.path}}</div>',
                mounted(){
                    console.log(this.$route.path);
                }
            }
            const index = { 
                template: '<div>index path is : {{$route.name}}</div>',
                mounted(){
                    console.log(this.$route.path);
                }
            }
            const panda = { 
                template: '<div>panda path is : {{$route.path}}</div>',
                mounted(){
                    console.log(this.$route.path);
                }
            }

            const router = new VueRouter({
                mode: 'history',
                routes: [
                        {
                        path: "#",
                        name: "root",
                        //redirect: '/index'
                    },
                    {
                        path: "#index",
                        name: "index",
                        component: index
                    },
                    {
                        path: "#panda",
                        name: "panda",
                        component: panda
                    },
                    {
                        path: "**",
                        name: "http404",
                        component: http404
                    }
                    ]
                })
            var _obj={
                router,
                template:`
                <div>
                    <router-link to="#">Root</router-link> |
                    <router-link to="#index">Index</router-link> |
                    <router-link to="#panda">Panda</router-link> |
                    <router-link to="#http404">http404</router-link>
                    <router-view></router-view>
                </div>
                `
            };
            return _obj;
        },

        '自定義物件案例'(){
            var list={
                props: {
                    items: Array
                },
                methods: {
                    removeItem_ (index,props) {
                    console.log(props);
                    alert('test');
                        this.$emit('delete', index)
                    }
                },
                template: `
                    <ul>
                        <li v-for="item, index in items">
                        <slot name="item" :item="item" :index="index" :removeItem="removeItem_">
                            <span>Default slot: {{ item }} <button @click="$emit('delete', index)">X</button></span>
                        </slot></li>
                    </ul>
               `
            };
            Vue.component('list', list);
       
            var _obj={
                template:`
                <div>
                    輸入資料後,按enter 即可新增項目<input type="text" v-model="text" @keyup.enter="addItem" />
                    <list :items="items" @delete="removeItem"></list>
                    <list :items="items" @delete="removeItem">
                        <template slot="item" slot-scope="zzz">
                            <span @click="zzz.removeItem(zzz.index,zzz)">{{ zzz.item }}</span>
                            <button @click="removeItem(zzz.index)">X</button>
                        </template>
                    </list>
                </div>`,
                data(){
                    return  {
                        text: '',
                        items: ['foo', 'bar']
                    }
                },
                methods: {
                    addItem () {
                        this.items.push(this.text)
                        this.text = ''
                    },
                    removeItem (index) {
                        this.items.splice(index, 1)
                    },
                }
            };
            return _obj;
        },

        event案例(){
            var _obj={
                template:`
                    <div>
                        <div onclick="alert('test')">
                            <a id="inner" @click="handleOnclick($event)" href="#">點此演示事件被攔截的情形</a>
                            <button id="xx" >點此區塊,觸發上層事件,演示未攔擮情形.</button>
                        </div>
                    </div>`,
                methods:{
                    handleOnclick(ev) {
                        ev = ev || window.event;
                        if (confirm('截獲 event, 是否中斷 event?')) {
                            ev.stopPropagation();
                            ev.preventDefault();
                            ev.stopImmediatePropagation();
                        }
                        return false;
                    }
                }
            };
            return _obj;
        },
        
        
        returnTemplate(){
            /*
            未完成
            需求為,希望在 fu 中,return html code ,並在 UI 中生成 domObj 
            */
            var _obj={
                template:`
                <div>{{fn('test')}}
                </div>`,
                methods:{
                    fn(val){
                        return `<a><input type="checkbox" />${val}</a>`;
                    }
                }
            };
            return _obj; 
        },
        'v-html'(){
            /*
            1. v-html 試例
            2. 在 產生出來的html 中,己經無再使用 vue 相關程序功能
            */
            var _obj={
                data(){
                    return {checked:'true'}
                },
                template:`
                <div>{{checked}}
                    <span  v-html="fn()"></span>
                </div>`,
                methods:{
                    fn(){
                        return  '<input type="checkbox" v-model="checked" />'
                    }
                }
            };
            return _obj;
        },
        
        DynamicHtml_v1(){
            /*
            參考自 https://jsfiddle.net/Linusborg/1zdzu7k1/
            */
            var dynamic = {
                props: ['template'],
                data() {
                    return {
                        templateRender: null,
                        msg:'test'
                    };
                },
                render(h) {
                    if (!this.templateRender) {
                        return h('div', 'loading...');
                    } else { // If there is a template, I'll show it
                        return this.templateRender();
                    }
                },
                watch: {
                    // Every time the template prop changes, I recompile it to update the DOM
                    template:{
                        immediate: true, // makes the watcher fire on first render, too.
                        handler() {
                            var res = Vue.compile(this.template);
                            this.templateRender = res.render;
                            
                            // staticRenderFns belong into $options, 
                            // appearantly
                            this.$options.staticRenderFns = []
                            
                            // clean the cache of static elements
                            // this is a cache with the results from the staticRenderFns
                            this._staticTrees = []
                            
                            // Fill it with the new staticRenderFns
                            for (var i in res.staticRenderFns) {
                                //staticRenderFns.push(res.staticRenderFns[i]);
                                this.$options.staticRenderFns.push(res.staticRenderFns[i])
                            }
                        }
                    }
                },
            };

            var _obj={
                data() {
                    return {
                        html: [
                            '<div><span>First template--{{msg}}</span></div>',
                            '<div><span>Second template</span></div>',
                            '<div>Working template, no staticRenderFns here</div>'],
                        index: 0,
                    }
                },
                template:`
                <div>
                    <button @click="index = 0">First</button>
                    <button @click="index = 1">Second</button>
                    <button @click="index = 2">I work, no staticRenderFns here</button>
                    <dynamic v-bind:template="html[index]"></dynamic>
                </div>`,
                components: {
                    dynamic
                },
            };
            return _obj;
        },
        DynamicHtml_v2(){
            /*
                Ref:https://jsfiddle.net/Linusborg/47ejdvyy/4/
                比 V1 更為精簡
            */
            var Loading = {
                template: `<div>Loading...</div>`
            }
            var dynamic = {
                functional: true,
                template: '#dynamic',
                props: ['template'],
                render(h, context) {
                    const template = context.props.template
                    const component = template ? { template } : Loading
                    return h(component)
                }
            }
            var _obj = {
                template:`
                <div>
                    <button @click="index = 0">First</button>
                    <button @click="index = 1">Second</button>
                    <button @click="index = 2">I work, no staticRenderFns here</button>
                    <dynamic :template="html[index]"></dynamic>
                </div>`,
                data(){
                    return {
                        html: [
                        '<div id="mount-point"><span>First template</span></div>',
                        '<div id="mount-point"><span>Second template</span></div>',
                        '<div id="mount-point">Working template, no staticRenderFns here</div>'
                        ],
                        index: 0,
                    }
                },
                components: {
                    dynamic
                },
            }
            return _obj;
        },
        DynamicHtml_v3(){
            var Loading = {
                template: `<div>Loading...</div>`
            }
            var dynamic = {
                props: ['template'],
                data() {
                    return {
                        templateRender: null,
                        msg:'test'
                    };
                },
                render(h) {
                    if (!this.templateRender) {
                        return h('div', 'loading...');
                    } else { // If there is a template, I'll show it
                        return this.templateRender();
                    }
                },
                watch: {
                    // Every time the template prop changes, I recompile it to update the DOM
                    template:{
                        immediate: true, // makes the watcher fire on first render, too.
                        handler() {
                            var res = this.template;
                            this.templateRender = res.render;
                            
                            // staticRenderFns belong into $options, 
                            // appearantly
                            this.$options.staticRenderFns = []
                            
                            // clean the cache of static elements
                            // this is a cache with the results from the staticRenderFns
                            this._staticTrees = []
                            
                            // Fill it with the new staticRenderFns
                            for (var i in res.staticRenderFns) {
                                //staticRenderFns.push(res.staticRenderFns[i]);
                                this.$options.staticRenderFns.push(res.staticRenderFns[i])
                            }
                        }
                    }
                },
            };

            var _obj = {
                template:`
                <div>
                    <button @click="index = 0">First</button>
                    <button @click="index = 1">Second</button>
                    <button @click="index = 2">I work, no staticRenderFns here</button>
                    <dynamic :template="html[index]"></dynamic>
                </div>`,
                data(){
                    return {
                        html: [
                            Vue.compile('<div id="mount-point"><span>First template-{{msg}}</span></div>'),
                            Vue.compile('<div id="mount-point"><span>Second template-{{msg}}</span></div>'),
                            Vue.compile('<div id="mount-point">Working template, no staticRenderFns here-{{msg}}</div>')
                        ],
                        index: 0,
                    }
                },
                components: {
                    dynamic
                },
            }
            return _obj;
        },
        VueCmd(){
            var _obj={
                template:`
                <div>
                </div>`
            };
            console.log(Vue.options.components);
            return _obj;
        },
        'resizer-box'(){
            //https://jsfiddle.net/Linusborg/jmo9Lknn/
            var _obj={
                template:`
                <div>
                </div>`
            };
            return _obj;
        },
        
        std(){
            var _obj={
                template:`
                <div>
                </div>`
            };
            return _obj;
        },
    }    
         

    //** # Main
    for (var k in views){
        var _obj =  views[k]();//Object.assign({},views[k])
        Vue.component(`x-${k}`,_obj);
    }
    let tabsList = Object.keys(views);

    let tabs =  {
        data: {
            tabsList,
            currentTab: 'DynamicHtml_v3'//tabsList[0],
            ,Code:''
        },
        computed: {
            currentTabComponent(){
                var _obj = views[this.currentTab];
                this.Code = _obj; 
                return `x-${this.currentTab}`;
            }
        },
        methods: {
            change(){
                this.views[this.currentTab].template = this.Code;
            },
            copy(){

            },
            copy_com(){
                
            }
        },
        "el": "#app"
    };
    Vue.config.productionTip = false
    new Vue(tabs);
        
        
    </script>
</body>
</html>