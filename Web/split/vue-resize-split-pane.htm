<!DOCTYPE html>
<html>
<head >
    <title></title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jQuery-slimScroll/1.3.8/jquery.slimscroll.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
    <script src="https://unpkg.com/element-ui@2.13.0/lib/index.js"></script>
    <script src="https://unpkg.com/jss@9.8.7/dist/jss.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
    <script src="https://unpkg.com/element-ui@2.13.0/lib/index.js"></script>
    <script src="../node_modules/vue-resize-split-pane/config/index.js" ></script>
    <script src="../_tmpData.js" ></script>

    <link href="../node_modules/vue-splitpane//docs/index.css" rel="stylesheet" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://netdna.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.css">
    <link rel="stylesheet" href="https://unpkg.com/element-ui@2.13.0/lib/theme-chalk/index.css">

    <style>
	.flex, .flex dt, .flex dd {
		width: 100%;
		display: block;
		padding: 0px;
		margin: 0px;
	}

	.flex.f-col {
		flex-flow: column;
	}

	.flex.f-row {
		flex-flow: row;
	}

	dl.flex {
		display: flex;
	}

	.flex dt {
		flex: 0;
	}

	.flex dd {
		flex: 1;
	}

	textarea {
		width: 100%;
		height: 15em;
	}

	pre {
		width: 100%;
		height: 100%;
		background: yellow;
		margin-top: .5em;
		overflow-y: auto;
	}

	ul {
		list-style-type: none;
		margin: 0;
		padding: .3em;
	}

	li {
		min-width: 5em;
		line-height: 1.3em;
		white-space: nowrap;
	}

	li:hover {
		color: blue;
		font-weight: 400;
		cursor: pointer;
	}

	li.active {
		background-color: #20FFA6;
	}
    
    .d-show{
        margin: 5px;
    }
    </style>
</head>
<body class="CSBody">
    <pre>
      https://www.npmjs.com/package/vue-resize-split-pane
      https://raven78.github.io/vue-resize-split-pane/
      
      2019 最後一次更新
      因為套件的code 只能使用 import model ,故此只好棄用
    <div>
    <div id="app">
        <rs-panes split-to="columns" :allow-resize="true">
            <div slot="firstPane">
              FIRST
            </div>
            <div slot="secondPane">
              SECOND
            </div>
          </rs-panes>
 
    </div>

    <script>
        $(()=>{
            debugger;
            Vue.component('split-pane', SplitPane);
            //const { Splitpanes, Pane } = splitpanes;
            let views = {
                S01() {
                    var _obj = {
                        _vue:{
                            template: `
                            <div>

                                <split-pane v-on:resize="resize" :min-percent='20' :default-percent='30' split="vertical">
      <template slot="paneL">
        A
      </template>
      <template slot="paneR">
        B
      </template>
    </split-pane>
    </div>
                            `,
                        components: { 'split-pane':SplitPane }
                    }
                };
                return _obj;
            },
            S02() {
                var _obj = {
                    _vue:{
                        template: `
                        <div>
                        <splitpanes style="height: 400px">
  <pane min-size="20">
    <span>1</span>
  </pane>
  <pane>
    <splitpanes horizontal>
      <pane>
        <span>2</span>
      </pane>
      <pane>
        <span>3</span>
      </pane>
      <pane>
        <span>4</span>
      <pane>
    </splitpanes>
  </pane>
  <pane>
    <span>5</span>
  </pane>
</splitpanes></div>
                            `
                            ,
                        //components: { Splitpanes,Pane }
                    }
                };
                return _obj;
            },
            std() {
                var _obj = {
                    _vue:{
                        template: `
                            <div>
                            </div>
                            `
                    }
                };
                return _obj;
            },
        }


        //** # Main
        for (var k in views) {
            var { _vue } = views[k]();
            Vue.component(`x-${k}`, _vue);
        }
        let tabsList = Object.keys(views);

        let tabs = {
            data: {
                tabsList,
                "currentTab": tabsList[2],
                "Code": ''
            },
            computed: {
                currentTabComponent() {
                    var _obj = views[this.currentTab];
                    this.Code = _obj;
                    var { _css } = _obj();
                    if (_css != null) styled.injectGlobal`${_css}`;
                    return `x-${this.currentTab}`;
                }
            },
            methods: {
                change() {
                    this.views[this.currentTab].template = this.Code;
                },
                copy() {

                },
                copy_com() {

                }
            },
            "el": "#app"
        };
        Vue.config.productionTip = false
        new Vue(tabs);
    })

    </script>
</body>
</html>
