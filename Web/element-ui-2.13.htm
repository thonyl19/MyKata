<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head runat="server">
    <title></title>
    <script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
    <script src="https://unpkg.com/vuex@3.1.2/dist/vuex.js"></script>
    <script src="https://unpkg.com/vue-router/dist/vue-router.js"></script>
    <script src="https://unpkg.com/element-ui@2.13.0/lib/index.js"></script>
    <script src="https://unpkg.com/vue-styled-components@1.4.9/dist/vue-styled-components.js"></script>
    <script src="https://npmcdn.com/@reactivex/rxjs@5.0.0-beta.8/dist/global/Rx.umd.js"></script>
    <link rel="stylesheet" href="https://unpkg.com/element-ui@2.13.0/lib/theme-chalk/index.css">
    
    <style>
        .flex, .flex dt, .flex dd {
            width:100%;
            display: block;
            padding:0px;
            margin:0px;
        }
        .flex.f-col{
            flex-flow: column;
        }
        .flex.f-row{
            flex-flow: row;
        }
    
        dl.flex {
            display: flex;
        }
        
        .flex dt 
        {
            flex:0;
        }
        
        .flex dd
        {
            flex:1;
        }
        textarea{
            width:100%;
            height:15em;
        }
        pre{
            width:100%;
            height:100%;
            background:yellow;
            margin-top:.5em;
            overflow-y:auto;
        }
        ul {
            list-style-type:none;
            margin:0;
            padding:.3em;
        }
        li {
            min-width:5em;
            line-height:1.3em;
            white-space:nowrap;
        }
        li:hover{
            color:blue;
            font-weight:400;
            cursor:pointer;
        }
        li.active {
            background-color:#20FFA6;
        }
     
    </style>
</head>
<body class="CSBody">
    <div id="app">
        <dl class="flex f-row">
            <dt>
                <ul> 
                    <li v-for="(item) in tabsList"
                        v-bind:key="item"
                        v-bind:class="['tab-button', { active: currentTab === item }]"
                        >
                        <a @click="currentTab =item"> {{item}}</a>
                    </li>
                </ul>
            </dt>
            <dd style="height:95vh ;" >
                <dl class="flex f-col">
                    <dt>
                        <input type="button" value="Copy" @click="copy" />
                         <input type="button" value="Copy Components" @click="copy_com" />
                        <textarea v-model="Code" @blur="change()"></textarea>
                        <component
                            v-bind:is="currentTabComponent"
                            :sets="currentTab"
                        ></component>
                         
                    </dt>
                    <dd>
                        <!-- <pre>{{result}}</pre> -->
                    </dd>
                </dl>
            </dd>
        </dl>
    </div>
    
<script>
    /*
    https://www.w3cplus.com/vue/seven-ways-to-define-a-component-template-by-vuejs.html
    */
    let views = {
        "自定義 el-select 項目圖示"(){
            var _css = `
            img {
                width: 20px;
                height: 20px;
            }

            .prefix {
                margin-top: 10px;
            }
            `;
            var _vue = {
                "template": `
                <el-select v-model="value" value-key="value" placeholder="Select">
                    <template slot="prefix"><img class="prefix" :src="value.photo" /></template>
                    <el-option v-for="item in outlet" :key="item.value" :label="item.label" :value="item">
                    <img :src="item.photo"> {{ item.label }}
                    </el-option>
                </el-select>
                `,
                data() {
                    return {
                        outlet: [{
                        value: 'mcd',
                        label: 'McDonald',
                        photo: 'https://upload.wikimedia.org/wikipedia/commons/5/50/McDonald%27s_SVG_logo.svg'
                        }, {
                        value: 'kfc',
                        label: 'KFC',
                        photo: 'http://www.kfcku.com/themes/kfc_indonesia/images/kfc-indonesia-logo.png'
                        }, {
                        value: 'pizzahut',
                        label: 'Pizza Hut',
                        photo: 'https://vignette.wikia.nocookie.net/logopedia/images/b/b3/Pizza_Hut_Logo_2.png/revision/latest?cb=20161129133747'
                        }],
                        value: null
                    }
                },
                created() {
                    this.value = this.outlet[0]
                }
            }
            return {_vue,_css};
        },
         
        std(){
            var _obj={
                template:`
                <div>
                </div>`
            };
            return _obj;
        },
    }    
         

    //** # Main
    for (var k in views){
        var {_vue} =  views[k]();
        Vue.component(`x-${k}`,_vue);
    }
    let tabsList = Object.keys(views);

    let tabs =  {
        data: {
            tabsList,
            "currentTab": tabsList[0],
            "Code":''
        },
        "computed": {
            currentTabComponent(){
                var _obj = views[this.currentTab];
                this.Code = _obj; 
                var {_css} = _obj();
                if (_css !=null) styled.injectGlobal`${_css}`;
                return `x-${this.currentTab}`;
            }
        
        },
        methods: {
            change(){
                this.views[this.currentTab].template = this.Code;
            },
            copy(){

            },
            copy_com(){
                
            }
        },
        "el": "#app"
    };
    Vue.config.productionTip = false
    new Vue(tabs);
        
        
    </script>
</body>
</html>