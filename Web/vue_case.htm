<!DOCTYPE html>
<html>
<head>
    <title></title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/moment@2.24.0/moment.min.js"></script>
    <script src="https://unpkg.com/vuex@3.1.2/dist/vuex.js"></script>
    <script src="https://unpkg.com/vue-router/dist/vue-router.js"></script>
    <script src="https://unpkg.com/jss@9.8.7/dist/jss.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/selectize.js/0.12.4/js/standalone/selectize.js"></script>


    <script src="https://unpkg.com/vue-styled-components@1.4.9/dist/vue-styled-components.js"></script>

    <link rel="stylesheet" href="https://netdna.bootstrapcdn.com/font-awesome/4.0.3/css/font-awesome.css">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/selectize.js/0.12.4/css/selectize.bootstrap3.min.css">


    <style>




        .flex, .flex dt, .flex dd {
            width: 100%;
            display: block;
            padding: 0px;
            margin: 0px;
        }

            .flex.f-col {
                flex-flow: column;
            }

            .flex.f-row {
                flex-flow: row;
            }

        dl.flex {
            display: flex;
        }

        .flex dt {
            flex: 0;
        }

        .flex dd {
            flex: 1;
        }

        textarea {
            width: 100%;
            height: 15em;
        }

        pre {
            width: 100%;
            height: 100%;
            background: yellow;
            margin-top: .5em;
            overflow-y: auto;
        }

        ul {
            list-style-type: none;
            margin: 0;
            padding: .3em;
        }

        li {
            min-width: 5em;
            line-height: 1.3em;
            white-space: nowrap;
        }

            li:hover {
                color: blue;
                font-weight: 400;
                cursor: pointer;
            }

            li.active {
                background-color: #20FFA6;
            }
    </style>
</head>
<body class="CSBody">
    <div id="app">
        <dl class="flex f-row">
            <dt>
                <ul>
                    <li v-for="(item) in tabsList"
                        v-bind:key="item"
                        v-bind:class="['tab-button', { active: currentTab === item }]">
                        <a @click="currentTab =item"> {{item}}</a>
                    </li>
                </ul>
            </dt>
            <dd style="height:95vh ;">
                <dl class="flex f-col">
                    <dt>
                        <input type="button" value="Copy" @click="copy" />
                        <input type="button" value="Copy Components" @click="copy_com" />
                        <textarea v-model="Code" @blur="change()"></textarea>
                        <component v-bind:is="currentTabComponent"
                                   :sets="currentTab"></component>

                    </dt>
                    <dd>
                        <!-- <pre>{{result}}</pre> -->
                    </dd>
                </dl>
            </dd>
        </dl>
    </div>

    <script>
        /*
        https://www.w3cplus.com/vue/seven-ways-to-define-a-component-template-by-vuejs.html
        */
        function loadjscssfile(filename, filetype) {
            if (filetype == "js") { //if filename is a external JavaScript file
                var fileref = document.createElement('script')
                fileref.setAttribute("type", "text/javascript")
                fileref.setAttribute("src", filename)
            }
            else if (filetype == "css") { //if filename is an external CSS file
                var fileref = document.createElement("link")
                fileref.setAttribute("rel", "stylesheet")
                fileref.setAttribute("type", "text/css")
                fileref.setAttribute("href", filename)
            }
            if (typeof fileref != "undefined")
                document.getElementsByTagName("head")[0].appendChild(fileref)
        }

        let views = {
            'dy-filter'() {
                var _css = `
                                .dy-filter{
                                    position: relative;
                                    /* display:  block; */
                                    display: flex;
                                    color  : red;
                                }


                                .dy-filter input[type="search"]  {
                                    border       : 1px solid #ccc;
                                    border-radius: 10em;
                                    padding      : 0px 2.3em;
                                    transition   : all 0.5s ease 0s;
                                    width        : 100% !important;
                                    background   : #fcfcfc;
                                    line-height  : 2em;
                                    margin: .35em;
                                }

                                .dy-filter i.fa {
                                    display     : flex;
                                    position    : absolute;
                                    height      : 100%;
                                    align-items : center;
                                    width       : 1em;
                                    padding-left: .9em;
                                }

                                .dy-filter .fa-times-circle {
                                    right: 1em;
                                }

                                .dy-filter .fa-times-circle:hover{
                                    color: #1ab394;
                                                                                            }
                                                                                                `;
                var _vue = {
                    template: `
                                    <div class='dy-filter'>
                                        <i class="fa fa-search"></i>
                                        <i class="fa fa-times-circle"   ></i>
                                        <input type="search" :placeholder="Placeholder"   />
                                        <i class="clearfix"></i>
                                    </div>`,
                    props: {
                        Placeholder: {
                            type: String,
                            default: "Please Input"
                        },
                    }

                };
                return { _vue, _css };
            },
            'warp_selectize.js'() {
                //loadjscssfile("https://cdnjs.cloudflare.com/ajax/libs/selectize.js/0.12.4/css/selectize.bootstrap3.min.css", "css")
                //loadjscssfile("https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css", "css")
                //loadjscssfile("https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js", "js")
                //loadjscssfile("https://cdnjs.cloudflare.com/ajax/libs/selectize.js/0.12.4/js/standalone/selectize.js", "js")
                var selectize = {
                    props: ['options', 'value'],
                    template: '<select><slot></slot></select>',
                    mounted: function () {
                        var vm = this;
                        var opt = $.extend({}, $(this.$el).data());
                        if (this.options != null)
                            opt.options = this.options;
                        this.sel = $(this.$el).selectize(opt)
                            .on("change", function () {
                                vm.$emit('input', vm.sel.getValue());
                            })[0].selectize;
                        this.sel.setValue(this.value, true);
                    },
                    watch: {
                        value: function (value) {
                            this.sel.setValue(value, true);
                        },
                        options: function (options) {
                            var val = this.sel.getValue();
                            this.sel.clearOptions();
                            this.sel.addOption(options);
                            this.sel.refreshOptions(false);
                            this.sel.setValue(val);
                        }
                    },
                    destroyed: function () {
                        this.sel.destroy();
                    }
                }
                var _vue = {
                    template: `
                                <div>
                                    <selectize v-bind:options="options" v-model="selected" multiple size="1"
                                            data-dropdown-parent="body" data-max-options="100"
                                            data-value-field= 'id' data-label-field= 'text' data-search-field= 'text' data-sort-field= 'text'>
                                    </selectize>
                                </div>`,
                    components: {
                        selectize
                    },
                    data() {
                        return {
                            selected: [3],
                            cpt: 8,
                            maxOptionText: "test",
                            options: [
                                { "id": 1, "text": "Hello" }, { "id": 2, "text": "World" }, { "id": 3, "text": "opt 3" }, { "id": 4, "text": "opt 4" }, { "id": 5, "text": "opt 5" }, { "id": 6, "text": "opt 6" }, { "id": 7, "text": "opt 7" }, { "id": 8, "text": "opt 8" }
                            ]
                        }
                    }
                }
                return { _vue };
            },
            std() {
                var _vue = {
                    template: `
                        <div>
                        </div>`

                };
                return { _vue };
            },
        }



        //** # Main
        for (var k in views) {
            var { _vue } = views[k]();
            Vue.component(`x-${k}`, _vue);
        }
        let tabsList = Object.keys(views);

        let tabs = {
            data: {
                tabsList,
                "currentTab": tabsList[1],
                "Code": ''
            },
            "computed": {
                currentTabComponent() {
                    var _obj = views[this.currentTab];
                    this.Code = _obj;
                    var { _css } = _obj();
                    if (_css != null) styled.injectGlobal`${_css}`;
                    return `x-${this.currentTab}`;
                }
            },
            methods: {
                change() {
                    this.views[this.currentTab].template = this.Code;
                },
                copy() {

                },
                copy_com() {

                }
            },
            "el": "#app"
        };
        Vue.config.productionTip = false;
        new Vue(tabs);


    </script>
</body>
</html>
