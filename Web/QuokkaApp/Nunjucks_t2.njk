@{
    ViewBag.Title = @Genesis.Common.PageBaseInfo.getCurrentResource("baseTpl").RESOURCE_NAME;
    bool isSingleModel = (bool)ViewData["SingleModel"];
    if (isSingleModel) Layout = "~/Views/Shared/_LayoutSingle.cshtml";
}
<h3>
    @ViewBag.Title
</h3>
@Html.AntiForgeryToken()
@eBundle.QRender_CSS()
@eBundle.QRender_JS()
<div id="app">
    {{edit_row}}
    <el-table empty-text=" " style="width: 100%" ref="input_grid"
              :row-class-name="row_sty"
              highlight-current-row
              @@current-change="handleCurrentChange"
              :data="items">
        <el-table-column label="操作" min-width="120">
            <template slot="header" slot-scope="scope">
                <el-button size="small" class="s-VIEW"
                           type="primary"
                           icon="el-icon-plus"
                           @@click="e_Add()"></el-button>
                操作
            </template>
            <template slot-scope="scope">
                <el-button size="small" circle class="s-VIEW"
                           type="success"
                           icon="el-icon-edit"
                           @@click="e_Edit(scope.$index, scope.row)"></el-button>
                <el-button size="small" circle class="s-VIEW"
                           type="danger"
                           icon="el-icon-delete"
                           @@click="e_DelRow(scope.$index, scope.row)"></el-button>
                <el-button size="small" circle class="s-NORMAL"
                           type="success"
                           icon="el-icon-check"
                           @@click="e_Confirm(scope.$index, scope.row)"></el-button>
                <el-button size="small" circle class="s-NORMAL"
                           type="danger"
                           icon="el-icon-refresh-right"
                           @@click="e_Cancel(scope.$index, scope.row)"></el-button>
            </template>
        </el-table-column>

        <el-table-column min-width="115" prop="ITEM_SEQ" :label="i18n.順序號">

            <template slot-scope="scope">
                <div class="s-VIEW">{{scope.row.ITEM_SEQ}}</div>
                <el-input class="s-NORMAL" type=text v-model="edit_row.ITEM_SEQ" size="small" />
            </template>
        </el-table-column>
        <el-table-column min-width="115" prop="ITEM_TYPE"
                         :label="i18n.類別">
            <template slot-scope="scope">
                <div class="s-VIEW">{{scope.row.ITEM_TYPE}}</div>
                <el-select class="s-NORMAL" v-model="edit_row.ITEM_TYPE" size="small">
                    <el-option v-for="item in list"
                               :key="item"
                               :label="item"
                               :value="item">
                    </el-option>
                </el-select>
            </template>
        </el-table-column>
        <el-table-column min-width="115" prop="ITEM_VALUE_LENGTH"
                         :label="i18n.長度">
            <template slot-scope="scope">
                <div class="s-VIEW">{{scope.row.ITEM_VALUE_LENGTH}}</div>
                <el-input class="s-NORMAL" type=text
                          v-model="edit_row.ITEM_VALUE_LENGTH" size="small" />
            </template>
        </el-table-column>
        <el-table-column min-width="115" prop="ITEM_VALUE"
                         :label="i18n.值">
            <template slot-scope="scope">
                <div class="s-VIEW">{{scope.row.ITEM_VALUE}}</div>
                <el-input class="s-FIX s-INPUT" type=text
                          v-model="edit_row.ITEM_VALUE" size="small" />
            </template>

        </el-table-column>
        <el-table-column min-width="115" prop="SERIAL_CHARS"
                         :label="i18n.可用字元列表">
            <template slot-scope="scope">
                <div class="s-VIEW">{{scope.row.SERIAL_CHARS}}</div>
                <el-input class="s-FIX s-TIME s-COLUMN s-SERIAL s-CUSTOM" type=text
                          v-model="edit_row.SERIAL_CHARS" size="small" />
            </template>
        </el-table-column>
        <el-table-column min-width="115" prop="TABLE_NAME"
                         :label="i18n.表名">
            <template slot-scope="scope">
                <div class="s-VIEW">{{scope.row.TABLE_NAME}}</div>
                <el-input class="s-COLUMN" type=text v-model="edit_row.TABLE_NAME" size="small" />
            </template>
        </el-table-column>
        <el-table-column min-width="115" prop="COLUMN_NAME"
                         :label="i18n.列名">
            <template slot-scope="scope">
                <div class="s-VIEW">{{scope.row.COLUMN_NAME}}</div>
                <el-input class="s-COLUMN" type=text v-model="edit_row.COLUMN_NAME" size="small" />
            </template>
        </el-table-column>

        <el-table-column min-width="115" prop="COLUMN_VALUE_START"
                         :label="i18n.列起始值">
            <template slot-scope="scope">
                <div class="s-VIEW">{{scope.row.COLUMN_VALUE_START}}</div>
                <el-input class="s-COLUMN" type=text v-model="edit_row.COLUMN_VALUE_START" size="small" />
            </template>
        </el-table-column>

        <el-table-column min-width="115" prop="SERIAL_START_VALUE"
                         :label="i18n.序號起始值">
            <template slot-scope="scope">
                <div class="s-VIEW">{{scope.row.SERIAL_START_VALUE}}</div>
                <el-input class="s-SERIAL" type=text v-model="edit_row.SERIAL_START_VALUE" size="small" />
            </template>
        </el-table-column>

        <el-table-column min-width="115" prop="CUSTOM_ENTRY_FUNCTION"
                         :label="i18n.入口函數">
            <template slot-scope="scope">
                <div class="s-VIEW">{{scope.row.CUSTOM_ENTRY_FUNCTION}}</div>
                <el-input class="s-CUSTOM" type=text v-model="edit_row.CUSTOM_ENTRY_FUNCTION" size="small" />
            </template>
        </el-table-column>
        <el-table-column min-width="115" prop="RESET_ON_CHANGED"
                         :label="i18n.是否重置">
            <template slot-scope="scope">
                <div class="s-VIEW">{{scope.row.RESET_ON_CHANGED}}</div>
                <el-select class="s-NORMAL" v-model="edit_row.RESET_ON_CHANGED" size="small">
                    <el-option label="是" value="T"> </el-option>
                    <el-option label="否" value="F"> </el-option>
                </el-select>
            </template>
        </el-table-column>
    </el-table>
    {{items}}
</div>

<script>
    $(function () {
        var items = [
            {
                "ENCODE_FORMAT_ITEM_SID": "GTI20121016001054609",
                "ENCODE_FORMAT_SID": "GTI20102115385063472",
                "ITEM_SEQ": 0.0,
                "ITEM_TYPE": "FIX",
                "ITEM_VALUE_LENGTH": 3.0,
                "ITEM_VALUE": "ST-",
                "SERIAL_CHARS": null,
                "TABLE_NAME": null,
                "COLUMN_NAME": null,
                "COLUMN_VALUE_START": null,
                "SERIAL_START_VALUE": null,
                "CUSTOM_ENTRY_FUNCTION": null,
                "RESET_ON_CHANGED": "T",
                "CREATE_USER": "ting",
                "CREATE_DATE": "2020-12-10 16:00:10",
                "UPDATE_USER": "ting",
                "UPDATE_DATE": "2020-12-10 16:00:10"
            },
            {
                "ENCODE_FORMAT_ITEM_SID": "GTI20121016001054610",
                "ENCODE_FORMAT_SID": "GTI20102115385063472",
                "ITEM_SEQ": 1.0,
                "ITEM_TYPE": "INPUT",
                "ITEM_VALUE_LENGTH": 2.0,
                "ITEM_VALUE": null,
                "SERIAL_CHARS": null,
                "TABLE_NAME": null,
                "COLUMN_NAME": null,
                "COLUMN_VALUE_START": null,
                "SERIAL_START_VALUE": null,
                "CUSTOM_ENTRY_FUNCTION": null,
                "RESET_ON_CHANGED": "T",
                "CREATE_USER": "ting",
                "CREATE_DATE": "2020-12-10 16:00:10",
                "UPDATE_USER": "ting",
                "UPDATE_DATE": "2020-12-10 16:00:10"
            },
            {
                "ENCODE_FORMAT_ITEM_SID": "GTI20121016001054611",
                "ENCODE_FORMAT_SID": "GTI20102115385063472",
                "ITEM_SEQ": 2.0,
                "ITEM_TYPE": "YEAR",
                "ITEM_VALUE_LENGTH": 2.0,
                "ITEM_VALUE": null,
                "SERIAL_CHARS": null,
                "TABLE_NAME": null,
                "COLUMN_NAME": null,
                "COLUMN_VALUE_START": null,
                "SERIAL_START_VALUE": null,
                "CUSTOM_ENTRY_FUNCTION": null,
                "RESET_ON_CHANGED": "T",
                "CREATE_USER": "ting",
                "CREATE_DATE": "2020-12-10 16:00:10",
                "UPDATE_USER": "ting",
                "UPDATE_DATE": "2020-12-10 16:00:10"
            },
            {
                "ENCODE_FORMAT_ITEM_SID": "GTI20121016001054612",
                "ENCODE_FORMAT_SID": "GTI20102115385063472",
                "ITEM_SEQ": 3.0,
                "ITEM_TYPE": "MONTH",
                "ITEM_VALUE_LENGTH": 2.0,
                "ITEM_VALUE": null,
                "SERIAL_CHARS": null,
                "TABLE_NAME": null,
                "COLUMN_NAME": null,
                "COLUMN_VALUE_START": null,
                "SERIAL_START_VALUE": null,
                "CUSTOM_ENTRY_FUNCTION": null,
                "RESET_ON_CHANGED": "T",
                "CREATE_USER": "ting",
                "CREATE_DATE": "2020-12-10 16:00:10",
                "UPDATE_USER": "ting",
                "UPDATE_DATE": "2020-12-10 16:00:10"
            },
            {
                "ENCODE_FORMAT_ITEM_SID": "GTI20121016001054612",
                "ENCODE_FORMAT_SID": "GTI20102115385063472",
                "ITEM_SEQ": 3.0,
                "ITEM_TYPE": "DAY",
                "ITEM_VALUE_LENGTH": 2.0,
                "ITEM_VALUE": null,
                "SERIAL_CHARS": null,
                "TABLE_NAME": null,
                "COLUMN_NAME": null,
                "COLUMN_VALUE_START": null,
                "SERIAL_START_VALUE": null,
                "CUSTOM_ENTRY_FUNCTION": null,
                "RESET_ON_CHANGED": "T",
                "CREATE_USER": "ting",
                "CREATE_DATE": "2020-12-10 16:00:10",
                "UPDATE_USER": "ting",
                "UPDATE_DATE": "2020-12-10 16:00:10"
            },
            {
                "ENCODE_FORMAT_ITEM_SID": "GTI20121016001054612",
                "ENCODE_FORMAT_SID": "GTI20102115385063472",
                "ITEM_SEQ": 3.0,
                "ITEM_TYPE": "QUARTER",
                "ITEM_VALUE_LENGTH": 2.0,
                "ITEM_VALUE": null,
                "SERIAL_CHARS": null,
                "TABLE_NAME": null,
                "COLUMN_NAME": null,
                "COLUMN_VALUE_START": null,
                "SERIAL_START_VALUE": null,
                "CUSTOM_ENTRY_FUNCTION": null,
                "RESET_ON_CHANGED": "T",
                "CREATE_USER": "ting",
                "CREATE_DATE": "2020-12-10 16:00:10",
                "UPDATE_USER": "ting",
                "UPDATE_DATE": "2020-12-10 16:00:10"
            },
            {
                "ENCODE_FORMAT_ITEM_SID": "GTI20121016001054612",
                "ENCODE_FORMAT_SID": "GTI20102115385063472",
                "ITEM_SEQ": 3.0,
                "ITEM_TYPE": "WEEK",
                "ITEM_VALUE_LENGTH": 2.0,
                "ITEM_VALUE": null,
                "SERIAL_CHARS": null,
                "TABLE_NAME": null,
                "COLUMN_NAME": null,
                "COLUMN_VALUE_START": null,
                "SERIAL_START_VALUE": null,
                "CUSTOM_ENTRY_FUNCTION": null,
                "RESET_ON_CHANGED": "T",
                "CREATE_USER": "ting",
                "CREATE_DATE": "2020-12-10 16:00:10",
                "UPDATE_USER": "ting",
                "UPDATE_DATE": "2020-12-10 16:00:10"
            },
            {
                "ENCODE_FORMAT_ITEM_SID": "GTI20121016001054612",
                "ENCODE_FORMAT_SID": "GTI20102115385063472",
                "ITEM_SEQ": 3.0,
                "ITEM_TYPE": "COLUMN",
                "ITEM_VALUE_LENGTH": 2.0,
                "ITEM_VALUE": null,
                "SERIAL_CHARS": null,
                "TABLE_NAME": null,
                "COLUMN_NAME": null,
                "COLUMN_VALUE_START": null,
                "SERIAL_START_VALUE": null,
                "CUSTOM_ENTRY_FUNCTION": null,
                "RESET_ON_CHANGED": "T",
                "CREATE_USER": "ting",
                "CREATE_DATE": "2020-12-10 16:00:10",
                "UPDATE_USER": "ting",
                "UPDATE_DATE": "2020-12-10 16:00:10"
            },
            {
                "ENCODE_FORMAT_ITEM_SID": "GTI20121016001054612",
                "ENCODE_FORMAT_SID": "GTI20102115385063472",
                "ITEM_SEQ": 3.0,
                "ITEM_TYPE": "SERIAL",
                "ITEM_VALUE_LENGTH": 2.0,
                "ITEM_VALUE": null,
                "SERIAL_CHARS": null,
                "TABLE_NAME": null,
                "COLUMN_NAME": null,
                "COLUMN_VALUE_START": null,
                "SERIAL_START_VALUE": null,
                "CUSTOM_ENTRY_FUNCTION": null,
                "RESET_ON_CHANGED": "T",
                "CREATE_USER": "ting",
                "CREATE_DATE": "2020-12-10 16:00:10",
                "UPDATE_USER": "ting",
                "UPDATE_DATE": "2020-12-10 16:00:10"
            },
            {
                "ENCODE_FORMAT_ITEM_SID": "GTI20121016001054613",
                "ENCODE_FORMAT_SID": "GTI20102115385063472",
                "ITEM_SEQ": 4.0,
                "ITEM_TYPE": "CUSTOM",
                "ITEM_VALUE_LENGTH": 3.0,
                "ITEM_VALUE": null,
                "SERIAL_CHARS": null,
                "TABLE_NAME": null,
                "COLUMN_NAME": null,
                "COLUMN_VALUE_START": null,
                "SERIAL_START_VALUE": null,
                "CUSTOM_ENTRY_FUNCTION": null,
                "RESET_ON_CHANGED": "F",
                "CREATE_USER": "ting",
                "CREATE_DATE": "2020-12-10 16:00:10",
                "UPDATE_USER": "ting",
                "UPDATE_DATE": "2020-12-10 16:00:10"
            }
        ]
        new Vue({
            el: '#app',
            data() {
                return {
                    currentRow: null,
                    list: ["FIX", "INPUT", "YEAR", "MONTH", "DAY", "QUARTER", "WEEK", "COLUMN", "SERIAL", "CUSTOM"],
                    F: [
                        'ITEM_SEQ', 'ITEM_TYPE', 'ITEM_VALUE_LENGTH'
                        , 'ITEM_VALUE', 'SERIAL_CHARS', 'TABLE_NAME'
                        , 'COLUMN_NAME', 'COLUMN_VALUE_START', 'SERIAL_START_VALUE'
                        , 'CUSTOM_ENTRY_FUNCTION'
                    ],
                    items:[],
                    edit_row: {},
                    confirm_arg:{
						showClose:false,
						closeOnClickModal: false,
						closeOnPressEscape:false,
						dangerouslyUseHTMLString:true,
						confirmButtonText: `@RES.BLL.Face.FunctionBarConfirmButton`,
						cancelButtonText: `@RES.BLL.Face.FunctionBarCancelButton`,
						type: 'info'
                    },
                    //TODO-i18n:
                    i18n: {
                        順序號:"@RES.BLL.Face.ITEM_SEQ",
                        類別:"@RES.BLL.Face.ITEM_TYPE",
                        長度:"@RES.BLL.Face.ITEM_VALUE_LENGTH",
                        值:"@RES.BLL.Face.ITEM_VALUE",
                        可用字元列表:"@RES.BLL.Face.SERIAL_CHARS",
                        表名:"@RES.BLL.Face.TABLE_NAME",
                        列名:"@RES.BLL.Face.COLUMN_NAME",
                        列起始值:"@RES.BLL.Face.COLUMN_VALUE_START",
                        序號起始值:"@RES.BLL.Face.SERIAL_START_VALUE",
                        入口函數:"@RES.BLL.Face.CUSTOM_ENTRY_FUNCTION",
                        是否重置:"@RES.BLL.Face.RESET_ON_CHANGED",
                        cancel_confirm: '請確認是否放棄當前的修改?',
                        del_confirm: '請確認是刪除這筆資料?'
                    }
                }
            },
            watch: {
                currentRow() {
                    if (this.currentRow == null) {
                        window.removeEventListener("keyup", this.onEscapeKeyUp);
                    } else {
                        window.addEventListener("keyup", this.onEscapeKeyUp);
                    }
                }
            },
            methods: {
                onEscapeKeyUp(event) {
                    if (event.which === 27) {
                        this.e_Cancel();
                    }
                },
                handleCurrentChange(val) {
                    //this.currentRow = val;
                },
                row_sty(item) {
                    let { row } = item;
                    var isEditRow = row === this.currentRow;
                    if (isEditRow) {
                        let { ITEM_TYPE = "INPUT" } = this.edit_row;
                        switch (ITEM_TYPE) {
                            case "FIX":
                                this.set_null(this.edit_row,5, 6, 7, 8, 9);
                                break;
                            case "INPUT":
                                this.set_null(this.edit_row,4,5, 6, 7, 8, 9);
                                break;
                            case "COLUMN":
                                this.set_null(this.edit_row,3, 8, 9);
                                break;
                            case "SERIAL":
                                this.set_null(this.edit_row,3,5,6,7, 9);
                                break;
                            case "CUSTOM":
                                this.set_null(this.edit_row,3, 5, 6, 7, 8);
                                break;
                            default:
                                ITEM_TYPE = "TIME";
                                this.set_null(this.edit_row,3, 5, 6, 7,8, 9);
                                break;
                        }
                        return `gt-sty s${ITEM_TYPE}`;
                    }
                    return "";
                },
                set_null(target,...Idx) {
                    var _self = this;
                    _.each(Idx, (i) => {
                        var key = _self.F[i];
                        target[key] = null;
                    })
                },
                row_sty_(item) {
                    let { row } = item;
                    var isEditRow = row === this.currentRow;
                    if (isEditRow) {
                        let { ITEM_TYPE = "INPUT" } = this.edit_row;
                        var sty = "TIME";
                        switch (ITEM_TYPE) {
                            case "FIX":
                            case "INPUT":
                            case "COLUMN":
                            case "SERIAL":
                            case "CUSTOM":
                                break;
                            default:
                                break;
                        }
                        sty = ITEM_TYPE;
                        return `gt-sty s${sty}`;
                    }
                    return "";
                },
                e_Add() {
                    var _obj = _.maxBy(this.items, (el) => { return el.ITEM_SEQ })
                            || { ITEM_SEQ: 0 };
                    var ITEM_SEQ = _obj.ITEM_SEQ+1;
                    var _new = { ITEM_SEQ, ITEM_TYPE: 'INPUT', RESET_ON_CHANGED: 'T' };
                    this.set_null(_new, 2, 3, 4, 5, 6, 7, 8, 9);
                    this.items.push(_new);
                },
                e_Edit(idx, row) {
                    this.currentRow = row;
                    this.edit_row = Object.assign({}, row);
                },
                e_Confirm(idx, row) {
                    var _tar = this.items[idx];
                    _.each(this.edit_row, (el, key) => {
                        _tar[key] = el;
                    })
                    this.edit_row = {};
                    this.currentRow = null;
                },
                e_Cancel() {
                    var _self = this;
                    _self.$confirm(_self.i18n.cancel_confirm, '提示', _self.confirm_arg).then(() => {
                        _self.currentRow = null;
                    });
                },
                e_DelRow(idx, row) {
                    var _self = this;
                    _self.$confirm(_self.i18n.del_confirm, '提示', _self.confirm_arg).then(() => {
                        _self.items.splice(idx, 1);
                    });
                },
            }
        })
    })
</script>

<style>
    .gt-sty .s-VIEW,
    .s-NORMAL,
    .s-FIX,
    .s-INPUT,
    .s-TIME,
    .s-COLUMN,
    .s-SERIAL,
    .s-CUSTOM {
        display: none;
    }

    .gt-sty .s-NORMAL {
        display: inline-block;
    }

    .gt-sty.sFIX .s-FIX,
    .gt-sty.sINPUT .s-INPUT,
    .gt-sty.sTIME .s-TIME,
    .gt-sty.sCOLUMN .s-COLUMN,
    .gt-sty.sSERIAL .s-SERIAL,
    .gt-sty.sCUSTOM .s-CUSTOM {
        display: block;
    }
</style>
