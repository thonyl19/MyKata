<?xml version="1.0"?>
<ArrayOfSnippetIndexItem xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\application\ActivateaRunningApplicationByName.snippet</File>
    <Title>以名稱啟動執行中的應用程式</Title>
    <Author>Microsoft Corporation</Author>
    <Description>使用應用程式的名稱啟動執行中的應用程式。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>AppActivate($applicationName$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\application\ActivateaRunningApplicationByProcess.snippet</File>
    <Title>以處理序 ID 啟動執行中的應用程式</Title>
    <Author>Microsoft Corporation</Author>
    <Description>使用應用程式的處理序 ID 啟動執行中的應用程式。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim processID As Integer

processID = Shell($applicationFileName$, AppWinStyle.NormalFocus)

AppActivate(processID)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\application\CaptureOutputfromaConsoleApplication.snippet</File>
    <Title>從主控台應用程式擷取輸出</Title>
    <Author>Microsoft Corporation</Author>
    <Description>將命令主控台應用程式的輸出儲存到字串中。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim consoleApp As New Process
With consoleApp
    .StartInfo.UseShellExecute = False
    .StartInfo.RedirectStandardOutput = True
    .StartInfo.FileName = $consoleExeFile$
    .Start()
    .WaitForExit()
End With

Dim output As String = consoleApp.StandardOutput.ReadToEnd()

</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\application\ChangetheForegroundandBackgroundTextColorsinaConsoleWindow.snippet</File>
    <Title>變更主控台視窗中的前景和背景色彩</Title>
    <Author>Microsoft Corporation</Author>
    <Description>變更主控台視窗的背景和文字色彩。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Console.BackgroundColor = $background$
Console.ForegroundColor = $foreground$
Console.Clear()

</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\application\CheckforCurrentVersionusingClickOnce.snippet</File>
    <Title>使用 ClickOnce 檢查目前的版本</Title>
    <Author>Microsoft Corporation</Author>
    <Description>使用 ClickOnce 檢查目前的版本。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>	If My.Application.IsNetworkDeployed Then

		$currentVersion$ = My.Application.Deployment.CurrentVersion
		$lastUpdate$ = My.Application.Deployment.TimeOfLastUpdateCheck

	End If</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\application\CheckForUpdates.snippet</File>
    <Title>檢查 ClickOnce 應用程式的更新</Title>
    <Author>Microsoft Corporation</Author>
    <Description>檢查是否有可供下載的應用程式更新。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>If My.Application.IsNetworkDeployed() 
	If My.Application.Deployment.CheckForUpdate() Then

 	End If

End If</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\application\CleartheConsoleWindow.snippet</File>
    <Title>清除主控台視窗</Title>
    <Author>Microsoft Corporation</Author>
    <Description>清除主控台視窗。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Console.Clear()
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\application\DeleteDatafromIsolatedStorage.snippet</File>
    <Title>從隔離儲存區刪除檔案</Title>
    <Author>Microsoft Corporation</Author>
    <Description>從隔離儲存區刪除檔案。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>
        Dim $varName$ = IsolatedStorageFile.GetStore(IsolatedStorageScope.User Or IsolatedStorageScope.Assembly Or IsolatedStorageScope.Domain, Nothing, Nothing)
        $varName$.DeleteFile($pathToFile$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\application\DeterminetheAmountofIsolatedStorageAvailable.snippet</File>
    <Title>判斷可用的隔離儲存區量</Title>
    <Author>Microsoft Corporation</Author>
    <Description>判斷可用的隔離儲存區量。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>
        Dim $varName$ = IsolatedStorageFile.GetStore(IsolatedStorageScope.User Or IsolatedStorageScope.Assembly Or IsolatedStorageScope.Domain, Nothing, Nothing)
        Dim spaceAvailable = $varName$.Quota - $varName$.UsedSize
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\application\DeterminetheScopeofIsolatedStorage.snippet</File>
    <Title>判斷隔離儲存區的範圍</Title>
    <Author>Microsoft Corporation</Author>
    <Description>判斷隔離儲存區的範圍。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim scope = $varName$.Scope</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\application\DownloadFilesSynchronouslyClickOnce.snippet</File>
    <Title>使用 ClickOnce 同步下載檔案</Title>
    <Author>Microsoft Corporation</Author>
    <Description>使用 ClickOnce 同步下載檔案。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>        If My.Application.IsNetworkDeployed Then
            If Not(My.Application.Deployment.IsFileGroupDownloaded($fileDownloadGroup$)) Then
                 My.Application.Deployment.DownloadFileGroup($fileDownloadGroup$)
            End If
        End If</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\application\FindtheNamesofResourcesinanAssembly.snippet</File>
    <Title>尋找組件中資源的名稱</Title>
    <Author>Microsoft Corporation</Author>
    <Description>傳回組件中所有資源的清單。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>$executingAssembly$ = Assembly.GetExecutingAssembly()
Dim resources() As string = $executingAssembly$.GetManifestResourceNames
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\application\LoadaCursorFilefromanAssembly.snippet</File>
    <Title>由組件載入游標檔</Title>
    <Author>Microsoft Corporation</Author>
    <Description>由應用程式內嵌資源的游標檔，設定 Windows 表單的游標。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim newCursor As New Cursor(My.Resources.ResourceManager.GetStream($cursorFilename$))
Me.Cursor = newCursor
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\application\LoadanAssemblyatRunTime.snippet</File>
    <Title>在執行階段載入組件</Title>
    <Author>Microsoft Corporation</Author>
    <Description>在執行階段載入組件。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>$loadedAssembly$ = Assembly.LoadFile($fileName$)
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\application\MakeanAsynchronousMethodCall.snippet</File>
    <Title>產生非同步方法呼叫</Title>
    <Author>Microsoft Corporation</Author>
    <Description>使用 BackgroundWorker 元件產生非同步方法呼叫。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>    Private Sub startBackgroundTask()
        ' Execute the Background Task
        $backgroundWorkerInstance$.RunWorkerAsync()
    End Sub

    Private Sub $backgroundWorkerInstance$_DoWork(ByVal sender As Object, ByVal e As System.ComponentModel.DoWorkEventArgs) Handles $backgroundWorkerInstance$.DoWork
        ' This method will execute in the background thread created by the BackgroundWorker componet

    End Sub

    Private Sub $backgroundWorkerInstance$_RunWorkerCompleted(ByVal sender As Object, ByVal e As System.ComponentModel.RunWorkerCompletedEventArgs) Handles $backgroundWorkerInstance$.RunWorkerCompleted
        ' This event fires when the DoWork event completes

    End Sub</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\application\ReadandWritefromtheConsoleWindow.snippet</File>
    <Title>由主控台視窗讀取和寫入</Title>
    <Author>Microsoft Corporation</Author>
    <Description>撰寫提示，然後在使用者要求中讀取。這個提示會由主控台應用程式執行。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Console.WriteLine($prompt$)
$inputFromConsole$ = Console.ReadLine()
Console.WriteLine($outputToConsole$)
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\application\ReadCommandLineArguments.snippet</File>
    <Title>讀取命令列的引數</Title>
    <Author>Microsoft Corporation</Author>
    <Description>逐一查看命令列的引數。</Description>
    <Keywords>命令列的引數,命令</Keywords>
    <Language>VB</Language>
    <Code>For Each argument In My.Application.CommandLineArgs

Next

</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\application\ReadTextfromIsolateStorage.snippet</File>
    <Title>由隔離儲存區讀取文字</Title>
    <Author>Microsoft Corporation</Author>
    <Description>由隔離儲存區中的檔案讀取文字。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>
        Dim $varName$ = IsolatedStorageFile.GetStore(IsolatedStorageScope.User Or IsolatedStorageScope.Assembly Or IsolatedStorageScope.Domain, Nothing, Nothing)

        Dim isolatedStream As New IsolatedStorageFileStream($fileName$, FileMode.Open, isolatedStore)

        Using reader As New StreamReader(isolatedStream)
            $inputText$ = reader.ReadToEnd
        End Using</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\application\RetrieveanImagethatIsanApplicationResource.snippet</File>
    <Title>擷取本身為應用程式資源的影像</Title>
    <Author>Microsoft Corporation</Author>
    <Description>將 [我的應用程式] 設計工具中的影像資源指派至 PictureBox1 的 Image 屬性。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>$pictureBox$.Image = My.Resources.$resourceName$
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\application\RetrieveaTextFilefromanAssembly'sResources.snippet</File>
    <Title>由組件的資源擷取文字檔</Title>
    <Author>Microsoft Corporation</Author>
    <Description>由本身為組件內嵌資源的檔案中擷取文字。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim executingAssembly As Assembly = Assembly.GetExecutingAssembly
        Dim appStream As Stream = executingAssembly.GetManifestResourceStream($ResourceName$)
        Dim textStream As New StreamReader(appStream)
        Dim text As String = textStream.ReadToEnd</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\application\Savetextinisolatedstorage.snippet</File>
    <Title>將文字儲存至隔離儲存區</Title>
    <Author>Microsoft Corporation</Author>
    <Description>將字串寫入組件或使用者隔離儲存區中。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>
        Dim $varName$ = IsolatedStorageFile.GetStore(IsolatedStorageScope.User Or IsolatedStorageScope.Assembly Or IsolatedStorageScope.Domain, Nothing, Nothing)
        Dim isoStream As New IsolatedStorageFileStream($fileName$, FileMode.Append, FileAccess.Write, isolatedStore)

        Using writer As New StreamWriter(isoStream)
		    writer.WriteLine($fileContents$)
	    End Using</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\application\SendAnApplicationKeystrokes.snippet</File>
    <Title>傳送按鍵至應用程式</Title>
    <Author>Microsoft Corporation</Author>
    <Description>將按鍵傳送至應用程式。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>SendKeys.SendWait($key$)
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\application\StopanApplication.snippet</File>
    <Title>停止應用程式</Title>
    <Author>Microsoft Corporation</Author>
    <Description>關閉「記事本」的所有執行中執行個體。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>	For Each proc In Process.GetProcessesByName($processName$)
		proc.CloseMainWindow()
	Next</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\application\UpdateApplicationusingClickOnce.snippet</File>
    <Title>使用 ClickOnce 以非同步方式更新應用程式</Title>
    <Author>Microsoft Corporation</Author>
    <Description>以非同步方式更新 ClickOnce 應用程式。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>If My.Application.IsNetworkDeployed Then
	My.Application.Deployment.UpdateAsync()
End If</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\application\UpdateClickonceApplicationSynchronously.snippet</File>
    <Title>使用 ClickOnce 同步更新應用程式</Title>
    <Author>Microsoft Corporation</Author>
    <Description>同步更新 ClickOnce 應用程式。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>If My.Application.IsNetworkDeployed Then
    My.Application.Deployment.Update()
End If</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\application\WriteMessagetotheApplicationLogUsingMy.snippet</File>
    <Title>將訊息寫入應用程式記錄檔</Title>
    <Author>Microsoft Corporation</Author>
    <Description>將訊息寫入應用程式記錄檔中。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>My.Application.Log.WriteEntry($messageText$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\application\WritetoaTextFileUsingMy.snippet</File>
    <Title>寫入文字檔</Title>
    <Author>Microsoft Corporation</Author>
    <Description>將訊息寫入應用程式事件記錄檔。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>My.Computer.FileSystem.WriteAllText($fileName$, $textContents$, $append$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\common code patterns\conditionals and loops\CompilerDirectiveIf.snippet</File>
    <Title>使用 #If 僅建置選取的原始程式碼部分</Title>
    <Author>Microsoft Corporation</Author>
    <Description>使用 #If 編譯器指示詞，控制要編譯到組件中的程式碼區塊。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>#If $condition$ Then

#Else

#End If</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\common code patterns\conditionals and loops\DoLoopUntil(Condition).snippet</File>
    <Title>Do...Loop Until 陳述式</Title>
    <Author>Microsoft Corporation</Author>
    <Description>執行迴圈直到條件為 True。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Do

Loop Until $Condition$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\common code patterns\conditionals and loops\DoLoopWhile(Condition).snippet</File>
    <Title>Do...Loop While 陳述式</Title>
    <Author>Microsoft Corporation</Author>
    <Description>條件為 True 時執行迴圈。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Do

Loop While $Condition$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\common code patterns\conditionals and loops\DoUntil(Condition)Loop.snippet</File>
    <Title>Do Until...Loop 陳述式</Title>
    <Author>Microsoft Corporation</Author>
    <Description>執行迴圈直到條件為 True。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Do Until $Condition$

Loop</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\common code patterns\conditionals and loops\DoWhile(Condition)Loop.snippet</File>
    <Title>Do While...Loop 陳述式</Title>
    <Author>Microsoft Corporation</Author>
    <Description>條件為 True 時執行迴圈。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Do While $Condition$

Loop</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\common code patterns\conditionals and loops\ForEachNext.snippet</File>
    <Title>For Each...下一個陳述式</Title>
    <Author>Microsoft Corporation</Author>
    <Description>在某個項目集合中執行迴圈。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>For Each $Variable$ As $ObjectType$ In $CollectionObject$

Next</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\common code patterns\conditionals and loops\ForNext(Integerloop).snippet</File>
    <Title>For...下一個陳述式</Title>
    <Author>Microsoft Corporation</Author>
    <Description>在數字序列中執行迴圈。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>For $Variable$ = $LowerBound$ To $UpperBound$

Next</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\common code patterns\conditionals and loops\IfElseEndIfStatement.snippet</File>
    <Title>If...Else...End If 陳述式</Title>
    <Author>Microsoft Corporation</Author>
    <Description>插入 If...Else...End If 陳述式。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>If $Condition$ Then

Else

End If</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\common code patterns\conditionals and loops\IfElseIfElseEndIf.snippet</File>
    <Title>If...ElseIf...Else...End If 陳述式</Title>
    <Author>Microsoft Corporation</Author>
    <Description>插入 If...ElseIf...Else...End If 陳述式。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>If $Condition1$ Then

ElseIf $Condition2$ Then

Else

End If</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\common code patterns\conditionals and loops\IfEndifStatement.snippet</File>
    <Title>If..End If 陳述式</Title>
    <Author>Microsoft Corporation</Author>
    <Description>插入 If..End If 陳述式。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>If $Condition$ Then

End If</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\common code patterns\conditionals and loops\SelectCaseStatement.snippet</File>
    <Title>Select Case 陳述式</Title>
    <Author>Microsoft Corporation</Author>
    <Description>插入 Select Case 陳述式。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Select Case $Variable$
    Case $Case1$

    Case $Case2$

    Case Else

End Select</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\common code patterns\conditionals and loops\While(Cond)EndWhile.snippet</File>
    <Title>While...End While 陳述式</Title>
    <Author>Microsoft Corporation</Author>
    <Description>插入 While...End While 陳述式。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>While $Condition$

End While</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\common code patterns\exception handling\DefineAnExceptionClass.snippet</File>
    <Title>定義 Exception 類別</Title>
    <Author>Microsoft Corporation</Author>
    <Description>為新的例外狀況類別提供基礎實作。</Description>
    <Keywords>例外狀況,錯誤,處理</Keywords>
    <Language>VB</Language>
    <Code>Public Class $ExceptionName$
    Inherits System.Exception

    Public Sub New(ByVal message As String)
        MyBase.New(message)
    End Sub

    Public Sub New(ByVal message As String, ByVal inner As Exception)
        MyBase.New(message, inner)
    End Sub
End Class</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\common code patterns\exception handling\ThrowanException.snippet</File>
    <Title>擲回例外狀況</Title>
    <Author>Microsoft Corporation</Author>
    <Description>擲回例外狀況。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Throw New $exceptionType$($exceptionMsg$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\common code patterns\exception handling\TryCatchEndTryStatement.snippet</File>
    <Title>Try...Catch...End Try 陳述式</Title>
    <Author>Microsoft Corporation</Author>
    <Description>插入 Try...Catch...End Try 陳述式。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Try

Catch ex As $ExceptionType$
	
End Try</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\common code patterns\exception handling\TryCatchFinallyEndTry.snippet</File>
    <Title>Try...Catch...Finally...End Try 陳述式</Title>
    <Author>Microsoft Corporation</Author>
    <Description>插入 Try...Catch...Finally...End Try 陳述式。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Try

Catch ex As $ExceptionType$

Finally

End Try</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\common code patterns\exception handling\TryFinallyEndTryStatement.snippet</File>
    <Title>Try...Finally...End Try 陳述式</Title>
    <Author>Microsoft Corporation</Author>
    <Description>插入 Try...Finally...End Try 陳述式。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Try

Finally

End Try</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\common code patterns\exception handling\UsingStatement.snippet</File>
    <Title>Using 陳述式</Title>
    <Author>Microsoft Corporation</Author>
    <Description>插入 Using 陳述式。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Using $DisposeObject$ As $ObjectType$

End Using</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\common code patterns\properties and procedures\Addition(+)Operator.snippet</File>
    <Title>定義加法運算子 (+)</Title>
    <Author>Microsoft Corporation</Author>
    <Description>在類別上定義加法 (+) 運算子。</Description>
    <Keywords>運算子,多載運算子,多載</Keywords>
    <Language>VB</Language>
    <Code>Public Shared Operator +(ByVal class1 As $ClassName$, ByVal class2 As $ClassName$) As $ClassName$

End Operator</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\common code patterns\properties and procedures\CallAWindowsAPI.snippet</File>
    <Title>定義要呼叫 Windows 應用程式開發介面的函式</Title>
    <Author>Microsoft Corporation</Author>
    <Description>定義要呼叫 Windows 應用程式開發介面的函式。</Description>
    <Keywords>PInvoke,宣告,win32</Keywords>
    <Language>VB</Language>
    <Code>Declare Function $matchingCall$ Lib $dllName$ Alias $apiName$ ($parameters$) As Integer</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\common code patterns\properties and procedures\ComparisonOperators.snippet</File>
    <Title>定義比較運算子 (&gt; 和 &lt;)</Title>
    <Author>Microsoft Corporation</Author>
    <Description>定義比較運算子 (&gt; 和 &lt;)。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Public Shared Operator &gt;(ByVal left As $TypeName$, _
        ByVal right As $TypeName$) As Boolean

    End Operator

    Public Shared Operator &lt;(ByVal left As $TypeName$, _
        ByVal right As $TypeName$) As Boolean

    End Operator</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\common code patterns\properties and procedures\CTypeOperators.snippet</File>
    <Title>定義 CType 運算子</Title>
    <Author>Microsoft Corporation</Author>
    <Description>在類別上定義 CType 運算子。</Description>
    <Keywords>多載運算子,CType,DirectCast,轉換運算子,縮小,運算子關鍵字</Keywords>
    <Language>VB</Language>
    <Code>Public Shared Narrowing Operator CType(ByVal initialData As $DataType$) As $ClassName$
          Return New $ClassName$()
        End Operator
        
        Public Shared Widening Operator CType(ByVal initialData As $ClassName$) As $DataType$
          Return $ReturnValue$
        End Operator</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\common code patterns\properties and procedures\DeclareAnEvent.snippet</File>
    <Title>宣告事件</Title>
    <Author>Microsoft Corporation</Author>
    <Description>宣告事件。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>$Scope$ Event $EventName$(ByVal sender As Object, ByVal e As $EventArgsType$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\common code patterns\properties and procedures\DefaultProperty.snippet</File>
    <Title>定義預設屬性</Title>
    <Author>Microsoft Corporation</Author>
    <Description>定義預設屬性或索引屬性。</Description>
    <Keywords>屬性,索引,預設</Keywords>
    <Language>VB</Language>
    <Code>Default Property $propertyName$(ByVal index As $indexType$) As $propertyType$
        Get
            If $IndexIsValid$ Then
                
            Else
                Throw New ArgumentOutOfRangeException
            End If
        End Get
        Set(ByVal Value As $propertyType$)
            If $IndexIsValid$ Then
                
            Else
                Throw New ArgumentOutOfRangeException
            End If
        End Set
    End Property</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\common code patterns\properties and procedures\DefineAPrivateSub.snippet</File>
    <Title>定義 Private 的 Sub</Title>
    <Author>Microsoft Corporation</Author>
    <Description>使用 Sub 關鍵字定義不會傳回值的私用方法。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Private Sub $MethodName$()

End Sub</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\common code patterns\properties and procedures\DefineAProperty.snippet</File>
    <Title>定義屬性</Title>
    <Author>Microsoft Corporation</Author>
    <Description>定義含有支援欄位的屬性。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Private $PrivateVariable$ As $PropertyType$
Public Property $PropertyName$() As $PropertyType$
    Get
        Return $PrivateVariable$ 
    End Get
    Set(ByVal value As $PropertyType$)
        $PrivateVariable$ = value
    End Set
End Property</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\common code patterns\properties and procedures\DefineAPublicSub.snippet</File>
    <Title>定義 Public 的 Sub</Title>
    <Author>Microsoft Corporation</Author>
    <Description>使用 Sub 關鍵字定義不會傳回值的方法。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Public Sub $MethodName$()

End Sub</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\common code patterns\properties and procedures\EqualityOperators.snippet</File>
    <Title>定義等號比較運算子 (= 和 &lt;&gt;)</Title>
    <Author>Microsoft Corporation</Author>
    <Description>定義等號比較運算子 (= 和 &lt;&gt;)。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Public Shared Operator &lt;&gt;(ByVal left As $ClassName$, ByVal right As $ClassName$) As Boolean


    End Operator

    Public Shared Operator =(ByVal left As $ClassName$,ByVal right As $ClassName$) As Boolean


    End Operator</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\common code patterns\properties and procedures\FuncWithGenericParam.snippet</File>
    <Title>定義含有泛型參數的函式</Title>
    <Author>Microsoft Corporation</Author>
    <Description>定義使用泛型參數的函式。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Function $FunctionName$(Of T)() As $ReturnType$
    Return $ReturnValue$
End Function</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\common code patterns\properties and procedures\FuncWithVarParams.snippet</File>
    <Title>定義含有參數陣列的函式</Title>
    <Author>Microsoft Corporation</Author>
    <Description>定義接受多個參數的函式。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Function $MethodName$(ByVal ParamArray $ParamName$() As $ParamType$) As $ReturnType$
    For index = 0 To $paramName$.Length - 1

    Next
    Return $ReturnValue$
End Function</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\common code patterns\properties and procedures\OverridableSub.snippet</File>
    <Title>定義 Overridable 的 Sub</Title>
    <Author>Microsoft Corporation</Author>
    <Description>定義 Overridable Sub。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Overridable Sub $MethodName$()

End Sub</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\common code patterns\properties and procedures\ProcedureWithReturn.snippet</File>
    <Title>定義函式</Title>
    <Author>Microsoft Corporation</Author>
    <Description>使用 Function 關鍵字定義傳回值的程序。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Function $FuncName$() As $ReturnType$

Return $ReturnValue$
End Function	</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\common code patterns\properties and procedures\ProcWithoutReturn.snippet</File>
    <Title>定義 Sub</Title>
    <Author>Microsoft Corporation</Author>
    <Description>使用 Sub 關鍵字定義不會傳回值的程序。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Sub $SubName$()

End Sub</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\common code patterns\properties and procedures\ReadOnlyProperty.snippet</File>
    <Title>定義 ReadOnly 屬性</Title>
    <Author>Microsoft Corporation</Author>
    <Description>定義含有支援欄位的 ReadOnly 屬性。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Private $PrivateVariable$ As $PropertyType$
Public ReadOnly Property $PropertyName$() As $PropertyType$
    Get
        Return $PrivateVariable$ 
    End Get
End Property</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\common code patterns\properties and procedures\SubToOverrideDispose.snippet</File>
    <Title>定義覆寫 Dispose 的 Sub</Title>
    <Author>Microsoft Corporation</Author>
    <Description>依據 Dispose Finalize 模式覆寫 Dispose 函式。</Description>
    <Keywords>IDisposable,Finalize,Dispose,發行,資源</Keywords>
    <Language>VB</Language>
    <Code>    Protected Overrides Sub Dispose(ByVal disposing As Boolean)
        MyBase.Dispose(disposing)
        If disposing Then
            ' TODO: dispose managed state (managed objects).
        End If

        ' TODO: free unmanaged resources (unmanaged objects).
    End Sub</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\common code patterns\properties and procedures\SubWithByRefParam.snippet</File>
    <Title>定義含有 ByRef 參數的 Sub</Title>
    <Author>Microsoft Corporation</Author>
    <Description>定義含有引數的 Sub，其引數值可由方法中的程式碼變更。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Sub $MethodName$(ByRef $ParameterName$ As $ParameterType$)

End Sub</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\common code patterns\properties and procedures\WriteOnlyProperty.snippet</File>
    <Title>定義 WriteOnly 屬性</Title>
    <Author>Microsoft Corporation</Author>
    <Description>定義含有支援欄位的 WriteOnly 屬性。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Private $PrivateVariable$ As $PropertyType$
Public WriteOnly Property $PropertyName$() As $PropertyType$
    Set(ByVal value as $PropertyType$)
        $PrivateVariable$ = value
    End Set
End Property</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\common code patterns\types\DefineAnEnumeration.snippet</File>
    <Title>定義列舉類型</Title>
    <Author>Microsoft Corporation</Author>
    <Description>定義列舉類型。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Enum $EnumName$
     $Value1$
     $Value2$
End Enum</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\common code patterns\types\DefineAnEnumerationWithCustomValues.snippet</File>
    <Title>定義含有自訂值的列舉類型</Title>
    <Author>Microsoft Corporation</Author>
    <Description>定義含有指定整數值的列舉類型。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Enum $EnumName$
    $Enum1$ = $Value1$
    $Enum2$ = $Value2$
End Enum</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\common code patterns\types\DefineANewGenericType.snippet</File>
    <Title>定義新的泛型類型</Title>
    <Author>Microsoft Corporation</Author>
    <Description>定義泛型類型。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Class $TypeName$(Of T)

End Class</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\common code patterns\types\DefineAnInterface.snippet</File>
    <Title>定義介面</Title>
    <Author>Microsoft Corporation</Author>
    <Description>定義介面。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Interface I$InterfaceName$

End Interface</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\common code patterns\types\DefineAStructure.snippet</File>
    <Title>定義結構</Title>
    <Author>Microsoft Corporation</Author>
    <Description>定義結構。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Structure $StructureName$
    Public $Member1Name$ As $Member1Type$
    Public $Member2Name$ As $Member2Type$
End Structure</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\common code patterns\types\GetTheStringValueOfAnEnumerationValue.snippet</File>
    <Title>尋找列舉值的名稱</Title>
    <Author>Microsoft Corporation</Author>
    <Description>取得列舉值的字串名稱。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim name As String = _
    System.Enum.GetName(GetType($EnumerationName$), $EnumValue$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\common code patterns\types\ImplementTheDisposeFinalizePattern.snippet</File>
    <Title>定義實作 IDisposable 的類別</Title>
    <Author>Microsoft Corporation</Author>
    <Description>實作 Dispose Finalize 模式。</Description>
    <Keywords>IDisposable,Finalize,Dispose,發行,資源</Keywords>
    <Language>VB</Language>
    <Code>Class $ClassName$
    Implements IDisposable

#Region "IDisposable Support"
    Private disposedValue As Boolean ' To detect redundant calls

    ' IDisposable
    Protected Overridable Sub Dispose(ByVal disposing As Boolean)
        If Not Me.disposedValue Then
            If disposing Then
                ' TODO: dispose managed state (managed objects).
            End If

            ' TODO: free unmanaged resources (unmanaged objects) and override Finalize() below.
            ' TODO: set large fields to null.
        End If
        Me.disposedValue = True
    End Sub

    ' TODO: override Finalize() only if Dispose(ByVal disposing As Boolean) above has code to free unmanaged resources.
    'Protected Overrides Sub Finalize()
    '    ' Do not change this code.  Put cleanup code in Dispose(ByVal disposing As Boolean) above.
    '    Dispose(False)
    '    MyBase.Finalize()
    'End Sub

    ' This code added by Visual Basic to correctly implement the disposable pattern.
    Public Sub Dispose() Implements IDisposable.Dispose
        ' Do not change this code.  Put cleanup code in Dispose(ByVal disposing As Boolean) above.
        Dispose(True)
        GC.SuppressFinalize(Me)
    End Sub
#End Region

End Class</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\data\database\AddaNewRowToTypedDataTable.snippet</File>
    <Title>在類型 DataTable 中加入新資料列</Title>
    <Author />
    <Description>在類型 DataTable 中加入新資料列</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim newRow = CType($table$.NewRow(), $dataTableType$)
newRow.$column1$= $column1Value$
newRow.$column2$= $column2Value$
$table$.Rows.Add(newRow)
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\data\database\CalltheExecuteNonQueryMethodofaDataCommand.snippet</File>
    <Title>呼叫 SqlCommand 的 ExecuteNonQuery 方法</Title>
    <Author>Microsoft Corporation</Author>
    <Description>在現有命令上呼叫 ExecuteNonQuery。包裝 try/finally 區塊中的執行檔，讓連接物件返回其之前的狀態</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>        Dim rowCount As Integer
        Dim previousConnectionState As ConnectionState
        previousConnectionState = $conn$.State
        Try
            If $conn$.State = ConnectionState.Closed Then
                $conn$.Open()
            End If
            rowCount = $cmd$.ExecuteNonQuery()

        Finally
            If previousConnectionState = ConnectionState.Closed Then
                $conn$.Close()
            End If
        End Try</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\data\database\CalltheExecuteReaderMethodofaDataCommand.snippet</File>
    <Title>呼叫 SqlCommand 的 ExecuteReader 方法</Title>
    <Author>Microsoft Corporation</Author>
    <Description>使用現有資料命令的 SqlCommand.ExecuteReader 方法，由資料庫擷取資料。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim reader As SqlDataReader
Dim previousConnectionState As ConnectionState = $conn$.State
Try
If $conn$.State = ConnectionState.Closed Then
	$conn$.Open()
End If
reader = $cmd$.ExecuteReader()
Using reader
	While reader.Read
		' Process SprocResults datareader here.
		$ProcessSprocResult$
	End While
End Using
Finally
    If previousConnectionState = ConnectionState.Closed Then
        $conn$.Close()
    End If
End Try
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\data\database\CalltheExecuteScalarMethodofaDataCommand.snippet</File>
    <Title>呼叫 SqlCommand 的 ExecuteScalar 方法</Title>
    <Author>Microsoft Corporation</Author>
    <Description>執行使用現有資料命令的 SqlCommand.ExecuteScalar 方法傳回單一值的 SQL 陳述式。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim result As Object
Dim previousConnectionState As ConnectionState = $conn$.State
Try
	If $conn$.State = ConnectionState.Closed Then
		$conn$.Open()
	End If
	result = $cmd$.ExecuteScalar()
Finally
    If previousConnectionState = ConnectionState.Closed Then
        $conn$.Close()
    End If
End Try
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\data\database\ConvertBindingSourceCurrenttoTypedRow.snippet</File>
    <Title>在 DataTable 中將 BindingSource.Current 轉換為特定資料列</Title>
    <Author>Microsoft Corporation</Author>
    <Description>取得繫結來源內目前的資料列，並轉換成特定資料列。這是擷取目前資料列時建議使用的方法，不建議使用 BindingSource.Position，因為可能由於 DataView 的排序不同，而傳回不同的資料列</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim row As $rowType$
row = CType(CType(Me.$bindingSource$.Current, DataRowView).Row, $rowType$)
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\data\database\CreateaDataRelation.snippet</File>
    <Title>建立 DataRelation</Title>
    <Author>Microsoft Corporation</Author>
    <Description>建立資料集中兩個資料表之間的資料關聯。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim $relationObjectName$ As New DataRelation($RelationName$, _
		$DataSet$.Customers.Columns($ColumnName$), _
		$DataSet$.Orders.Columns($ColumnName$))

$DataSet$.Relations.Add($relationObjectName$)
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\data\database\CreateanExpressionColumn.snippet</File>
    <Title>建立運算式資料行</Title>
    <Author>Microsoft Corporation</Author>
    <Description>建立 DataColumn 物件，並設定讓 DataColumn.Expression 屬性計算訂單總金額。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim $ExpressionColumn$ As New DataColumn()
$ExpressionColumn$.ColumnName = "$ColumnName$"
$ExpressionColumn$.DataType = GetType($ColumnDataType$)
$ExpressionColumn$.Expression = "$Expression$"
$DataSet$.$DataTable$.Columns.Add($ExpressionColumn$)
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\data\database\CreateParameterizedSelectCommand.snippet</File>
    <Title>建立參數化 SELECT 命令</Title>
    <Author>Microsoft Corporation</Author>
    <Description>建構用來執行含有參數之 Select 陳述式的命令物件。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim $cmd$ As New SqlCommand
$cmd$.CommandType = CommandType.Text
$cmd$.CommandText = "$SQL$"
$cmd$.Connection = $conn$
' Create a SqlParameter for each parameter in the stored procedure.
Dim $parameter1$ As New SqlParameter("$sqlParameterName$", $parameterValue$)
$cmd$.Parameters.Add($parameter1$)
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\data\database\CreateParameterizedStoredProcedureCommand.snippet</File>
    <Title>建立參數化預存程序</Title>
    <Author>Microsoft Corporation</Author>
    <Description>建構用來執行含有參數之預存程序的命令物件。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim $sprocCmd$ As New SqlCommand()
$sprocCmd$.Connection = $conn$
$sprocCmd$.CommandType = CommandType.StoredProcedure
$sprocCmd$.CommandText = "$procedureName$"

' Create a SqlParameter for each parameter in the stored procedure.
Dim $firstParameter$ As New SqlParameter("$columnName$", $value$)
$sprocCmd$.Parameters.Add($firstParameter$)
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\data\database\CreateSqlExpressConnection.snippet</File>
    <Title>建立與 SQL Express 之間的區域 SQLConnection</Title>
    <Author>Microsoft</Author>
    <Description>建立 SQL 連接，針對使用 User Instance=True 的 SQL Express 連接的一般連接名稱/值組提供替代項</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim $conn$ As New SqlConnection()
$conn$.ConnectionString = "Data Source=.\SQLEXPRESS;AttachDbFilename=$dataDirectory$\$dataBaseName$.mdf;Integrated Security=True;User Instance=True"
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\data\database\CreateSqlServerConnection.snippet</File>
    <Title>建立與 SQL Server 之間以伺服器為基礎的 SQLConnection</Title>
    <Author>Microsoft Corporation</Author>
    <Description>建立 SQL 連接，提供一般連接名稱/值組的替代項</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim $conn$ As New SqlConnection()
$conn$.ConnectionString = "Data Source=$serverName$;Initial Catalog=$dataBaseName$;Persist Security Info=True;User ID=$userId$;Password=$password$"</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\data\database\ExtendTableAdapter.snippet</File>
    <Title>使用部分類別擴充 TableAdapter</Title>
    <Author>Microsoft</Author>
    <Description>使用部分類別擴充 TableAdapter。加入參考現有 TableAdapter 所需要的命名空間</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Namespace $Namespace$TableAdapters
    Partial Public Class $TableAdapter$

    End Class
End Namespace
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\data\database\ImplementDataTryCatchBlocks.snippet</File>
    <Title>實作資料 Try/Catch 區塊</Title>
    <Author>Microsoft Corporation</Author>
    <Description>實作處理例外狀況、DataException，以及所有衍生自 DataException 之例外狀況的 Try/Catch 區塊。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Try
    $tryCode$
Catch concurrencyEx As DBConcurrencyException
    Throw concurrencyEx 
Catch constraintEx As ConstraintException
    Throw constraintEx
Catch deletedRowEx As DeletedRowInaccessibleException
    Throw deletedRowEx
Catch duplicateNameEx As DuplicateNameException
    Throw duplicateNameEx
Catch inRowChangingEx As InRowChangingEventException
    Throw inRowChangingEx
Catch invalidConstraintEx As InvalidConstraintException
    Throw invalidConstraintEx
Catch invalidExpressionEx As InvalidExpressionException
    Throw invalidExpressionEx
Catch missingPrimaryEx As MissingPrimaryKeyException
    Throw missingPrimaryEx
Catch noNullEx As NoNullAllowedException
    Throw noNullEx
Catch readOnlyEx As ReadOnlyException
    Throw readOnlyEx
Catch rowNotInTableEx As RowNotInTableException
    Throw rowNotInTableEx
Catch strongTypingEx As StrongTypingException
    Throw strongTypingEx
Catch typedDataSetEx As TypedDataSetGeneratorException
    Throw typedDataSetEx
Catch versionNotFoundEx As VersionNotFoundException
    Throw versionNotFoundEx
Catch dataEx As DataException
    Throw dataEx
Catch ex As Exception
    Throw ex
Finally
    $finallyCode$
End Try
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\data\database\ReadAccessDataintoaDataset.snippet</File>
    <Title>將 Access 資料讀取至資料集</Title>
    <Author>Microsoft Corporation</Author>
    <Description>從 Access 資料庫的資料表中將資料載入資料集物件。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim conn As String = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=$AccessFileName$;Persist Security Info=False"
Dim cmd As String = $SQLString$
Dim adapter As New OleDbDataAdapter(cmd, conn)
Dim topics As New DataSet
adapter.Fill(topics)
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\data\database\ReturnTableAdapterOutputParameters.snippet</File>
    <Title>傳回 TableAdapter 查詢的 Output 參數</Title>
    <Author>Microsoft</Author>
    <Description>「不傳回值」的 TableAdapter 方法會使用傳回受影響資料列的 ExecuteNonQuery。這個程式碼片段會從 TableAdapter 上的其中一個命令參數傳回值。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Public Function $methodName$() As $dataType$
	Me.$existingMethod$()
	Return Me._commandCollection($commandIndex$).Parameters($parameterIndex$).Value
End Function
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\data\LINQ Queries\qCount.snippet</File>
    <Title>計算查詢結果</Title>
    <Author>Microsoft Corporation</Author>
    <Description>計算查詢的結果數目。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim $queryResult$ = From $item$ In $dataSource$ _
                    Select $item$.$field1$, $item$.$field2$
                    
                 Dim count = $queryResult$.Count</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\data\LINQ Queries\qFrom.snippet</File>
    <Title>From 查詢</Title>
    <Author>Microsoft Corporation</Author>
    <Description>盡可能以最簡潔的語法來建立查詢。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim $queryResult$ = From $item$ In $dataSource$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\data\LINQ Queries\qFromOBSelect.snippet</File>
    <Title>From...Order By...Select 查詢</Title>
    <Author>Microsoft Corporation</Author>
    <Description>建立帶有 From、Order By 和 Select 子句的查詢。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim $queryResult$ = From $item$ In $dataSource$ _
                    Order By $item$.$orderField$ _
                    Select $item$.$field1$, $item$.$field2$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\data\LINQ Queries\qFromSelect.snippet</File>
    <Title>From...Select 查詢</Title>
    <Author>Microsoft Corporation</Author>
    <Description>建立帶有 From 和 Select 子句的查詢。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim $queryResult$ = From $item$ In $dataSource$ _
                    Select $item$.$field1$, $item$.$field2$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\data\LINQ Queries\qFromWSelect.snippet</File>
    <Title>From...Where...Select 查詢</Title>
    <Author>Microsoft Corporation</Author>
    <Description>建立帶有 From、Where 和 Select 子句的查詢。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim $queryResult$ = From $item$ In $dataSource$ _
                    Where $item$.$whereField$ $condition$ _
                    Select $item$.$field1$, $item$.$field2$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\data\LINQ Queries\qIterate.snippet</File>
    <Title>反覆查詢結果</Title>
    <Author>Microsoft Corporation</Author>
    <Description>建立查詢，並在後面 For Each 子句中展現那個查詢的使用。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim $queryResult$ = From $item$ In $dataSource$ _
                    Select $item$.$field1$, $item$.$field2$

                     For Each $iterationVar$ In $queryResult$
                         ' sum = sum + $item$.$field2$                   
                     Next</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\data\LINQ Queries\Query - Filter with 'Where'\qFilt.snippet</File>
    <Title>依單一欄位篩選</Title>
    <Author>Microsoft Corporation</Author>
    <Description>建立根據單一條件對一個欄位篩選結果的查詢。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim $queryResult$ = From $item$ In $dataSource$ _
                    Where $item$.$whereField$ $condition$ _
                    Select $item$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\data\LINQ Queries\Query - Filter with 'Where'\qFiltDiff.snippet</File>
    <Title>依未選欄位篩選</Title>
    <Author>Microsoft Corporation</Author>
    <Description>建立依未選欄位篩選結果的查詢。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim $queryResult$ = From $item$ In $dataSource$ _
                    Where $item$.$whereField1$ $condition1$ And $item$.$whereField2$ $condition2$ _
                    Select $item$.$selectedField$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\data\LINQ Queries\Query - Filter with 'Where'\qFiltFunc.snippet</File>
    <Title>依函式呼叫篩選</Title>
    <Author>Microsoft Corporation</Author>
    <Description>建立依函式呼叫篩選的查詢。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim $queryResult$ = From $item$ In $dataSource$ _
                    Where $functionCall$($item$.$field$, $comparisonValue$) $condition1$ _
                    Select $item$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\data\LINQ Queries\Query - Filter with 'Where'\qFiltMult.snippet</File>
    <Title>依多個欄位篩選</Title>
    <Author>Microsoft Corporation</Author>
    <Description>建立根據條件對多個欄位篩選結果的查詢。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim $queryResult$ = From $item$ In $dataSource$ _
                    Where $item$.$whereField1$ $condition1$ And $item$.$whereField2$ $condition2$ _
                    Select $item$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\data\LINQ Queries\Query - Filter with 'Where'\qQueryDist.snippet</File>
    <Title>相異結果</Title>
    <Author>Microsoft Corporation</Author>
    <Description>建立查詢，用來傳回資料的相異資料列。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim $queryResult$ = From $item$ In $dataSource$ _
                    Where $item$.$field1$ $condition1$ _
                    Select $item$.$field2$ _
                    Distinct</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\data\LINQ Queries\Query - Grouping\qAggregate.snippet</File>
    <Title>彙總成 Count() 和 Sum()</Title>
    <Author>Microsoft Corporation</Author>
    <Description>使用彙總來計算成果數目和加總字元數目。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim $queryResult$ = Aggregate $item$ In $dataSource$ _
                  Into $aggregateName$ = $groupingCondition$(), $aggregateName2$ = $groupingCondition2$($item$.$field$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\data\LINQ Queries\Query - Grouping\qAggregateAvg.snippet</File>
    <Title>彙總成 Average()</Title>
    <Author>Microsoft Corporation</Author>
    <Description>使用彙總來計算成果名稱的平均字元數目。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim $queryResult$ = Aggregate $item$ In $dataSource$ _
                         Into $groupingCondition$($item$.$field$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\data\LINQ Queries\Query - Grouping\qAggregateMax.snippet</File>
    <Title>彙總成 Max()</Title>
    <Author>Microsoft Corporation</Author>
    <Description>使用彙總來計算成果名稱中的最大字元數目。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim $queryResult$ = Aggregate $item$ In $dataSource$ _
                     Into $groupingCondition$($item$.$field$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\data\LINQ Queries\Query - Grouping\qGroup.snippet</File>
    <Title>Count() 的群組依據</Title>
    <Author>Microsoft Corporation</Author>
    <Description>建立查詢，用來群組結果並傳回每個群組中有多少項目。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim $queryResult$ = From $item$ In $dataSource$ _
                    Group By $item$.$field$ Into $groupingCondition$() _
                    Select $field$, $groupingCondition$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\data\LINQ Queries\Query - Grouping\qGroupRename.snippet</File>
    <Title>群組依據和重新命名群組</Title>
    <Author>Microsoft Corporation</Author>
    <Description>建立查詢，用來群組結果並重新命名群組。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim $queryResult$ = From $item$ In $dataSource$ _
                    Group By $groupName$ = $item$.$field$ Into $aggregateName$ = $groupingCondition$() _
                    Select $groupName$, $aggregateName$ _
                    Order By $aggregateName$ Descending, $groupName$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\data\LINQ Queries\Query - Grouping\qGroupSum.snippet</File>
    <Title>依 Count() 和 Sum() 群組</Title>
    <Author>Microsoft Corporation</Author>
    <Description>建立查詢，用來群組結果並傳回每個群組中有多少項目及特定欄位的總和。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim $queryResult$ = From $item$ In $dataSource$ _
                  Group By $groupName$ = $item$.$field$ _
                  Into $aggregateName$ = $groupingCondition$(), $aggregateName2$ = $groupingCondition2$($item$.$field$) _
                  Select $aggregateName$, $groupName$, $aggregateName2$ _
                  Order By $aggregateName$ Descending, $groupName$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\data\LINQ Queries\Query - Joining\qJoinExpArray.snippet</File>
    <Title>在陣列上聯結 (明確)</Title>
    <Author>Microsoft Corporation</Author>
    <Description>建立比對陣列中項目與元素的查詢。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim $queryResult$ = From $item$ In $dataSource$ _
                   Join $length$ In New Integer() { 4, 5 } _
                                   On $item$.$field1$ Equals $length$ _
                   Select $item$.$field1$, $item$.$field2$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\data\LINQ Queries\Query - Joining\qJoinImpArray.snippet</File>
    <Title>在陣列上聯結 (隱含)</Title>
    <Author>Microsoft Corporation</Author>
    <Description>建立比對陣列中項目與元素的查詢。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim $queryResult$ = From $item$ In $dataSource$, _
                                   $length$ In New Integer() {4, 5} _
                                   Where $item$.$field1$ = $length$ _
                   Select $item$.$field1$, $item$.$field2$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\data\LINQ Queries\Query - Joining\queGroJo.snippet</File>
    <Title>群組來自兩個來源的結果並傳回計數</Title>
    <Author>Microsoft Corporation</Author>
    <Description>建立查詢，用來群組來自兩個不同來源的結果並傳回每個群組中的項目計數。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim $dataSource1$() As $dataType1$ = {"4", "5", "6"}

                 Dim $queryResult$ = From $item1$ In $dataSource1$ _
                             Group Join $item2$ In $dataSource2$ _
                                   On $item2$.$groupfield$ Equals $item1$ _
                                   Into Group, $aggregate$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\data\LINQ Queries\Query - Joining\queGroJoName.snippet</File>
    <Title>群組聯結 - 具名群組</Title>
    <Author>Microsoft Corporation</Author>
    <Description>建立查詢，用來群組來自兩個不同來源的結果並傳回每個群組中的項目計數。名稱是提供給群組用的</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim $dataSource1$() As $dataType1$ = {"4", "5", "6"}

                 Dim $queryResult$ = From $item1$ In $dataSource1$ _
                             Group Join $item2$ In $dataSource2$ _
                                   On $item2$.$groupfield$ Equals $item1$ _
                                   Into $groupName$ = Group, $aggregate$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\data\LINQ Queries\Query - Sort with 'Order By'\qSortAsc.snippet</File>
    <Title>排序 - 遞增</Title>
    <Author>Microsoft Corporation</Author>
    <Description>建立根據指定的欄位對結果進行遞增排序的查詢。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim $queryResult$ = From $item$ In $dataSource$ _
                    Select $item$.$field1$, $item$.$field2$ _
                    Order By $field1$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\data\LINQ Queries\Query - Sort with 'Order By'\qSortDesc.snippet</File>
    <Title>排序 - 遞減</Title>
    <Author>Microsoft Corporation</Author>
    <Description>建立根據指定的欄位對結果進行遞減排序的查詢。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim $queryResult$ = From $item$ In $dataSource$ _
                     Select $item$.$field1$, $item$.$field2$ _
                     Order By $field1$ Descending</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\data\LINQ Queries\Query - Sort with 'Order By'\qSortDiff.snippet</File>
    <Title>依未選欄位排序</Title>
    <Author>Microsoft Corporation</Author>
    <Description>建立依未選欄位排序結果的查詢。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim $queryResult$ = From $item$ In $dataSource$ _
                     Order By $item$.$field1$ _
                     Select $item$.$field2$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\data\LINQ Queries\Query - Sort with 'Order By'\qSortFilt.snippet</File>
    <Title>排序和篩選查詢</Title>
    <Author>Microsoft Corporation</Author>
    <Description>建立排序和篩選的查詢。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim $queryResult$ = From $item$ In $dataSource$ _
                     Where $item$.$whereField$ $condition$ _
                     Select $item$.$field1$, $item$.$field2$ _
                     Order By $field1$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\data\LINQ Queries\Query - Sort with 'Order By'\qSortMult.snippet</File>
    <Title>依多個欄位排序</Title>
    <Author>Microsoft Corporation</Author>
    <Description>建立依多個欄位排序結果的查詢。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim $queryResult$ = From $item$ In $dataSource$ _
                     Select $item$.$field1$, $item$.$field2$ _
                     Order By $field1$, $field2$ Descending</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\data\LINQ Queries\Query - Take and Skip\qSkip.snippet</File>
    <Title>略過</Title>
    <Author>Microsoft Corporation</Author>
    <Description>略過排序結果集前 N 個項目的查詢。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim $queryResult$ = From $item$ In $dataSource$ _
                    Order By $item$.$orderField$ $orderDirection$ _
                    Skip $skipCount$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\data\LINQ Queries\Query - Take and Skip\qSkipTake.snippet</File>
    <Title>略過和接受</Title>
    <Author>Microsoft Corporation</Author>
    <Description>先略過排序結果集前 N 個項目再接受後 M 個項目的查詢。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim $queryResult$ = From $item$ In $dataSource$ _
                    Order By $item$.$orderField$ $orderDirection$ _
                    Skip $skipCount$ _
                    Take $takeCount$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\data\LINQ Queries\Query - Take and Skip\qSkipW.snippet</File>
    <Title>視條件略過</Title>
    <Author>Microsoft Corporation</Author>
    <Description>查詢，當特定條件為 True 時略過。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim $queryResult$ = From $item$ In $dataSource$ _
                    Order By $item$.$orderField$ $orderDirection$ _
                    Skip While $item$.$skipField$ $skipCondition$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\data\LINQ Queries\Query - Take and Skip\qTake.snippet</File>
    <Title>接受</Title>
    <Author>Microsoft Corporation</Author>
    <Description>接受排序結果集前 N 個項目的查詢。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim $queryResult$ = From $item$ In $dataSource$ _
                    Order By $item$.$orderField$ $orderDirection$ _
                    Take $takeCount$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\data\LINQ Queries\Query - Take and Skip\qTakeW.snippet</File>
    <Title>視條件接受</Title>
    <Author>Microsoft Corporation</Author>
    <Description>查詢，當特定條件為 True 時接受。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim $queryResult$ = From $item$ In $dataSource$ _
                    Order By $item$.$orderField$ $orderDirection$ _
                    take While $item$.$takeField$ $takeCondition$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\data\LINQ Queries\Using Different Sources\qArray.snippet</File>
    <Title>對陣列進行反覆查詢</Title>
    <Author>Microsoft Corporation</Author>
    <Description>對陣列進行反覆查詢。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim $dataSource$ = New $dataSourceType$() {50, 42, 76, 93, 65, 51, 79}

                 Dim $queryResult$ = From $item$ In $dataSource$ _
                     Where $item$ $condition$ _
                     Order By $item$ _
                     Select $item$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\data\LINQ Queries\Using Different Sources\qArrayIn.snippet</File>
    <Title>對內嵌陣列進行反覆查詢</Title>
    <Author>Microsoft Corporation</Author>
    <Description>對宣告在查詢內的內嵌陣列進行反覆查詢。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim $queryResult$ = From $item$ In New Integer() {50, 42, 76, 93, 65, 51, 79} _
                     Where $item$ $condition$ _
                     Order By $item$ _
                     Select $item$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\data\LINQ Queries\Using Different Sources\qCollection.snippet</File>
    <Title>對集合進行反覆查詢</Title>
    <Author>Microsoft Corporation</Author>
    <Description>對集合進行反覆查詢。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim $dataSource$ As New $dataSourceType$
        
                 ' populate your collection here.
                 ' $dataSource$.Add( ... )

                 Dim $queryResult$ = From $item$ In $dataSource$ _
                              Select $item$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\data\LINQ Queries\Using Different Sources\qQueryQ.snippet</File>
    <Title>對查詢進行反覆查詢</Title>
    <Author>Microsoft Corporation</Author>
    <Description>對另一個查詢的結果進行反覆查詢。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim $queryResult1$ = From $item1$ In $dataSource$ _
                             Where $item1$.$filterField1$ $filterCondition1$ _
                             Select $item1$.$field1$, $item1$.$field2$

        Dim $queryResult2$ = From $item2$ In $queryResult1$ _
                     Where $item2$.$filterfield2$ $filterCondition2$ _
                     Select $item2$.$field3$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\data\LINQ Queries\Using Query Results\qConsole.snippet</File>
    <Title>在主控台視窗中顯示結果</Title>
    <Author>Microsoft Corporation</Author>
    <Description>在主控台視窗中顯示查詢的結果。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim $queryResult$ = From $item$ In $dataSource$ _
                    Select $item$.$field1$, $alias$ = $item$.$field2$ _
                    Order By $field1$

                 For Each $iterationVar$ In $queryResult$
                     Console.WriteLine($iterationVar$.$field1$ &amp; " " &amp; $iterationVar$.$alias$)
                 Next</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\data\LINQ Queries\Using Query Results\qLoop.snippet</File>
    <Title>使用 For Each 反覆查看查詢結果</Title>
    <Author>Microsoft Corporation</Author>
    <Description>For…Each 迴圈，示範如何反覆查看查詢結果。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim $dataSource$() As $dataSourceType$ = {50, 42, 76, 93, 65, 51, 79, 97, _
                                   44, 65, 70, 83, 81, 52}

        Dim $queryResult$ = From $item$ In $dataSource$ _
                     Where $item$ &gt; (From avgScore In $dataSource$).Average _
                     Order By $item$ _
                     Select $item$

        For Each $iterationVar$ In $queryResult$
            Console.WriteLine("The following score was above average: " &amp; $iterationVar$)
        Next</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\data\LINQ Queries\Using Query Results\qWebForm.snippet</File>
    <Title>在 WebForm 方格中顯示查詢的結果</Title>
    <Author>Microsoft Corporation</Author>
    <Description>在 WebForm DataGridView 控制項中顯示查詢的結果。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim $queryResult$ = From $item$ In $dataSource$ _
                    Select $item$.$field1$, $alias$ = $item$.$field2$ _
                    Order By $field1$

        ' This code assumes a GridView instance exists on your webform.     
        $gridview$.DataSource = $queryResult$.ToList()
        $gridview$.DataBind()</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\data\LINQ Queries\Using Query Results\qWinForm.snippet</File>
    <Title>在 WinForm 方格中顯示查詢的結果</Title>
    <Author>Microsoft Corporation</Author>
    <Description>在 WinForm DataGridView 控制項中顯示查詢的結果。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim $queryResult$ = From $item$ In $dataSource$ _
                    Select $item$.$field1$, $alias$ = $item$.$field2$ _
                    Order By $field1$

        ' This assumes the gridview is already on your form.
        $gridview$.DataSource = $queryResult$.ToList()</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\data\xml\EmbedQueryInsideXmlElement.snippet</File>
    <Title>在 XElement 裡面嵌入查詢</Title>
    <Author>Microsoft Corporation</Author>
    <Description>在 XElement 裡面嵌入查詢。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>
        Dim y = &lt;$Root$&gt;
                    &lt;%= From i in $QueryExpr$ _
                        where i $QueryExpr2$ _
                        Select &lt;$Result$&gt;
                                   &lt;%= i %&gt;
                               &lt;/$Result$&gt; _
                               %&gt;
                &lt;/$Root$&gt;

      </Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\data\xml\InferaSchemafromanXmlFile.snippet</File>
    <Title>由 XML 檔推斷及建立結構描述</Title>
    <Author>Microsoft Corporation</Author>
    <Description>由現有的 XML 檔推斷結構描述，並另存為不同的結構描述檔。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim infer = New XmlSchemaInference()
Dim sc = New XmlSchemaSet()
sc = infer.InferSchema(New XmlTextReader($xmlFile$))

Dim w = XmlWriter.Create(New StreamWriter($XsdFile$))
For Each schemafile As XmlSchema In sc.Schemas()
    schemafile.Write(w)
Next</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\data\xml\NavigatewithXpathNavigator.snippet</File>
    <Title>使用 XPathNavigator 巡覽</Title>
    <Author>Microsoft Corporation</Author>
    <Description>使用 XPathNavigator 逐一查看 XDocument 的節點。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim nav = $xmlDoc$.CreateNavigator()

        nav.MoveToChild(XPathNodeType.Element)

        Dim nodeIterator = nav.SelectChildren(XPathNodeType.Element)
        While nodeIterator.MoveNext
            ' Interact with each child node here.
        End While</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\data\xml\XML - Create\CreateXHTML.snippet</File>
    <Title>使用 XML 常值建立 XHTML</Title>
    <Author>Microsoft Corporation</Author>
    <Description>使用 XML 常值建立 XHTML。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim inputXML = $inputXML$
Dim xhtml = &lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
&lt;head&gt;
&lt;title&gt;Enter title here&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;p&gt;Book Collection&lt;/p&gt;
&lt;table border="1"&gt;
    &lt;tr&gt;
      &lt;th align="left"&gt;Book&lt;/th&gt;
      &lt;th align="left"&gt;Author&lt;/th&gt;
    &lt;/tr&gt;
    &lt;%= From i in $AxisProp$ _
        Select _
        &lt;tr&gt;
                 &lt;td&gt;&lt;%= $Book$ %&gt; &lt;/td&gt;
                 &lt;td&gt;&lt;%= $Author$ %&gt; &lt;/td&gt;                  
               &lt;/tr&gt; _
        %&gt;
    
&lt;/table&gt;
&lt;/body&gt;
&lt;/html&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\data\xml\XML - Create\CreateXMLDocument.snippet</File>
    <Title>建立 XML 文件</Title>
    <Author>Microsoft Corporation</Author>
    <Description>建立已嵌入運算式的 XML 文件。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>
        Dim xmllit = &lt;?xml version="1.0"?&gt;
                      &lt;$Root$ $Attr1$="$value$"&gt;
                                      &lt;%= $Expr$ %&gt;
                    &lt;$Child$ $Attr2$=&lt;%= $StrExpr$ %&gt;/&gt;
                &lt;/&gt;
      </Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\data\xml\XML - Create\CreateXMLElement.snippet</File>
    <Title>建立 XML 項目</Title>
    <Author>Microsoft Corporation</Author>
    <Description>建立已嵌入運算式的 XML 項目。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim xmllit = &lt;$Root$ $Attr1$="$value$"&gt;
                                      &lt;%= $Expr$ %&gt;
                    &lt;$Child$ $Attr2$=&lt;%= $StrExpr$ %&gt;/&gt;
                &lt;/&gt;
      </Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\data\xml\XML - Query\FindChildElementsinanXMLFile.snippet</File>
    <Title>使用項目名稱尋找 XML 檔中的所有子項目</Title>
    <Author>Microsoft Corporation</Author>
    <Description>依項目名稱找出 XML 檔中的所有子項目。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim childElements = $XmlVariable$.&lt;$TagName$&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\data\xml\XML - Query\FindDescElementsinanXMLFile.snippet</File>
    <Title>使用項目名稱尋找 XML 檔中的所有子系項目</Title>
    <Author>Microsoft Corporation</Author>
    <Description>依項目名稱找出 XML 檔中的所有子系項目。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim childElements = $XmlVariable$...&lt;$TagName$&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\data\xml\XML - Query\PrintXmlAxisPropertyResults.snippet</File>
    <Title>將 XML 資料中的特定子項目列印到主控台</Title>
    <Author>Microsoft Corporation</Author>
    <Description>將 XML 資料中的特定子項目列印到主控台。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>For Each item In $XELEM$.$AxisExpr$
            Console.WriteLine(item)
        Next
      </Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\data\xml\XML - Query\ReturnElemNodesinanXMLFile.snippet</File>
    <Title>傳回 XDocument 中的所有項目</Title>
    <Author>Microsoft Corporation</Author>
    <Description>傳回 XDocument 中的所有項目。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>$xmlDoc$.Descendants()</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\data\xml\XML - Query\SelectNthNodeInXMLFile.snippet</File>
    <Title>尋找 XML 檔中項目的第 N 個執行個體</Title>
    <Author>Microsoft Corporation</Author>
    <Description>尋找 XML 檔中項目的第 N 個執行個體。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim element = XElement.Load($FileName$)
      Dim result = element.$NodePath$$Indexer$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\data\xml\XML - Read\ReadClassDatafromanXMLFile.snippet</File>
    <Title>從 XML 檔讀取類別資料</Title>
    <Author>Microsoft Corporation</Author>
    <Description>使用 XmlSerializer 類別讀取之前寫入 XML 檔中的類別資料。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim reader = New XmlSerializer(GetType($ClassType$))
        Dim file = New StreamReader($filename$)
        Dim fileData = CType(reader.Deserialize(file), $ClassType$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\data\xml\XML - Read\ReadXMLfromaFile.snippet</File>
    <Title>使用 XmlTextReader 從檔案讀取 XML</Title>
    <Author>Microsoft Corporation</Author>
    <Description>使用 XMLTextReader 類別從 XML 檔擷取內容。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim reader = New XmlTextReader($filename$)
Dim readElement = XElement.Load(reader)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\data\xml\XML - Read\ReadXMLfromURLSample.snippet</File>
    <Title>從 URL 讀取 XML
      </Title>
    <Author>Microsoft Corporation</Author>
    <Description>從定義為 URL 的位置讀取 XML。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim myUrl As String = $Url$
Dim $document$ = XDocument.Load(myUrl)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\data\xml\XML - Update\AddanElementtoXMLData.snippet</File>
    <Title>在 XML 文件中加入項目</Title>
    <Author>Microsoft Corporation</Author>
    <Description>在 XDocument 執行個體中加入新項目。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code> $XmlDoc$.Add(&lt;$Element$&gt;$Value$&lt;/$Element$&gt;)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\data\xml\XML - Update\AddNewElementtoNthElement.snippet</File>
    <Title>將新項目加入 XML 資料中的第 N 個項目</Title>
    <Author>Microsoft Corporation</Author>
    <Description>將新的 XElement 加入 XML 資料中的第 N 個 XElement</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>$XmlEle$.&lt;$AxisProp$&gt;($val$).Add($Element$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\data\xml\XML - Update\InsertNewAttributeForSpecificChildElements.snippet</File>
    <Title>插入特定子項目的新屬性</Title>
    <Author>Microsoft Corporation</Author>
    <Description>插入特定子項目的新屬性。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim elem = $Xelem$
        For Each item In $AxisExpr$
            item.@$newAttr$ = "$newVal$"
        Next</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\data\xml\XML - Update\UpdateContentOfChildElements.snippet</File>
    <Title>更新子項目的內容</Title>
    <Author>Microsoft Corporation</Author>
    <Description>更新子項目的內容。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim elem = $Xelem$
        For Each item In $AxisExpr$
            item.SetValue("$newVal$")
        Next</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\data\xml\XML - Write\WriteClassDatatoanXMLFile.snippet</File>
    <Title>將類別資料寫入 XML 檔</Title>
    <Author>Microsoft Corporation</Author>
    <Description>使用 XmlSerializer 類別將類別中的資料寫入 XML 檔。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim writer As New XMLSerializer(GetType($Class$))
Dim file As New StreamWriter($filename$)
writer.Serialize(file, $dataInstance$)
file.Close()</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\data\xml\XML - Write\WriteXmlElementtoFile.snippet</File>
    <Title>將 XML 項目寫入檔案</Title>
    <Author>Microsoft Corporation</Author>
    <Description>將 XML 項目寫入檔案。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>$XmlEle$.Save($File$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\fundamentals\collections and arrays\ConverttoStronglyTypedArrayUsingToArray.snippet</File>
    <Title>將 ArrayList 轉換成強類型陣列</Title>
    <Author>Microsoft Corporation</Author>
    <Description>使用 ToArray(Type) 將 ArrayList 轉換成強類型陣列</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim newArray() As $Datatype$ = CType($ExistingArray$.ToArray(GetType($Datatype$)), $Datatype$())</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\fundamentals\collections and arrays\CreateAStronglyTypedCollection.snippet</File>
    <Title>建立含有單一類型項目的清單</Title>
    <Author>Microsoft Corporation</Author>
    <Description>建立儲存特殊類型之項目的集合。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>' Backing storage -- a generic list
Dim $storageVar$ As New List(Of $type$)() 

' Add an item to the Collection
$storageVar$.Add($item$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\fundamentals\collections and arrays\CreateAStronglyTypedDictionary.snippet</File>
    <Title>建立含有一個項目類型的索引集合</Title>
    <Author>Microsoft Corporation</Author>
    <Description>建立儲存以索引鍵索引的特殊項目類型的字典。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>' Backing storage -- a generic dictionary
Dim $storageVar$ As New Dictionary(Of $keyType$, $itemType$)

' Add items to the dictionary
$storageVar$.Add( $keyValue1$ , $value1$)
$storageVar$.Add( $keyValue2$ , $value2$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\fundamentals\collections and arrays\CreateAStronglyTypedSortedDictionary.snippet</File>
    <Title>建立排序的字典</Title>
    <Author>Microsoft Corporation</Author>
    <Description>建立排序的字典，以儲存特定的項目類型。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>        ' Backing storage -- a generic dictionary
        Dim $storageVar$ As New SortedDictionary(Of $keyType$, $itemType$)

        ' Add items to the dictionary
        $storageVar$.Add($keyValue1$, $itemValue1$)
        $storageVar$.Add($keyValue2$, $itemValue2$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\fundamentals\collections and arrays\DefineATypeComparerForSorting.snippet</File>
    <Title>定義排序常式中使用的類型比較子</Title>
    <Author>Microsoft Corporation</Author>
    <Description>比較兩個物件並傳回值，指出其中一個物件為小於、等於或大於另一個物件。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>     Public Class $compareID$
        Inherits Comparer(Of $compType$)

        Public Overrides Function Compare(ByVal $param1$ As $compType$, ByVal $param2$ As $compType$) As Integer
            If $param1$ &lt; $param2$ Then
        ' result = &lt;0 if param1 &lt; param2
        Return -1
            ElseIf $param1$ &gt; $param2$ Then
        ' result = &gt;0 if param1 &gt; param2
        Return 1
            Else
        ' result = 0 if param1 = param2
        Return 0
            End If
        End Function
    End Class</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\fundamentals\collections and arrays\IndexIntoStronglyTypedDictionaryByKey.snippet</File>
    <Title>使用索引鍵在強類型字典中索引</Title>
    <Author>Microsoft Corporation</Author>
    <Description>使用索引鍵在強類型字典中索引。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim $itemVar$ As $itemType$ = $storageVar$.Item($key$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\fundamentals\collections and arrays\InitializeanArray.snippet</File>
    <Title>初始化一維陣列</Title>
    <Author>Microsoft Corporation</Author>
    <Description>初始化一維陣列。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim oneDimArray() As Integer = {$OneD$}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\fundamentals\collections and arrays\IteratingThroughACollection.snippet</File>
    <Title>逐一查看集合</Title>
    <Author>Microsoft Corporation</Author>
    <Description>逐一查看集合中的特定項目類型。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>        ' Iterate through a collection
        For Each $itemVar$ As $itemType$ In $colVar$

        Next</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\fundamentals\collections and arrays\IteratingThroughADictionary.snippet</File>
    <Title>逐一查看字典</Title>
    <Author>Microsoft Corporation</Author>
    <Description>逐一查看字典中的所有項目。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>        ' Iterate through a dictionary
        For Each $itemVar$ As $itemType$ In $dicVar$.Values

        Next
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\fundamentals\collections and arrays\IteratingThroughASortedDictionaryByKey.snippet</File>
    <Title>依據索引鍵逐一查看排序的字典</Title>
    <Author>Microsoft Corporation</Author>
    <Description>依據索引鍵排序清單逐一查看字典中的所有項目。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code> ' Loop through the items based on key
        For Each $keyVar$ As $keyType$ In $dicVar$.Keys
            Dim $itemVar$ As $itemType$ = $dicVar$.Item($keyVar$)

        Next</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\fundamentals\collections and arrays\LocateanElementinanArray.snippet</File>
    <Title>在陣列中尋找元素</Title>
    <Author>Microsoft Corporation</Author>
    <Description>在陣列中尋找指定元素的索引。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim index As Integer
        index = Array.IndexOf($arrayName$, $SearchString$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\fundamentals\collections and arrays\SortAnArray.snippet</File>
    <Title>排序陣列</Title>
    <Author>Microsoft Corporation</Author>
    <Description>宣告字串物件的陣列、填入該陣列，然後依字母順序排序該陣列。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim animals() As String = $InitialValues$
Array.Sort(animals)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\fundamentals\datatypes\byteImage.snippet</File>
    <Title>將 Byte() 轉換成影像</Title>
    <Author>Microsoft Corporation</Author>
    <Description>將 Byte() 轉換成影像。位元組陣列通常是影像資訊儲存在資料庫中的方式</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Public Function GetImageFromByteArray(ByVal $inputArray$ As Byte()) As Bitmap
                  Return CType(Bitmap.FromStream(New IO.MemoryStream($inputArray$)), Bitmap)
              End Function</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\fundamentals\datatypes\ConvertanArrayofBytesintoaString.snippet</File>
    <Title>將位元組陣列轉換為字串</Title>
    <Author>Microsoft Corporation</Author>
    <Description>將位元組陣列轉換為字串</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Private Function ConvertByteArrayToString(ByVal byteArray As Byte()) As String
    Dim enc As Encoding = $Encoding$
    Dim text As String = enc.GetString(byteArray)
    Return text
End Function</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\fundamentals\datatypes\ConvertaNumbertoaHexaDecimalString.snippet</File>
    <Title>將數字轉換為十六進位字串</Title>
    <Author>Microsoft Corporation</Author>
    <Description>傳回整數的十六進位表示。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim hexString As String = $Number$.ToString("X")</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\fundamentals\datatypes\ConvertaNumbertoaOctalString.snippet</File>
    <Title>將數字轉換為八進位字串</Title>
    <Author>Microsoft Corporation</Author>
    <Description>傳回整數的八進位字串表示。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim octal As String = Oct($Number$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\fundamentals\datatypes\ConvertaStringtoByteArray.snippet</File>
    <Title>將字串轉換為位元組陣列</Title>
    <Author>Microsoft Corporation</Author>
    <Description>將字串轉換為位元組陣列。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>dim bytes as Byte() = Encoding.Unicode.GetBytes($SampleString$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\fundamentals\datatypes\ConvertBetweenHiraganaandKatakanaCharacters.snippet</File>
    <Title>在平假名和片假名字元之間轉換 (僅限日文)</Title>
    <Author>Microsoft Corporation</Author>
    <Description>在字串中轉換平假名和片假名字元。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>' Convert Katakana to Hiragana (Japanese Only).
Dim hString As String = StrConv($Katakana$, _
    VbStrConv.Hiragana)
' Convert Hiragana to Katakana (Japanese Only).
Dim kString As String = StrConv($Hiragana$, _
    VbStrConv.Katakana)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\fundamentals\datatypes\ConvertBetweenSimplifiedChineseandTraditionalChineseCharacters.snippet</File>
    <Title>在簡體中文和繁體中文字元之間轉換</Title>
    <Author>Microsoft Corporation</Author>
    <Description>在字串中轉換簡體中文和繁體中文字元。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>' Convert Simplified Chinese to Traditional Chinese.
 	Dim tString As String = StrConv($Simplified$, _
    VbStrConv.TraditionalChinese)
' Convert Traditional Chinese to Simplified Chinese.
	Dim sString As String = StrConv($Traditional$, _
    VbStrConv.SimplifiedChinese)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\fundamentals\datatypes\ConvertBetweenWideandNarrowCharacters.snippet</File>
    <Title>在寬字元和窄字元之間轉換</Title>
    <Author>Microsoft Corporation</Author>
    <Description>在字串中轉換寬字元和窄字元。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>' Convert Wide to Narrow.
Dim nString As String = StrConv($Wide$, VbStrConv.Narrow)
' Convert Narrow to Wide.
Dim wString As String = StrConv($Narrow$, VbStrConv.Wide)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\fundamentals\datatypes\DeterminetheSpanbetweenTwoDates.snippet</File>
    <Title>判斷兩個日期之間的時間長度</Title>
    <Author>Microsoft Corporation</Author>
    <Description>計算兩個日期之間相差的日數，同時為此差異建構 TimeSpan 值。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim oldDate As Date = $dateLiteral$
Dim newDate As Date = $dateLiteral2$

' You can also determine the difference in times in other units.
Dim difference As TimeSpan = newTime - oldTime
Dim differenceInDays As Double = difference.TotalDays</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\fundamentals\datatypes\DeterminetheSpanbetweenTwoTimes.snippet</File>
    <Title>判斷兩個時間之間的時間長度</Title>
    <Author>Microsoft Corporation</Author>
    <Description>計算同一天中兩個時間相差的秒數，同時為此差異建構 TimeSpan 值。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim oldTime As Date = $timeValue$
Dim newTime As Date = $timeValue2$

' You can also determine the difference in times in other units.
Dim difference As TimeSpan = newTime - oldTime
Dim differenceInSeconds As Double = difference.TotalSeconds
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\fundamentals\datatypes\GenerateMultilineStringLiterals.snippet</File>
    <Title>產生多行字串常值</Title>
    <Author>Microsoft Corporation</Author>
    <Description>建構長度為三行的字串常值。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim longString As String
longString = _
    "This is the first line of my string." &amp; Environment.NewLine &amp; 
    "This is the second line of my string." &amp; Environment.NewLine &amp;
    "This is the third line of my string."</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\fundamentals\datatypes\imageByte.snippet</File>
    <Title>將影像轉換成 Byte()</Title>
    <Author>Microsoft Corporation</Author>
    <Description>將影像轉換成 Byte()。位元組陣列通常是影像資訊儲存在資料庫中的方式</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Public Function GetByteArrayFromImage(ByVal $inputImage$ As Bitmap) As Byte()
        Dim $tempStream$ As New System.IO.MemoryStream
        $inputImage$.Save($tempStream$, Imaging.ImageFormat.Bmp)
        Dim $outputByteArray$(CInt($tempStream$.Length - 1)) As Byte
        $tempStream$.Seek(0, System.IO.SeekOrigin.Begin)
        $tempStream$.Read($outputByteArray$, 0, CInt($tempStream$.Length))
        Return $outputByteArray$
    End Function</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\fundamentals\datatypes\ParseanEmailAddress.snippet</File>
    <Title>剖析電子郵件地址</Title>
    <Author>Microsoft Corporation</Author>
    <Description>由電子郵件地址傳回使用者名稱和提供者名稱。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim emailParts() As String
Dim user As String
Dim provider As String
emailParts = $email$.Split("@".ToCharArray, 2)
If emailParts.Length = 2 Then
    user = emailParts(0)
    provider = emailParts(1)
Else
    ' Email address is not valid. The expected format is user@provider.*
    user = String.Empty
    provider = String.Empty
End If</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\fundamentals\datatypes\RemovePartsofaString.snippet</File>
    <Title>移除字串的部分</Title>
    <Author>Microsoft Corporation</Author>
    <Description>從一個字串中移除出現另一個字串的所有位置。</Description>
    <Keywords>字串,取代</Keywords>
    <Language>VB</Language>
    <Code>Dim withParts As String = $StringWithParts$
Dim withoutParts As String = withParts.Replace($ToRemove$, "")</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\fundamentals\filesystem\CompareTwoFiles.snippet</File>
    <Title>比較兩個檔案</Title>
    <Author>Microsoft Corporation</Author>
    <Description>比較兩個檔案。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Private Function CompareFiles(ByVal file1 As String, ByVal file2 As String) As Boolean
        ' Set to true if the files are equal; false otherwise
        Dim filesAreEqual As Boolean = False

        With My.Computer.FileSystem
            ' Ensure that the files are the same length before comparing them line by line.
            If .GetFileInfo(file1).Length = .GetFileInfo(file2).Length Then
                Using file1Reader As New FileStream(file1, FileMode.Open), _
                      file2Reader As New FileStream(file2, FileMode.Open)
                    Dim byte1 As Integer = file1Reader.ReadByte()
                    Dim byte2 As Integer = file2Reader.ReadByte()
                    ' If byte1 or byte2 is a negative value, we have reached the end of the file.
                    While byte1 &gt;= 0 AndAlso byte2 &gt;= 0
                        If (byte1 &lt;&gt; byte2) Then
                            filesAreEqual = False
                            Exit While
                        Else
                            filesAreEqual = True
                        End If
                        ' Read the next byte.
                        byte1 = file1Reader.ReadByte()
                        byte2 = file2Reader.ReadByte()
                    End While
                End Using
            End If
        End With

        Return filesAreEqual
    End Function</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\fundamentals\filesystem\CopyaDirectory.snippet</File>
    <Title>複製目錄</Title>
    <Author>Microsoft Corporation</Author>
    <Description>複製目錄及其所有檔案和子目錄。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>My.Computer.FileSystem.CopyDirectory($sourceDir$, $destDirectory$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\fundamentals\filesystem\CopyaFile.snippet</File>
    <Title>複製檔案</Title>
    <Author>Microsoft Corporation</Author>
    <Description>將 Source.txt 檔複製到另一個檔案 Copy.txt 中。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>My.Computer.FileSystem.CopyFile($Source$, $Destination$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\fundamentals\filesystem\CreateaFile.snippet</File>
    <Title>建立檔案</Title>
    <Author>Microsoft Corporation</Author>
    <Description>建立新檔案。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>My.Computer.FileSystem.WriteAllText($Filename$, String.Empty, False)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\fundamentals\filesystem\CreateaFolder.snippet</File>
    <Title>建立資料夾</Title>
    <Author>Microsoft Corporation</Author>
    <Description>在此電腦上建立新資料夾。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>My.Computer.FileSystem.CreateDirectory($folderName$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\fundamentals\filesystem\CreateaTemporaryFilename.snippet</File>
    <Title>建立暫存檔案名稱</Title>
    <Author>Microsoft Corporation</Author>
    <Description>建立暫存檔案的名稱。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim fileName As String 
fileName = My.Computer.FileSystem.GetTempFileName()</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\fundamentals\filesystem\DeleteFiles.snippet</File>
    <Title>刪除檔案</Title>
    <Author>Microsoft Corporation</Author>
    <Description>使用者確認刪除之後刪除檔案。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>My.Computer.FileSystem.DeleteFile($Filename$, FileIO.UIOption.AllDialogs, FileIO.RecycleOption.SendToRecycleBin)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\fundamentals\filesystem\DetermineifaFileExists.snippet</File>
    <Title>判斷檔案是否存在</Title>
    <Author>Microsoft Corporation</Author>
    <Description>設定布林值變數，表示指定的檔案是否存在。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim fileExists As Boolean 
fileExists = My.Computer.FileSystem.FileExists($filename$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\fundamentals\filesystem\DetermineifaFolderExists.snippet</File>
    <Title>判斷資料夾是否存在</Title>
    <Author>Microsoft Corporation</Author>
    <Description>設定布林值變數，表示指定的資料夾是否存在。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim folderExists As Boolean
folderExists = My.Computer.FileSystem.DirectoryExists($folderName$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\fundamentals\filesystem\DeterminingtheSizeofaFile.snippet</File>
    <Title>判斷檔案大小</Title>
    <Author>Microsoft Corporation</Author>
    <Description>取得檔案大小，並指派給變數</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim fileSize As Long 
fileSize = My.Computer.FileSystem.GetFileInfo($filename$).Length</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\fundamentals\filesystem\EnumerateDrivesonaComputer.snippet</File>
    <Title>列舉電腦上的磁碟</Title>
    <Author>Microsoft Corporation</Author>
    <Description>列舉電腦上的磁碟。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>For Each drive In My.Computer.FileSystem.Drives

        Next</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\fundamentals\filesystem\FindAmountofDiskSpaceAvailable.snippet</File>
    <Title>尋找可用的磁碟空間量</Title>
    <Author>Microsoft Corporation</Author>
    <Description>取得可用的磁碟空間量。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim freeSpace As Long 
freeSpace = My.Computer.FileSystem.GetDriveInfo($Drive$).TotalFreeSpace</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\fundamentals\filesystem\GetInformationAboutaFile.snippet</File>
    <Title>取得檔案的相關資訊</Title>
    <Author>Microsoft Corporation</Author>
    <Description>取得包含檔案相關資訊的物件。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim fileData As FileInfo = My.Computer.FileSystem.GetFileInfo($Filename$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\fundamentals\filesystem\MoveFiles.snippet</File>
    <Title>移動檔案</Title>
    <Author>Microsoft Corporation</Author>
    <Description>將檔案移動到新的目錄。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>My.Computer.FileSystem.MoveFile($oldFilePath$, $newFilePath$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\fundamentals\filesystem\ReadaDelimitedTextfile.snippet</File>
    <Title>讀取以符號分隔的文字檔</Title>
    <Author>Microsoft Corporation</Author>
    <Description>由以逗號分隔之資料的文字檔中，傳回每一欄和列的值。也可能會使用其他分隔符號。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim filename As String = $Filename$
        Dim fields As String()
        Dim delimiter As String = $Delimiter$
        Using parser As New TextFieldParser(filename)
            parser.SetDelimiters(delimiter)
            While Not parser.EndOfData
                ' Read in the fields for the current line
                fields = parser.ReadFields()
                ' Add code here to use data in fields variable.

            End While
        End Using</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\fundamentals\filesystem\ReadfromaBinaryFile.snippet</File>
    <Title>讀取二進位檔案</Title>
    <Author>Microsoft Corporation</Author>
    <Description>由二進位檔案讀取資料。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim fileContents As Byte()
filecontents = My.Computer.FileSystem.ReadAllBytes($Filename$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\fundamentals\filesystem\ReadfromanExistingTextFileinMyDocuments.snippet</File>
    <Title>讀取 [我的文件] 資料夾中的檔案</Title>
    <Author>Microsoft Corporation</Author>
    <Description>將 [我的文件] 資料夾中文字檔的內容，讀取至單一字串中。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim fullFilePath As String
Dim fileContents As String
With My.Computer.FileSystem
    fullFilePath = .CombinePath(.SpecialDirectories.MyDocuments, $filename$)
    fileContents = .ReadAllText(fullFilePath)
End With</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\fundamentals\filesystem\ReadTextfromaFile.snippet</File>
    <Title>由檔案讀取文字</Title>
    <Author>Microsoft Corporation</Author>
    <Description>將文字檔的內容讀取至字串中。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim fileContents As String
fileContents = My.Computer.FileSystem.ReadAllText($FileName$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\fundamentals\filesystem\RenameaDirectory.snippet</File>
    <Title>重新命名目錄</Title>
    <Author>Microsoft Corporation</Author>
    <Description>重新命名目錄。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>My.Computer.FileSystem.RenameDirectory($old$, $NewName$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\fundamentals\filesystem\RenameaFile.snippet</File>
    <Title>重新命名檔案</Title>
    <Author>Microsoft Corporation</Author>
    <Description>重新命名檔案。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>My.Computer.FileSystem.RenameFile($old$, $NewName$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\fundamentals\filesystem\RetrievetheDriveNamesontheLocalComputer.snippet</File>
    <Title>擷取本機電腦上的磁碟</Title>
    <Author>Microsoft Corporation</Author>
    <Description>擷取本機電腦上的磁碟名稱。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim driveNames As New List(Of String)
        For Each drive As DriveInfo In My.Computer.FileSystem.Drives
            driveNames.Add(drive.Name)
        Next</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\fundamentals\filesystem\SearchaDirectoryforFilesRecursively.snippet</File>
    <Title>在目錄中遞迴搜尋檔案</Title>
    <Author>Microsoft Corporation</Author>
    <Description>在目錄中遞迴搜尋檔案。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim files As ReadOnlyCollection(Of String)
files = My.Computer.FileSystem.GetFiles($directory$, FileIO.SearchOption.SearchAllSubDirectories, $str$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\fundamentals\filesystem\SearchFilesforanExpression.snippet</File>
    <Title>在檔案中搜尋運算式</Title>
    <Author>Microsoft Corporation</Author>
    <Description>在目錄中的檔案內搜尋運算式。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim files As ReadOnlyCollection(Of String)
files = My.Computer.FileSystem.FindInFiles($dir$, $search$, True, FileIO.SearchOption.SearchAllSubDirectories, $wild$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\fundamentals\filesystem\WriteTexttoFiles.snippet</File>
    <Title>將文字寫入檔案</Title>
    <Author>Microsoft Corporation</Author>
    <Description>將一行文字寫入文字檔中，如果檔案存在則取代任何文字。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>My.Computer.FileSystem.WriteAllText($FileName$, $TextToWrite$, True)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\fundamentals\filesystem\WritetoaBinaryFile.snippet</File>
    <Title>寫入二進位檔案</Title>
    <Author>Microsoft Corporation</Author>
    <Description>將位元組寫入二進位檔案。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim fileContents() As Byte = $byteArray$
My.Computer.FileSystem.WriteAllBytes($FileName$, fileContents, $IsAppend$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\fundamentals\math\CalculateaMonthlyPaymentonaLoan.snippet</File>
    <Title>計算貸款的每月付款金額</Title>
    <Author>Microsoft Corporation</Author>
    <Description>計算貸款的每月付款金額。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim futureValue As Double = 0
Dim payment As Double
payment = Pmt($annualInterestRate$ / 12, $numberOfPayments$, -$loanAmount$, futureValue, DueDate.EndOfPeriod)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\fundamentals\math\CalculateCosineOfAnAngle.snippet</File>
    <Title>計算指定角度的餘弦函數</Title>
    <Author>Microsoft Corporation</Author>
    <Description>將角度的單位從角度轉換成弧度，然後計算角度的餘弦函數</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim radians As Double = $Degrees$ * Math.PI / 180
Dim cos As Double = Math.Cos(radians)
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\fundamentals\math\CalculateDepreciation.snippet</File>
    <Title>計算年數合計折舊</Title>
    <Author>Microsoft Corporation</Author>
    <Description>傳回指定資產經過一段指定期間後，年數合計折舊數的雙精度浮點數。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim depreciation As Double
depreciation = SYD($Cost$, $EndValue$, $UsefulLife$, $Year$)


</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\fundamentals\math\CalculateSineOfAnAngle.snippet</File>
    <Title>計算指定角度的正弦函數</Title>
    <Author>Microsoft Corporation</Author>
    <Description>將角度的單位從角度轉換成弧度，然後計算角度的正弦函數</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim radians As Double = $Degrees$ * Math.PI / 180
Dim sin As Double = Math.Sin(radians)
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\fundamentals\math\CalculateTangentOfAnAngle.snippet</File>
    <Title>計算指定角度的正切函數</Title>
    <Author>Microsoft Corporation</Author>
    <Description>將角度的單位從角度轉換成弧度，然後計算角度的正切函數</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim radians As Double = $Degrees$ * Math.PI / 180
Dim tan As Double = Math.Tan(radians)
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\fundamentals\math\GetARandomNumber.snippet</File>
    <Title>使用 Random 類別取得亂數</Title>
    <Author>Microsoft Corporation</Author>
    <Description>產生介於上限和下限之間的隨機整數。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim generator As New Random
Dim randomValue As Integer
randomValue = generator.Next($LowerBound$, $UpperBound$)
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\os\FindtheCurrentUsersName.snippet</File>
    <Title>尋找目前使用者的名稱</Title>
    <Author>Microsoft Corporation</Author>
    <Description>擷取目前使用者的名稱。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim userName = My.User.Name</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\os\PerformanActionwhenSystemPowerModeChanges.snippet</File>
    <Title>系統電源模式變更時執行動作</Title>
    <Author>Microsoft Corporation</Author>
    <Description>系統電源模式變更時執行動作。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim WithEvents systemEvent As SystemEvents

    Private Sub systemEvent_PowerModeChanged(ByVal sender As Object, ByVal e As Microsoft.Win32.PowerModeChangedEventArgs) Handles systemEvent.PowerModeChanged
        Select Case e.Mode
            Case PowerModes.Resume

            Case PowerModes.StatusChange

            Case PowerModes.Suspend

            Case Else

        End Select

    End Sub</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\os\RespondtoTimerEvent.snippet</File>
    <Title>回應計時器事件</Title>
    <Author>Microsoft Corporation</Author>
    <Description>回應計時器事件。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>' Start the timer with the given interval
Private Sub StartTimer()
    Dim Timer1 As New Timer()
    AddHandler Timer1.Tick, AddressOf Timer1_Tick
    Timer1.Interval = $interval$
    Timer1.Start()
End Sub

Private Sub Timer1_Tick(ByVal obj As Object, ByVal e As EventArgs)

End Sub</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\os\UseBeginInvokeonaControltorunCodeAsynchronously.snippet</File>
    <Title>在控制項上使用 BeginInvoke 以非同步執行程式碼</Title>
    <Author>Microsoft Corporation</Author>
    <Description>在控制項上使用 BeginInvoke 以非同步執行程式碼。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Delegate Sub InvokeDelegate()

Public Sub Begin_Invoke()
    $text1$.BeginInvoke(New InvokeDelegate(AddressOf InvokeMethod))
End Sub

Public Sub InvokeMethod()
    $text1$.Text = $str$
End Sub</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\os\EventLog\ReadEntriesCreatedbyaParticularApplicationfromtheEventlog.snippet</File>
    <Title>由事件記錄檔讀取特定應用程式建立的項目</Title>
    <Author>Microsoft Corporation</Author>
    <Description>在清單中填入應用程式的所有事件記錄檔項目。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim log As New EventLog($LogName$)
Dim entries As New List(Of EventLogEntry)
For Each entry As EventLogEntry In log.Entries
    If entry.Source = $SourceName$ Then
        entries.Add(entry)
    End If
Next</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\os\EventLog\ReadEntriesfromEventLogs.snippet</File>
    <Title>由事件記錄檔讀取項目</Title>
    <Author>Microsoft Corporation</Author>
    <Description>讀取所有事件記錄檔項目。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim log As New EventLog($LogName$)
Dim entries As EventLogEntryCollection = log.Entries</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\os\EventLog\WritetotheApplicationEventLogfromaSpecifiedSource.snippet</File>
    <Title>由指定的來源寫入應用程式事件記錄檔</Title>
    <Author>Microsoft Corporation</Author>
    <Description>將訊息寫入應用程式事件記錄檔。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim log As New EventLog($LogName$, $Machine$, $SourceName$)
log.WriteEntry($message$, $EntryType$, $EventID$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\os\EventLog\WritetotheMyApplicationLog.snippet</File>
    <Title>寫入 My.Application 記錄檔</Title>
    <Author>Microsoft Corporation</Author>
    <Description>將字串寫入本機電腦上的應用程式事件記錄檔。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>My.Application.Log.WriteEntry($message$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\os\Messaging\CreateaMessageQueue.snippet</File>
    <Title>建立公用訊息佇列</Title>
    <Author>Microsoft Corporation</Author>
    <Description>在本機電腦上建立公用訊息佇列。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>' Public queue
MessageQueue.Create($PublicQueue$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\os\Messaging\CreateaPrivateMessageQueue.snippet</File>
    <Title>建立私用訊息佇列</Title>
    <Author>Microsoft Corporation</Author>
    <Description>在本機電腦上建立私用訊息佇列。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>' Private queue
MessageQueue.Create($PrivateQueue$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\os\Messaging\PeekatMessages.snippet</File>
    <Title>窺視訊息</Title>
    <Author>Microsoft Corporation</Author>
    <Description>使用 Peek 方法查看佇列上的第一則訊息，而不由佇列中移除該訊息。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim queue As New MessageQueue($QueueName$)
Dim firstMessage As Message
firstMessage = queue.Peek
firstMessage.Formatter = New XmlMessageFormatter(New Type() {$BodyType$})
Dim text As String = firstMessage.Body.ToString</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\os\Messaging\PurgeQueueContents.snippet</File>
    <Title>清除佇列內容</Title>
    <Author>Microsoft Corporation</Author>
    <Description>使用 Purge 方法清除訊息佇列系統中，任何您可存取之佇列的內容。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim queue As New MessageQueue($QueueName$)
queue.Purge()</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\os\Messaging\RetrieveaListofMessageQueuesontheLocalMachine.snippet</File>
    <Title>擷取本機電腦上的訊息佇列清單</Title>
    <Author>Microsoft Corporation</Author>
    <Description>擷取本機電腦上的訊息佇列。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim queues() As MessageQueue
queues = System.Messaging.MessageQueue.GetPublicQueuesByMachine($Server$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\os\Messaging\RetrieveMessageLabels.snippet</File>
    <Title>擷取訊息標記</Title>
    <Author>Microsoft Corporation</Author>
    <Description>擷取訊息陣列並建立訊息標記的陣列。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim queue As New MessageQueue($QueueName$)
Dim msg() As Message
msg = queue.GetAllMessages()

Dim labels(msg.Length - 1) As String
For index As Integer = 0 To msg.Length - 1
    labels(index) = msg(index).Label
Next</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\os\Messaging\SendaMessagetoaMessageQueue.snippet</File>
    <Title>傳送訊息至訊息佇列</Title>
    <Author>Microsoft Corporation</Author>
    <Description>傳送文字訊息至本機電腦上的佇列。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim queue As New MessageQueue($QueueName$)
queue.Send($Body$, $Label$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\os\Messaging\SendandReceiveMessagesProgrammatically.snippet</File>
    <Title>以程式設計的方式傳送和接收訊息</Title>
    <Author>Microsoft Corporation</Author>
    <Description>傳送訊息至本機電腦上的佇列、接收該訊息，以及將主體格式化為字串。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim queue As New System.Messaging.MessageQueue($QueueName$)

' Send a message to the queue.
queue.Send($Message$)

' Wait for the message to arrive, and then remove
' it from the queue.
Dim msg As Message
msg = queue.Receive(New TimeSpan(0, 0, 3))

' Convert the body to a string.
msg.Formatter = New XmlMessageFormatter(New Type() {$BodyType$})
Dim text As String = msg.Body.ToString</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\os\Messaging\SpecifytheFormatterforRetrievedMessages.snippet</File>
    <Title>指定已擷取訊息的格式子</Title>
    <Author>Microsoft Corporation</Author>
    <Description>決定還原序列化訊息主體的方式。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim msg As New Message()
msg.Formatter = _
New XmlMessageFormatter(New Type() {$BodyType$})</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\os\Process\ListApplications.snippet</File>
    <Title>列出應用程式</Title>
    <Author>Microsoft Corporation</Author>
    <Description>建立包含執行中應用程式處理序清單的字串。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim processList() As Process
processList = Process.GetProcesses</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\os\Process\OpenWebpageinDefaultBrowser.snippet</File>
    <Title>在預設瀏覽器中開啟 Web 網頁</Title>
    <Author>Microsoft Corporation</Author>
    <Description>在預設瀏覽器中開啟 Web 網頁。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Process.Start($url$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\os\Process\RunaProgramAssociatedwithaFileType.snippet</File>
    <Title>執行與檔案類型相關聯的程式</Title>
    <Author>Microsoft Corporation</Author>
    <Description>執行與檔案類型相關聯的程式。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Process.Start($programName$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\os\Process\StartanApplication.snippet</File>
    <Title>啟動應用程式</Title>
    <Author>Microsoft Corporation</Author>
    <Description>啟動「記事本」應用程式。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Process.Start($AppName$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\os\Process\StopanApplication.snippet</File>
    <Title>停止應用程式</Title>
    <Author>Microsoft Corporation</Author>
    <Description>停止執行中的應用程式。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim processList() As Process

processList = Process.GetProcessesByName($appName$)        
For Each proc As Process In processList
            If MsgBox("Terminate " &amp; proc.ProcessName &amp; "?", MsgBoxStyle.YesNo, "Terminate?") = MsgBoxResult.Yes Then
                proc.Kill()
            End If
        Next</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\os\Registry\CreateaRegistryKeyandSetItsValues.snippet</File>
    <Title>建立登錄機碼</Title>
    <Author>Microsoft Corporation</Author>
    <Description>建立登錄機碼。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim newKey As RegistryKey 
newKey = My.Computer.Registry.CurrentUser.CreateSubKey($KeyPath$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\os\Registry\DeleteRegistryKey.snippet</File>
    <Title>刪除登錄機碼</Title>
    <Author>Microsoft Corporation</Author>
    <Description>刪除登錄機碼。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Using key As RegistryKey = My.Computer.Registry.LocalMachine.OpenSubKey($SubKey$)
    key.DeleteSubKey($KeyToDelete$)
End Using</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\os\Registry\DetermineWhetheraRegistryKeyExists.snippet</File>
    <Title>判斷登錄機碼是否存在</Title>
    <Author>Microsoft Corporation</Author>
    <Description>查看指定的登錄機碼是否存在。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim exists As Boolean = False
Try
    If My.Computer.Registry.CurrentUser.OpenSubKey($keyPath$) IsNot Nothing Then
        exists = True
    End If
Finally
    My.Computer.Registry.CurrentUser.Close()
End Try</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\os\Registry\ReadRegistryValues.snippet</File>
    <Title>讀取登錄值</Title>
    <Author>Microsoft Corporation</Author>
    <Description>由目前的使用者登錄區讀取字串登錄值。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim keyValue As Object
keyValue = My.Computer.Registry.GetValue($Path$, $Value$, $DefaultValue$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\os\Registry\WriteRegistryValues.snippet</File>
    <Title>撰寫登錄值</Title>
    <Author>Microsoft Corporation</Author>
    <Description>將字串登錄值寫入目前的使用者登錄區。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>My.Computer.Registry.SetValue($Path$, $Key$, $Setting$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\os\Services\ContinueaWindowsService.snippet</File>
    <Title>繼續執行 Windows 服務</Title>
    <Author>Microsoft Corporation</Author>
    <Description>使用 ServiceController 元件繼續執行暫停的服務。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim controller As New ServiceController($serviceName$)
If controller.Status = ServiceControllerStatus.Paused Then
    controller.Continue()
End If</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\os\Services\PauseaWindowsService.snippet</File>
    <Title>暫停 Windows 服務</Title>
    <Author>Microsoft Corporation</Author>
    <Description>使用 ServiceController 元件暫停本機電腦上的服務。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim controller As New ServiceController($serviceName$)
controller.Pause()</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\os\Services\RetrieveaListofServices.snippet</File>
    <Title>擷取服務清單</Title>
    <Author>Microsoft Corporation</Author>
    <Description>建立本機電腦上服務的陣列字串。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim services() As ServiceController
services = ServiceController.GetServices()</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\os\Services\StartaWindowsService.snippet</File>
    <Title>啟動 Windows 服務</Title>
    <Author>Microsoft Corporation</Author>
    <Description>啟動 Windows 服務應用程式。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim controller As New ServiceController($serviceName$)
controller.Start()</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\os\Services\StopaWindowsService.snippet</File>
    <Title>停止 Windows 服務</Title>
    <Author>Microsoft Corporation</Author>
    <Description>停止 Windows 服務應用程式。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim controller As New ServiceController($serviceName$)
controller.Stop()</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\os\SystemInfo\CentralizedResponsetoChangesintheDesktop.snippet</File>
    <Title>回應 Windows 使用者偏好設定的變更</Title>
    <Author>Microsoft Corporation</Author>
    <Description>示範如何處理對 Windows 使用者偏好設定所做的變更</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>    Dim WithEvents systemEvent As SystemEvents

    Private Sub systemEvent_UserPreferenceChanged(ByVal sender As System.Object, ByVal e As UserPreferenceChangedEventArgs) Handles systemEvent.UserPreferenceChanged
        Select Case e.Category
            Case UserPreferenceCategory.Accessibility

            Case UserPreferenceCategory.Color

            Case UserPreferenceCategory.Desktop

            Case UserPreferenceCategory.General

            Case UserPreferenceCategory.Icon

            Case UserPreferenceCategory.Keyboard

            Case UserPreferenceCategory.Locale

            Case UserPreferenceCategory.Menu

            Case UserPreferenceCategory.Mouse

            Case UserPreferenceCategory.Policy

            Case UserPreferenceCategory.Power

            Case UserPreferenceCategory.Screensaver

            Case UserPreferenceCategory.VisualStyle

            Case UserPreferenceCategory.Window
            Case Else
        End Select
    End Sub</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\os\SystemInfo\ChangeRegionalSettings.snippet</File>
    <Title>變更地區設定</Title>
    <Author>Microsoft Corporation</Author>
    <Description>變更地區設定。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>My.Application.ChangeCulture($CultureString$)
My.Application.ChangeUICulture($CultureString$)
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\os\SystemInfo\CreateanEnvironmentVariable.snippet</File>
    <Title>建立環境變數</Title>
    <Author>Microsoft Corporation</Author>
    <Description>建立使用者環境變數以保存程式之間的執行狀態。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Environment.SetEnvironmentVariable($Variable$, $Value$, EnvironmentVariableTarget.User)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\os\SystemInfo\DetectDesktopDisplayResolution.snippet</File>
    <Title>判斷桌面的顯示解析度</Title>
    <Author>Microsoft Corporation</Author>
    <Description>判斷桌面的寬度和長度，以像素為單位。</Description>
    <Keywords>EventLog 元件,記錄事件</Keywords>
    <Language>VB</Language>
    <Code>Dim height = My.Computer.Screen.Bounds.Height
Dim width = My.Computer.Screen.Bounds.Width</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\os\SystemInfo\DeterminetheAmountofSystemMemory.snippet</File>
    <Title>判斷可用的系統記憶體量</Title>
    <Author>Microsoft Corporation</Author>
    <Description>判斷目前可用的系統記憶體量。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim totalPhysicalMemmory = My.Computer.Info.TotalPhysicalMemory</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\os\SystemInfo\DeterminetheCurrentWindowsVersion.snippet</File>
    <Title>判斷目前的 Windows 版本</Title>
    <Author>Microsoft Corporation</Author>
    <Description>判斷正在使用的 Windows 版本</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim osVersion = My.Computer.Info.OSVersion</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\os\SystemInfo\DeterminetheWindowsSystemDirectory.snippet</File>
    <Title>判斷 Windows 系統目錄</Title>
    <Author>Microsoft Corporation</Author>
    <Description>指派系統目錄給字串。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim systemDirectory = System.Environment.SystemDirectory</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\os\SystemInfo\FindtheAmountofDiskSpaceAvailable.snippet</File>
    <Title>尋找可用的磁碟空間量</Title>
    <Author>Microsoft Corporation</Author>
    <Description>傳回指定磁碟上可用的磁碟空間量。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim drive = My.Computer.FileSystem.GetDriveInfo($DriveLetter$)
Dim space = drive.AvailableFreeSpace</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\os\SystemInfo\ListEnvironmentVariables.snippet</File>
    <Title>列出環境變數</Title>
    <Author>Microsoft Corporation</Author>
    <Description>建立列出所有使用者環境變數及其值的字串。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim environmentVariables = Environment.GetEnvironmentVariables($target$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\os\SystemInfo\RetrieveAccessiblityPreferences.snippet</File>
    <Title>擷取協助工具偏好設定</Title>
    <Author>Microsoft Corporation</Author>
    <Description>取得指出使用者是否選擇以高對比模式執行的值。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim contrastOn = SystemInformation.HighContrast</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\os\SystemInfo\RetrieveanEnvironmentVariable.snippet</File>
    <Title>擷取環境變數</Title>
    <Author>Microsoft Corporation</Author>
    <Description>擷取環境變數的值。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim value = My.Application.GetEnvironmentVariable($Variable$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\os\SystemInfo\RetrieveorChangeUserPreferencesforIcons.snippet</File>
    <Title>擷取圖示的使用者偏好設定</Title>
    <Author>Microsoft Corporation</Author>
    <Description>擷取圖示顯示屬性的使用者偏好設定。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim size = SystemInformation.IconSize
Dim spacingSize = SystemInformation.IconSpacingSize
Dim horizontalSpace = SystemInformation.IconHorizontalSpacing
Dim verticalSpace = SystemInformation.IconVerticalSpacing</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\os\SystemInfo\RetrieveorChangeUserPreferencesforKeyboardSettings.snippet</File>
    <Title>擷取鍵盤設定的使用者偏好設定</Title>
    <Author>Microsoft Corporation</Author>
    <Description>擷取使用者的鍵盤設定。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim delay = SystemInformation.KeyboardDelay
Dim speed = SystemInformation.KeyboardSpeed</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\os\SystemInfo\RetrieveorChangeUserPreferencesforMenus.snippet</File>
    <Title>擷取功能表的使用者偏好設定</Title>
    <Author>Microsoft Corporation</Author>
    <Description>擷取數項功能表設定。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim barSize = SystemInformation.MenuBarButtonSize
Dim buttonSize = SystemInformation.MenuButtonSize
Dim checkSize = SystemInformation.MenuCheckSize
Dim menuFont = SystemInformation.MenuFont
Dim height = SystemInformation.MenuHeight
Dim delay = SystemInformation.MenuShowDelay</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\os\SystemInfo\RetrieveorChangeUserPreferencesforMouseSettings.snippet</File>
    <Title>擷取滑鼠設定</Title>
    <Author>Microsoft Corporation</Author>
    <Description>擷取數項滑鼠設定。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim swapped = My.Computer.Mouse.ButtonsSwapped
Dim hasWheel = My.Computer.Mouse.WheelExists
Dim scrollLines = My.Computer.Mouse.WheelScrollLines
Dim buttons = SystemInformation.MouseButtons
Dim hoverSize = SystemInformation.MouseHoverSize
Dim hoverTime = SystemInformation.MouseHoverTime
Dim speed = SystemInformation.MouseSpeed
Dim delta = SystemInformation.MouseWheelScrollDelta
Dim nativeWheel = SystemInformation.NativeMouseWheelSupport</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\os\SystemInfo\RetrieveorChangeUserPreferencesforRegionalSettings.snippet</File>
    <Title>擷取地區設定</Title>
    <Author>Microsoft Corporation</Author>
    <Description>擷取各種地區設定。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim installed = My.Computer.Info.InstalledUICulture
Dim current = My.Application.Culture
Dim ui = My.Application.UICulture</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\os\SystemInfo\RetrieveorChangeUserPreferencesforSystemColors.snippet</File>
    <Title>擷取系統色彩的使用者偏好設定</Title>
    <Author>Microsoft Corporation</Author>
    <Description>僅擷取多種系統色彩設定中的兩種。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim control = SystemColors.Control
Dim window = SystemColors.Window</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\os\SystemInfo\RetrieveorChangeUserPreferencesforSystemPowerSettings.snippet</File>
    <Title>擷取電池使用壽命的相關資訊</Title>
    <Author>Microsoft Corporation</Author>
    <Description>擷取電池剩餘使用壽命的百分比，並且在低於 5 % 時警告使用者。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim power = SystemInformation.PowerStatus
Dim percent= power.BatteryLifePercent
If percent &lt; 0.05 Then
   MsgBox("Percent battery life remaining: " &amp; percent * 100)
End If</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\os\SystemInfo\RetrievetheCurrentTimeontheLocalComputer.snippet</File>
    <Title>擷取本機電腦上目前的時間</Title>
    <Author>Microsoft Corporation</Author>
    <Description>顯示本機電腦上目前的時間。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim localTime = My.Computer.Clock.LocalTime</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\other\connectivity\ConvertaRelativeUritoanAbsoluteUri.snippet</File>
    <Title>將相對 URI 轉換為絕對 URI</Title>
    <Author>Microsoft Corporation</Author>
    <Description>將相對 URI 轉換為絕對 URI。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim baseUri As New Uri($uri1$)
Dim relativeUri As New Uri($uri2$)

' Compose absolute Uri using the base and the relative Uri.
Dim absoluteUri As New Uri(baseUri, relativeUri)

Dim absolute = absoluteUri.AbsolutePath</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\other\connectivity\DetermineiftheNetworkisAvailable.snippet</File>
    <Title>判斷網路是否可用</Title>
    <Author>Microsoft Corporation</Author>
    <Description>判斷本機電腦上的網路連接是否可用。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim isAvailable = My.Computer.Network.IsAvailable</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\other\connectivity\DownloadaFileusingHttp.snippet</File>
    <Title>使用 HTTP 下載檔案</Title>
    <Author>Microsoft Corporation</Author>
    <Description>使用 HTTP 下載檔案。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>My.Computer.Network.DownloadFile($url$, $location$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\other\connectivity\EnumerateSerialPorts.snippet</File>
    <Title>列舉序列埠</Title>
    <Author>Microsoft Corporation</Author>
    <Description>顯示如何使用 My 物件列舉序列埠。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>For Each portName In My.Computer.Ports.SerialPortNames
    
Next</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\other\connectivity\PingAnotherComputer.snippet</File>
    <Title>Ping 另一部電腦</Title>
    <Author>Microsoft Corporation</Author>
    <Description>判斷指定的網站是否有回應。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim siteResponds = My.Computer.Network.Ping($url$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\other\connectivity\ReadDatafromaSerialPort.snippet</File>
    <Title>由序列埠讀取資料</Title>
    <Author>Microsoft Corporation</Author>
    <Description>由序列埠讀取資料。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim buffer As New StringBuilder
Using comPort = My.Computer.Ports.OpenSerialPort($COM$)
    Do
        Dim line = comPort.ReadLine()
        If line Is Nothing Then
            Exit Do
        Else
            buffer.AppendLine(line)
        End If
    Loop
End Using</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\other\connectivity\SendAnEmail.snippet</File>
    <Title>建立電子郵件訊息</Title>
    <Author>Microsoft Corporation</Author>
    <Description>使用 MailMessage 類別傳送電子郵件訊息。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim message As New MailMessage($sender$, $recipient$, $subject$, $message$)
Dim emailClient As New SmtpClient($serverName$)
emailClient.Send(message)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\other\connectivity\UploadAFile.snippet</File>
    <Title>使用 My.Computer.Network 上傳檔案</Title>
    <Author>Microsoft Corporation</Author>
    <Description>將本機檔案上傳到網際網路。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>My.Computer.Network.UploadFile($localFile$, $address$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\other\connectivity\UseaSerialPorttoDialaPhoneNumber.snippet</File>
    <Title>使用 SerialPort 撥出電話號碼</Title>
    <Author>Microsoft Corporation</Author>
    <Description>使用 SerialPort 撥出電話號碼。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Using comPort = My.Computer.Ports.OpenSerialPort($Com$, $Baud$)
    comPort.DtrEnable = True
    comPort.Write($Dial$ &amp; vbCrLf)

    ' All data transfer code goes here.

End Using</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\other\security\ComputetheHashCodeofaPassword.snippet</File>
    <Title>計算密碼的雜湊碼</Title>
    <Author>Microsoft Corporation</Author>
    <Description>計算密碼的 SHA1 雜湊碼。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>        Dim sha1CryptoService As New SHA1CryptoServiceProvider()
        Dim byteValue = Encoding.UTF8.GetBytes($password$)
        Dim hashValue = sha1CryptoService.ComputeHash(byteValue)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\other\security\ComputetheHashCodeofaString.snippet</File>
    <Title>計算字串的雜湊碼</Title>
    <Author>Microsoft Corporation</Author>
    <Description>使用 MD5、SHA1 或 SHA384 演算法計算字串的雜湊。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>    Enum HashMethod
        MD5
        SHA1
        SHA384
    End Enum

    Function GenerateHashDigest(ByVal source As String, ByVal algorithm As HashMethod) As String
        Dim hashAlgorithm As HashAlgorithm = Nothing
        Select Case algorithm
            Case HashMethod.MD5
                hashAlgorithm = New MD5CryptoServiceProvider
            Case HashMethod.SHA1
                hashAlgorithm = New SHA1CryptoServiceProvider
            Case HashMethod.SHA384
                hashAlgorithm = New SHA384Managed
            Case Else
                ' Error case.
        End Select

        Dim byteValue = Encoding.UTF8.GetBytes(source)
        Dim hashValue = hashAlgorithm.ComputeHash(byteValue)
        Return Convert.ToBase64String(hashValue)
    End Function
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\other\security\DecryptaString.snippet</File>
    <Title>解密檔案中的文字</Title>
    <Author>Microsoft Corporation</Author>
    <Description>使用 Rijndael 加密演算法解密檔案中的文字。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Using fStream = File.Open("encrypted.txt", FileMode.OpenOrCreate)
    Dim RijndaelAlg As Rijndael = Rijndael.Create
    Using cStream As New CryptoStream(fStream,
                                  RijndaelAlg.CreateDecryptor(RijndaelAlg.Key, RijndaelAlg.IV),
                                  CryptoStreamMode.Read)

        Using sReader As New StreamReader(cStream)
            Dim plainText = sReader.ReadLine()
        End Using
    End Using
End Using</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\other\security\EncryptaString.snippet</File>
    <Title>加密字串</Title>
    <Author>Microsoft Corporation</Author>
    <Description>使用 Rijndael 加密演算法加密檔案中的文字。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Using fStream = File.Open("encrypted.txt", FileMode.OpenOrCreate)
    Dim RijndaelAlg As Rijndael = Rijndael.Create
    Using cStream As New CryptoStream(fStream,
                                      RijndaelAlg.CreateEncryptor(RijndaelAlg.Key, RijndaelAlg.IV),
                                      CryptoStreamMode.Write)

        Using sWriter As New StreamWriter(cStream)
            sWriter.WriteLine("Text to encrypt")
        End Using
    End Using
End Using</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\other\security\FindtheCurrentUser'sName.snippet</File>
    <Title>尋找目前使用者的名稱</Title>
    <Author>Microsoft Corporation</Author>
    <Description>擷取目前使用者的名稱。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim userName = My.User.Name
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\other\security\GenerateCryptographicallyRandomData.snippet</File>
    <Title>產生密碼編譯隨機資料</Title>
    <Author>Microsoft Corporation</Author>
    <Description>產生密碼編譯隨機資料。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim randomNumGen As RandomNumberGenerator = RNGCryptoServiceProvider.Create()
Dim randomBytes($count$) As Byte

randomNumGen.GetBytes(randomBytes)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\windowsforms\Clipboard\CopyAClassInstanceToTheClipboard.snippet</File>
    <Title>將類別執行個體複製到剪貼簿</Title>
    <Author>Microsoft Corporation</Author>
    <Description>將可序列化類別的執行個體複製到剪貼簿。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>My.Computer.Clipboard.SetData("$className$", $classInstance$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\windowsforms\Clipboard\CopyAnImageToTheClipboard.snippet</File>
    <Title>將影像複製到剪貼簿</Title>
    <Author>Microsoft Corporation</Author>
    <Description>將影像複製到剪貼簿。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>My.Computer.Clipboard.SetImage($image$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\windowsforms\Clipboard\CopyAStringToTheClipboard.snippet</File>
    <Title>將字串複製到剪貼簿</Title>
    <Author>Microsoft Corporation</Author>
    <Description>將字串複製到剪貼簿。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>My.Computer.Clipboard.SetText($text$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\windowsforms\Clipboard\GetAnImageFromTheClipboard.snippet</File>
    <Title>由剪貼簿取得影像</Title>
    <Author>Microsoft Corporation</Author>
    <Description>由剪貼簿取得影像，並儲存至影像物件中。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim picture As Image
If My.Computer.Clipboard.ContainsImage() Then
    picture = My.Computer.Clipboard.GetImage
End If</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\windowsforms\Clipboard\GetaStringFromTheClipboard.snippet</File>
    <Title>由剪貼簿取得字串</Title>
    <Author>Microsoft Corporation</Author>
    <Description>由剪貼簿取得字串，並儲存至字串物件中。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim text As String
If My.Computer.Clipboard.ContainsText Then
    text = My.Computer.Clipboard.GetText
End If</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\windowsforms\Controls\AddaToolTiptoaWindowsFormsControl.snippet</File>
    <Title>在 Windows Form 控制項中加入工具提示</Title>
    <Author>Microsoft Corporation</Author>
    <Description>在 Windows Form 控制項中加入工具提示。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim tooltip As New ToolTip()
tooltip.SetToolTip($control$, $text$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\windowsforms\Controls\Button\ResizeaButtonDynamicallyByMeasuringItsText.snippet</File>
    <Title>測量按鈕的文字以動態調整大小</Title>
    <Author>Microsoft Corporation</Author>
    <Description>測量按鈕的文字並重設其寬度，藉以調整大小。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>' Use a Graphics object to measure the button's text.  Then add blanks to leave space on either side.
Dim surface As Graphics = $buttonName$.CreateGraphics
Dim textSize As SizeF = surface.MeasureString("  " &amp; $buttonName$.Text &amp; "  ", $buttonName$.Font)
surface.Dispose()
$buttonName$.Width = CInt(textSize.Width)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\windowsforms\Controls\Button\ResizeaButtonDynamicallyByUsingAutoSize.snippet</File>
    <Title>使用 AutoSize 動態調整按鈕的大小</Title>
    <Author>Microsoft Corporation</Author>
    <Description>使用 AutoSize 依據按鈕文字的長度動態調整大小。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>$buttonName$.AutoSize = True
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\windowsforms\Controls\Calendar\SelectRangeOfDatesInAMonthCalendar.snippet</File>
    <Title>在 Windows Form MonthCalendar 中選取日期範圍</Title>
    <Author>Microsoft Corporation</Author>
    <Description>在 MonthCalendar 控制項中選取日期範圍。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>$calendar$.SetSelectionRange($startDate$, $endDate$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\windowsforms\Controls\ComboBox\PopulateaComboBoxfromanArrayList.snippet</File>
    <Title>由 ArrayList 填入 ComboBox</Title>
    <Author>Microsoft Corporation</Author>
    <Description>使用 ArrayList 物件當做 ComboBox 控制項的資料來源。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>$comboBoxName$.DataSource = $arrayListName$
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\windowsforms\Controls\ComboBox\PopulateComboBoxfromColumnofaDatabaseTable.snippet</File>
    <Title>由資料庫資料表的資料行填入 ComboBox</Title>
    <Author>Microsoft Corporation</Author>
    <Description>以來自 DataTable 物件的資料填入 ComboBox。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Me.$ComboBoxName$.DataSource = $table$
Me.$ComboBoxName$.DisplayMember = $columnName$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\windowsforms\Controls\ComboBox\ProvideAutomaticTextCompletionforaComboBox.snippet</File>
    <Title>為 ComboBox 提供自動文字完成</Title>
    <Author>Microsoft Corporation</Author>
    <Description>為下拉式方塊提供自動文字完成的功能。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>$comboBoxName$.AutoCompleteMode = AutoCompleteMode.$mode$
$comboBoxName$.AutoCompleteSource = AutoCompleteSource.$source$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\windowsforms\Controls\datagridview\LocktheColumnWidthsofaDataGridView.snippet</File>
    <Title>鎖定 DataGridView 的資料行寬度</Title>
    <Author>Microsoft Corporation</Author>
    <Description>鎖定 DataGridView 的資料行寬度。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>$grid$.AllowUserToResizeColumns = False</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\windowsforms\Controls\ListBox\ClearItemsFromaBoundListBoxControl.snippet</File>
    <Title>清除繫結的 ListBox 控制項項目</Title>
    <Author>Microsoft Corporation</Author>
    <Description>清除繫結的 ListBox 控制項項目。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>$listBoxName$.DataSource = Nothing
$listBoxName$.Items.Clear()</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\windowsforms\Controls\ListBox\LoadDataTableColumnIntoListBoxControl.snippet</File>
    <Title>將資料庫資料表中的資料行載入至 ListBox 控制項</Title>
    <Author>Microsoft Corporation</Author>
    <Description>以 DataTable 物件中的資料填入 ListBox。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>$listBoxName$.DataSource = $table$
$listBoxName$.DisplayMember = $columnName$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\windowsforms\Controls\ListBox\LocateAnItemInAListBoxControl.snippet</File>
    <Title>在 Windows Form ListBox 控制項中尋找項目</Title>
    <Author>Microsoft Corporation</Author>
    <Description>在 ListBox 控制項中尋找字串第一次出現的位置。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim index As Integer
index = $listBoxName$.FindString($searchString$)
If index &lt;&gt; ListBox.NoMatches Then
    ' Item found.
Else
    ' Item not found.
End If</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\windowsforms\Controls\ListBox\SelectAnItemInAListBoxControl.snippet</File>
    <Title>選取 Windows Form ListBox 控制項中的項目</Title>
    <Author>Microsoft Corporation</Author>
    <Description>以程式設計的方式選取 ListBox 控制項中的項目。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>$listBoxName$.SelectedIndex = $index$
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\windowsforms\Controls\ListView\DeterminetheSelectedIteminaListView.snippet</File>
    <Title>判斷 ListView 中選取的項目</Title>
    <Author>Microsoft Corporation</Author>
    <Description>判斷 ListView 中選取的項目，並指派給變數。</Description>
    <Keywords>ListView,ListViewItem,SelectedItems</Keywords>
    <Language>VB</Language>
    <Code>Dim selectedItem As ListViewItem
If $listViewName$.SelectedItems.Count &gt; 0 Then
    selectedItem = $listViewName$.SelectedItems(0)
Else
    selectedItem = Nothing
End If</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\windowsforms\Controls\Menu\AddACheckMarkToAToolStripMenuItem.snippet</File>
    <Title>在 ToolStripMenuItem 中加入核取記號</Title>
    <Author>Microsoft Corporation</Author>
    <Description>在 ToolStripMenuItem 中加入核取記號。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>$menuItemName$.Checked = True</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\windowsforms\Controls\Menu\AddAContextMenuToAWindowsForm.snippet</File>
    <Title>在 Windows Form 中加入操作功能表</Title>
    <Author>Microsoft Corporation</Author>
    <Description>在 Windows Form 中加入操作功能表。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim newMenu As New ContextMenuStrip()
$form$.ContextMenuStrip = newMenu

Dim firstItem As New ToolStripMenuItem()
Dim secondItem As New ToolStripMenuItem()
firstItem.Text = $firstItem$
secondItem.Text = $secondItem$

newMenu.Items.Add(firstItem)
newMenu.Items.Add(secondItem)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\windowsforms\Controls\Menu\AddAShortcutKeyToAToolStripMenuItem.snippet</File>
    <Title>在 ToolStripMenuItem 中加入快速鍵</Title>
    <Author>Microsoft Corporation</Author>
    <Description>在 ToolStripMenuItem 中加入快速鍵。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>$menuItemName$.ShortcutKeys = $shortcutKey$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\windowsforms\Controls\Menu\AddMenuItemsToAWindowsForm.snippet</File>
    <Title>在 Windows Form 中加入功能表項目</Title>
    <Author>Microsoft Corporation</Author>
    <Description>在現有的功能表中加入功能表項目。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim addedMenuStripItem As New ToolStripMenuItem
Dim firstDropDownItem As New ToolStripMenuItem
Dim secondDropDownItem As New ToolStripMenuItem

addedMenuStripItem.Text = $menuName$
firstDropDownItem.Text = $firstDropDownName$
secondDropDownItem.Text = $secondDropDownName$

$menuStripName$.Items.Add(addedMenuStripItem)

addedMenuStripItem.DropDownItems.Add(firstDropDownItem)
addedMenuStripItem.DropDownItems.Add(secondDropDownItem)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\windowsforms\Controls\Menu\DeleteAToolStripMenuItemFromAMenuStrip.snippet</File>
    <Title>由 MenuStrip 刪除 ToolStripMenuItem</Title>
    <Author>Microsoft Corporation</Author>
    <Description>由現有的 MenuStrip 刪除 ToolStripMenuItem。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>$menuStripName$.Items.Remove($menuItemName$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\windowsforms\Controls\ProgressBar\UseAProgressBarToTrackIterations.snippet</File>
    <Title>使用 ProgressBar 追蹤反覆運算</Title>
    <Author>Microsoft Corporation</Author>
    <Description>每次反覆運算時，以固定的量遞增 ProgressBar。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>With $progressBar$
    .Minimum = $minProgress$
    .Maximum = $maxProgress$
    .Value = $initValue$
    .Step = $step$

    For i As Integer = .Minimum To .Maximum
        ' Perform one step of the action being tracked.
        .PerformStep()
    Next i

End With</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\windowsforms\Controls\radiobutton\CreateRadioButtonGroupfromaStringArray.snippet</File>
    <Title>由字串陣列建立 RadioButton 群組</Title>
    <Author>Microsoft Corporation</Author>
    <Description>由字串陣列建立 RadioButton 群組。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim radio As RadioButton
Dim y As Integer = $topY$

For Each button As String In $array$
    radio = New RadioButton()
    With radio
        .Location = New Point($x$, y)
		.Text = button
    End With
    y += $spacing$
    Me.$groupBoxName$.Controls.Add(radio)
Next</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\windowsforms\Controls\RichTextBox\FormatCharactersinBoldinaRichTextBox.snippet</File>
    <Title>在 RichTextBox 控制項中以粗體格式化字元</Title>
    <Author>Microsoft Corporation</Author>
    <Description>在現有的 RichTextBox 控制項中加入「這是粗體字。」這段文字。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>' For more information on the rich text format characters, see: http://www.microsoft.com/downloads/details.aspx?FamilyID=e5b8ebc2-6ad6-49f0-8c90-e4f763e3f04f&amp;DisplayLang=en
$RTFControl$.Rtf = "{\rtf1\ansi This is in \b bold\b0.}"</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\windowsforms\Controls\RichTextBox\LoadanRTFFileintoaRichTextBoxControl.snippet</File>
    <Title>將 RTF 檔載入至 RichTextBox 控制項</Title>
    <Author>Microsoft Corporation</Author>
    <Description>將 RTF 格式的檔案載入 RichTextBox 控制項中。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>$RTFControl$.LoadFile($Filename$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\windowsforms\Controls\RichTextBox\PositiontheCursorinaRichTextBox.snippet</File>
    <Title>將游標放置在 RichTextBox 中</Title>
    <Author>Microsoft Corporation</Author>
    <Description>將游標放置在 RichTextBox 中。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>$text$.Focus()
$text$.Select($Location$, 0)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\windowsforms\Controls\RichTextBox\SavetheContentsofaRichTextBoxtoaRTFFile.snippet</File>
    <Title>將 RichTextBox 的內容儲存至 RTF 檔</Title>
    <Author>Microsoft Corporation</Author>
    <Description>將 RichText 方塊的內容儲存至 RTF 檔。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>$RTFControl$.SaveFile($Filename$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\windowsforms\Controls\textbox\PopulateAMultilineTextBoxWithAStringArray.snippet</File>
    <Title>在多行 TextBox 中輸入多行字串</Title>
    <Author>Microsoft Corporation</Author>
    <Description>在多行文字方塊中輸入多行字串。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>$textboxName$.Lines = $arrayName$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\windowsforms\Controls\TreeView\DeterminetheSelectedNodeinaTreeView.snippet</File>
    <Title>判斷 TreeView 中選取的節點</Title>
    <Author>Microsoft Corporation</Author>
    <Description>判斷 TreeView 控制項中選取的節點，並指派給變數。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim selectedNode As TreeNode
selectedNode = $treeViewName$.SelectedNode</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\windowsforms\Drawing\CreateaBitmapatRunTime.snippet</File>
    <Title>在執行階段建立點陣圖</Title>
    <Author>Microsoft Corporation</Author>
    <Description>建立及填入點陣圖物件，並且在現有的 Windows Form PictureBox 控制項中顯示。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim flag As New Bitmap($Width$, $Height$)
Dim x As Integer
Dim y As Integer
' Make the entire bitmap white.
For x = 0 To flag.Height - 1
    For y = 0 To flag.Width - 1
        flag.SetPixel(x, y, $pixelColor$)
    Next
Next

' Draw a diagonal red stripe.
For x = 0 To flag.Height - 1
    flag.SetPixel(x, x, Color.Red)
Next
$control$.Image = flag


            </Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\windowsforms\Drawing\CreateaCustomBrushDesign.snippet</File>
    <Title>取代為自訂筆刷</Title>
    <Author>Microsoft Corporation</Author>
    <Description>使用影像檔建立 TextureBrush 物件。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim texture As New TextureBrush(Image.FromFile($Filename$))
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\windowsforms\Drawing\CreateaPen.snippet</File>
    <Title>建立畫筆</Title>
    <Author>Microsoft Corporation</Author>
    <Description>建立 Pen 物件。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim tomatoPen As System.Drawing.Pen
tomatoPen = New System.Drawing.Pen($color$)

            </Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\windowsforms\Drawing\CreateaSolidBrush.snippet</File>
    <Title>建立實心筆刷</Title>
    <Author>Microsoft Corporation</Author>
    <Description>建立 SolidBrush 物件。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim aBrush As System.Drawing.SolidBrush
aBrush = New System.Drawing.SolidBrush($color$)

            </Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\windowsforms\Drawing\CreateaTriangleShapeusingaGraphicsPathObject.snippet</File>
    <Title>使用 GraphicsPath 物件建立三角形</Title>
    <Author>Microsoft Corporation</Author>
    <Description>藉由連接一連串的點繪製三角形。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim path As New GraphicsPath()
Dim points() As Point = { _
    New Point($Location1$), _
    New Point($Location2$), _
    New Point($Location3$), _
    New Point($Location4$)}
path.AddLines(points)

Dim surface As Graphics = $PictureBox$.CreateGraphics
surface.DrawPath($Pen$, path)
            </Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\windowsforms\Drawing\DisplayanAnimatedGif.snippet</File>
    <Title>顯示動畫 GIF</Title>
    <Author>Microsoft Corporation</Author>
    <Description>顯示動畫 GIF。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>$pic$.Image = Image.FromFile($image$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\windowsforms\Drawing\DrawaFilledEllipseonaWindowsForm.snippet</File>
    <Title>在 Windows Form 上繪製實心橢圓形</Title>
    <Author>Microsoft Corporation</Author>
    <Description>在表單上繪製實心橢圓形。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Using brush As New SolidBrush($color$)
    Using formGraphics = $form$.CreateGraphics()
        formGraphics.FillEllipse(brush, New Rectangle($location$))
    End Using
End Using
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\windowsforms\Drawing\DrawaFilledRectangleonaWindowsForm.snippet</File>
    <Title>在 Windows Form 上繪製實心矩形</Title>
    <Author>Microsoft Corporation</Author>
    <Description>在表單上繪製實心矩形。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Using redBrush As New SolidBrush($color$), _
    formGraphics As Graphics = $form$.CreateGraphics()
    formGraphics.FillRectangle(redBrush, New Rectangle($size$))
End Using
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\windowsforms\Drawing\DrawaLineonaWindowsForm.snippet</File>
    <Title>在 Windows Form 上繪製線條</Title>
    <Author>Microsoft Corporation</Author>
    <Description>在表單上繪製線條。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Using redPen As New Pen($color$), _
    formGraphics As Graphics = $form$.CreateGraphics()
    formGraphics.DrawLine(redPen, $location$)
End Using
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\windowsforms\Drawing\DrawaPieChart.snippet</File>
    <Title>繪製圓形圖</Title>
    <Author>Microsoft Corporation</Author>
    <Description>繪製圓形圖。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>    ' Shows how to call the DrawPieChart method
    Public Sub DrawPieChartHelper()
        Dim percents = {$Percent1$, $Percent2$, $Percent3$}
        Dim colors = {$Color1$, $Color2$, $Color3$}
        Using graphics = Me.CreateGraphics()
            Dim location As New Point($XLocation$, $YLocation$)
            Dim size As New Size($Width$, $Height$)
            DrawPieChart(percents, colors, graphics, location, size)
        End Using
    End Sub


' Draws a pie chart.
Public Sub DrawPieChart(ByVal percents() As Integer, ByVal colors() As Color,
                        ByVal surface As Graphics, ByVal location As Point,
                        ByVal pieSize As Size)
    
    ' Check if sections add up to 100.
    Dim sum = 0
    For Each percent In percents
        sum += percent
    Next

    If sum &lt;&gt; 100 Then
        Throw New ArgumentException("Percentages do not add up to 100.")
    End If

    If percents.Length &lt;&gt; colors.Length Then
        Throw New ArgumentException("There must be the same number of percents and colors.")
    End If

    Dim percentTotal = 0
    For percent = 0 To percents.Length() - 1
        Using brush As New SolidBrush(colors(percent))
            surface.FillPie(brush,
                            New Rectangle(location, pieSize),
                            CSng(percentTotal * 360 / 100),
                            CSng(percents(percent) * 360 / 100))
        End Using
        
        percentTotal += percents(percent)
    Next
    Return
End Sub</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\windowsforms\Drawing\DrawaRubberBandRectangle.snippet</File>
    <Title>繪製拖放矩形</Title>
    <Author>Microsoft Corporation</Author>
    <Description>在表單上繪製拖放矩形。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim originalPoint As Point
Dim lastPoint As Point
Dim mouseIsDown As Boolean

Public Sub MyMouseDown(ByVal sender As Object, ByVal e As MouseEventArgs) Handles MyBase.MouseDown

    mouseIsDown = True
    originalPoint.X = e.X
    originalPoint.Y = e.Y
    lastPoint.X = -1
    lastPoint.Y = -1

End Sub

Private Sub MyDrawReversibleRectangle(ByVal point1 As Point, ByVal point2 As Point)

    Dim rect As Rectangle

    point1 = PointToScreen(point1)
    point2 = PointToScreen(point2)

    If point1.X &lt; point2.X Then
        rect.X = point1.X
        rect.Width = point2.X - point1.X
    Else
        rect.X = point2.X
        rect.Width = point1.X - point2.X
    End If

    If point1.Y &lt; point2.Y Then
        rect.Y = point1.Y
        rect.Height = point2.Y - point1.Y
    Else
        rect.Y = point2.Y
        rect.Height = point1.Y - point2.Y
    End If

    ControlPaint.DrawReversibleFrame(rect, Color.Yellow, FrameStyle.Thick)

End Sub

Public Sub MyMouseUp(ByVal sender As Object, ByVal e As MouseEventArgs) Handles Me.MouseUp

    mouseIsDown = False

    If lastPoint.X &lt;&gt; -1 Then
        Dim currentPoint As New Point(e.X, e.Y)
        MyDrawReversibleRectangle(originalPoint, lastPoint)
    End If

    lastPoint.X = -1
    lastPoint.Y = -1
    originalPoint.X = -1
    originalPoint.Y = -1

End Sub

Public Sub MyMouseMove(ByVal sender As Object, ByVal e As MouseEventArgs) Handles Me.MouseMove

    Dim currentPoint As New Point(e.X, e.Y)

    If mouseIsDown Then

        If lastPoint.X &lt;&gt; -1 Then
            MyDrawReversibleRectangle(originalPoint, lastPoint)
        End If

        lastPoint = currentPoint
        MyDrawReversibleRectangle(originalPoint, currentPoint)
    End If

End Sub

Protected Overrides Sub OnLoad(ByVal e As EventArgs)
    mouseIsDown = False
End Sub</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\windowsforms\Drawing\DrawaShapewithGradientFill.snippet</File>
    <Title>使用漸層填滿繪製圖案</Title>
    <Author>Microsoft Corporation</Author>
    <Description>使用漸層填滿繪製圖案。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>    Dim rect As New Rectangle($x$, $y$, $width$, $height$)
    Using gc = $form$.CreateGraphics()
        Using gradientBrush As New LinearGradientBrush(rect, $color1$, $color2$, LinearGradientMode.Horizontal)
            gc.FillRectangle(gradientBrush, rect)
        End Using
    End Using
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\windowsforms\Drawing\DrawOutlinedEllipse.snippet</File>
    <Title>繪製含外框的橢圓形</Title>
    <Author>Microsoft Corporation</Author>
    <Description>在表單上繪製含外框的橢圓形。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>    Using redPen As New Pen($color1$), _
        formGraphics As Graphics = $form$.CreateGraphics()
        formGraphics.DrawEllipse(redPen, New Rectangle($location1$))
    End Using
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\windowsforms\Drawing\DrawOutlinedRectangle.snippet</File>
    <Title>繪製含外框的矩形</Title>
    <Author>Microsoft Corporation</Author>
    <Description>在表單上繪製含外框的矩形。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>    Using redPen As New Pen($color2$), _
        formGraphics As Graphics = $form$.CreateGraphics()
        formGraphics.DrawRectangle(redPen, New Rectangle($location2$))
    End Using</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\windowsforms\Drawing\DrawTextonaWindowsForm.snippet</File>
    <Title>在 Windows Form 上繪製文字</Title>
    <Author>Microsoft Corporation</Author>
    <Description>在表單上繪製文字。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>    Dim drawFormat As New StringFormat()

    Using formGraphics As Graphics = $form$.CreateGraphics(), _
        drawFont As New System.Drawing.Font($FontName$, $FontSize$), _
        drawBrush As New SolidBrush($color$)

        formGraphics.DrawString($text$, drawFont, drawBrush, _
            $Xlocation$, $Ylocation$, drawFormat)
    End Using
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\windowsforms\Drawing\DrawVerticalTextonaWindowsForm.snippet</File>
    <Title>在 Windows Form 上繪製垂直文字</Title>
    <Author>Microsoft Corporation</Author>
    <Description>在表單上以垂直方向繪製文字。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>    Dim drawFormat As New StringFormat()

    Using formGraphics As Graphics = $form$.CreateGraphics(), _
        drawFont As New System.Drawing.Font($FontName$, $FontSize$), _
        drawBrush As New SolidBrush($color$)

        drawFormat.FormatFlags = StringFormatFlags.DirectionVertical
        formGraphics.DrawString($text$, drawFont, drawBrush, _
            $Xlocation$, $Ylocation$, drawFormat)
    End Using
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\windowsforms\Fonts\CreateaFont.snippet</File>
    <Title>建立字型</Title>
    <Author>Microsoft Corporation</Author>
    <Description>使用 Font 建構函式的三個多載建立字型。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim italicFont As New Font($fontName$, $fontSize$, $fontStyle$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\windowsforms\Forms\AddaWindowsFormsControlatRunTime.snippet</File>
    <Title>在執行階段加入 Windows Form 控制項</Title>
    <Author>Microsoft Corporation</Author>
    <Description>在執行階段建立 Windows Form TextBox 控制項的新執行個體。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>    Dim $controlName$ As New $controlType$()
    With $controlName$
        .Location = New Point($locationX$, $locationY$)
        .Size = New Size($width$, $height$)
        .TabIndex = $tabIndex$
        .Text = $text$
    End With
    Controls.Add($controlName$)

</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\windowsforms\Forms\ArrangeMDIChildForms.snippet</File>
    <Title>排列 MDI 子表單</Title>
    <Author>Microsoft Corporation</Author>
    <Description>以階層式配置排列子表單。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>$form$.LayoutMdi(MdiLayout.Cascade)
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\windowsforms\Forms\ConvertMouseCoordinatestoScreenCoordinates.snippet</File>
    <Title>將滑鼠座標轉換成螢幕座標</Title>
    <Author>Microsoft Corporation</Author>
    <Description>將滑鼠座標由滑鼠事件轉換成螢幕座標。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Private Sub $formName$_MouseDown(ByVal sender As Object, _
ByVal e As System.Windows.Forms.MouseEventArgs) _
Handles $formName$.MouseDown
    Dim screenPoint As Point
    screenPoint = $formName$.PointToScreen(New Point(e.X, e.Y))
End Sub</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\windowsforms\Forms\CreateMDIChildForms.snippet</File>
    <Title>建立 MDI 子表單</Title>
    <Author>Microsoft Corporation</Author>
    <Description>建立及顯示新的 MDI 子表單。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim newMDIChild As New Form()
newMDIChild.MdiParent = $formName$
newMDIChild.Show()
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\windowsforms\Forms\CreateTransparentWindowsForms.snippet</File>
    <Title>建立透明的 Windows Form</Title>
    <Author>Microsoft Corporation</Author>
    <Description>將表單的透明度設定為透明。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>$formName$.Opacity = $opacity$

            </Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\windowsforms\Forms\DeterminetheActiveMDIChild.snippet</File>
    <Title>找出現用的 MDI 子表單和控制項</Title>
    <Author>Microsoft Corporation</Author>
    <Description>擷取現用的 MDI 子表單，以及子表單上的現用控制項。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim activeChild As Form = $formName$.ActiveMdiChild

Dim activeControl As Control = Nothing
If Not activeChild IsNot Nothing Then
    activeControl = activeChild.ActiveControl
End If
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\windowsforms\Forms\DeterminewhichControlonaWindowsFormisSelected.snippet</File>
    <Title>判斷 Windows Form 上選取的控制項</Title>
    <Author>Microsoft Corporation</Author>
    <Description>尋找在表單上選取的控制項。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>$selectedControl$ = $formName$.ActiveControl</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\windowsforms\Forms\DetermineWhichModifierKeyWasPressed.snippet</File>
    <Title>判斷按下的輔助按鍵</Title>
    <Author>Microsoft Corporation</Author>
    <Description>監視輔助按鍵，例如 SHIFT、ALT 和 CTRL 鍵。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Private Sub $formName$_KeyPress(ByVal sender As Object, _
ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles $formName$.KeyPress

    If (Control.ModifierKeys And $modifierKey$) = $modifierKey$ Then

    End If

End Sub
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\windowsforms\Forms\DisplayOneWindowsFormfromAnother.snippet</File>
    <Title>顯示 Windows Form </Title>
    <Author>Microsoft Corporation</Author>
    <Description>顯示 Windows Form。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>$formName$.Show()</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\windowsforms\Forms\EliminatetheTitleBar.snippet</File>
    <Title>排除表單中的 TitleBar</Title>
    <Author>Microsoft Corporation</Author>
    <Description>排除表單中的 TitleBar。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>$formName$.FormBorderStyle = Windows.Forms.FormBorderStyle.None</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\windowsforms\Forms\KeepaWindowsFormonTop.snippet</File>
    <Title>將 Windows Form 保留在最上層</Title>
    <Author>Microsoft Corporation</Author>
    <Description>說明 TopMost 屬性如何控制表單是否要保留為最上層。最上層表單會一直浮在其他非最上層表單上方，即使不是現用表單時也一樣。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>$formName$.TopMost = $topboolean$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\windowsforms\Forms\MoveaWindowbyDraggingtheClientAreaoftheForm.snippet</File>
    <Title>拖曳表單的工作區以移動視窗</Title>
    <Author>Microsoft Corporation</Author>
    <Description>使用滑鼠拖曳表單的任何部分，即可移動該表單。當表單沒有標題列時，這項功能特別實用。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim mouseOffset As Point

Private Sub $formName$_MouseDown(ByVal sender As Object, ByVal e As MouseEventArgs) Handles MyBase.MouseDown
    $mouseOffset$ = New Point(-e.X, -e.Y)
End Sub

Private Sub $formName$_MouseMove(ByVal sender As Object, ByVal e As MouseEventArgs) Handles MyBase.MouseMove

    If e.Button = MouseButtons.Left Then
        Dim mousePos = Control.MousePosition
        mousePos.Offset($mouseOffset$.X, $mouseOffset$.Y)
        Location = mousePos
    End If
End Sub</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\windowsforms\Forms\PlayaBeepFromaWindowsForm.snippet</File>
    <Title>從 Windows Form 播放嗶聲</Title>
    <Author>Microsoft Corporation</Author>
    <Description>播放嗶聲。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Beep()
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\windowsforms\Forms\ResizeWindowsForms.snippet</File>
    <Title>調整 Windows Form 大小</Title>
    <Author>Microsoft Corporation</Author>
    <Description>調整表單大小。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>$formName$.Size = New Size($newWidth$, $newHeight$)
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\windowsforms\Forms\RestrictaControl'sAcceptableKeystrokes.snippet</File>
    <Title>限制控制項可接受的按鍵</Title>
    <Author>Microsoft Corporation</Author>
    <Description>覆寫 Windows Form 控制項預設的 ProcessCmdKey 函式，並限制使用者只能以數值和巡覽鍵輸入。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Class $restrictedControlClass$
    Inherits $baseClass$
    Const WM_KEYDOWN As Integer = &amp;H100

    Protected Overrides Function ProcessCmdKey _
        (ByRef msg As Message, _
        ByVal keyData As Keys) As Boolean

        If msg.Msg = WM_KEYDOWN Then
            Return Not ((keyData &gt;= Keys.D0 And keyData &lt;= Keys.D9) _
                Or keyData = Keys.Back Or keyData = Keys.Left _
                Or keyData = Keys.Right Or keyData = Keys.Up _
                Or keyData = Keys.Down Or keyData = Keys.Delete
        End If
        Return MyBase.ProcessCmdKey(msg, keyData)
    End Function
End Class
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\windowsforms\Forms\RetrieveInformationfromtheParentFormofaDialogBox.snippet</File>
    <Title>由對話方塊的 MDI 父表單擷取資訊</Title>
    <Author>Microsoft Corporation</Author>
    <Description>由 MDI 表單擷取資訊。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>$text$ = $formName$.ParentForm.Text
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\windowsforms\Forms\RetrievetheResultforDialogBoxes.snippet</File>
    <Title>擷取對話方塊的結果</Title>
    <Author>Microsoft Corporation</Author>
    <Description>決定對話方塊關閉的方式。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>If $dialogName$.ShowDialog = $dialogResult$ Then

End If
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\windowsforms\Forms\SettheScreenLocationofWindowsForms.snippet</File>
    <Title>設定 Windows Form 的畫面位置</Title>
    <Author>Microsoft Corporation</Author>
    <Description>設定表單左上角的位置，以像素為單位。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>$formName$.DesktopLocation = New Point($newX$, $newY$)
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\windowsforms\Sound\LoopaSoundPlayingonaWindowsForm.snippet</File>
    <Title>循環 Windows Form 上播放的音效</Title>
    <Author>Microsoft Corporation</Author>
    <Description>在背景循環播放音效。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>My.Computer.Audio.Play($FileName$, AudioPlayMode.BackgroundLoop)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\windowsforms\Sound\PlayaSound.snippet</File>
    <Title>播放音效</Title>
    <Author>Microsoft Corporation</Author>
    <Description>播放檔案中的音效。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>My.Computer.Audio.Play($filename$,  AudioPlayMode.WaitToComplete)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\windowsforms\Sound\StopPlayingSoundsintheBackground.snippet</File>
    <Title>停止在背景播放音效</Title>
    <Author>Microsoft Corporation</Author>
    <Description>停止在背景播放的音效。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>My.Computer.Audio.Stop()</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\WPF\DependencyProperty Attached.snippet</File>
    <Title>Add a DependencyProperty Registration (Attached)</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Adds code to register an attached DependencyProperty. This snippet must be added to a class that derives from DependencyObject.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>
          Public Shared Function Get$propertyName$(ByVal element As DependencyObject) As $propertyType$
              If element Is Nothing Then
                  Throw New ArgumentNullException("element")
              End If

              Return element.GetValue($propertyName$Property)
          End Function

          Public Shared Sub Set$propertyName$(ByVal element As DependencyObject, ByVal value As $propertyType$)
              If element Is Nothing Then
                  Throw New ArgumentNullException("element")
              End If

              element.SetValue($propertyName$Property, value)
          End Sub

          Public Shared ReadOnly $propertyName$Property As _
                                 DependencyProperty = DependencyProperty.RegisterAttached("$propertyName$", _
                                 GetType($propertyType$), GetType($ownertype$), _
                                 New PropertyMetadata($defaultValue$))
          </Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\WPF\DependencyProperty ReadOnly.snippet</File>
    <Title>Add a DependencyProperty Registration (Read-Only)</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Adds code to register a read-only DependencyProperty. This snippet must be added to a class that derives from DependencyObject.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>
          Public ReadOnly Property $propertyName$ As $propertyType$
              Get
                  Return GetValue($ownerType$.$propertyName$Property)
              End Get
          End Property

          Private Shared ReadOnly $propertyName$PropertyKey As DependencyPropertyKey = _
                                  DependencyProperty.RegisterReadOnly ("$propertyName$", _
                                  GetType($propertyType$), GetType($ownerType$), _
                                  New PropertyMetadata($defaultValue$))

          Public Shared ReadOnly $propertyName$Property As DependencyProperty = _
                                 $propertyName$PropertyKey.DependencyProperty
        </Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\WPF\DependencyProperty.snippet</File>
    <Title>Add a DependencyProperty Registration</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Adds code to register a read-write DependencyProperty. This snippet must be added to a class that derives from DependencyObject.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>
          Public Property $propertyName$ As $propertyType$
              Get
                Return GetValue($propertyName$Property)
              End Get
              
              Set(ByVal value As $propertyType$)
                  SetValue($propertyName$Property, value)
              End Set
          End Property

          Public Shared ReadOnly $propertyName$Property As DependencyProperty = _
                                 DependencyProperty.Register("$propertyName$", _
                                 GetType($propertyType$), GetType($ownerType$), _
                                 New PropertyMetadata($defaultValue$))
          </Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\WPF\RoutedCommand.snippet</File>
    <Title>Add a RoutedCommand Registration</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Adds code to register a RoutedCommand.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>
          Public Shared ReadOnly $commandName$Command As RoutedCommand = _
                                 New RoutedCommand("$commandName$", _
                                 GetType($ownerType$))
                                 </Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\WPF\RoutedCommandHandlers.snippet</File>
    <Title>Add a RoutedCommand CanExecute and Executed Handler</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Adds CanExecute and Executed handlers. To function, these handlers must be hooked to a CommandBinding.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>
          Private Sub OnCanExecute$commandName$(ByVal sender As Object, ByVal e As CanExecuteRoutedEventArgs)
              ' Add actions to ensure that the command can execute.
              ' Remove this exception after the appropriate code is added.
              Throw New NotImplementedException()

              '' Example action:
              ' If condition Then
              '   ' The condition for the command was met.
                  ' e.CanExecute = True
                  ' e.Handled = True
              ' End If
          End Sub

          Private Sub OnExecute$commandName$(ByVal sender As Object, ByVal e As ExecutedRoutedEventArgs)
              ' Perform the actions associated with the command.
              ' Remove this exception after the appropriate code is added.
              Throw New NotImplementedException()

              ' Work was done for this command. Mark the event as handled.
              e.Handled = True
          End Sub</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VB\Snippets\1028\WPF\RoutedEvent.snippet</File>
    <Title>Add a RoutedEvent Registration</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Adds code to register a RoutedEvent. This snippet must be added to a class that derives from UIElement.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>
          Public Custom Event $eventName$ As $eventHandlerType$

              AddHandler(ByVal value As $eventHandlerType$)
                  Me.AddHandler($eventName$Event, value)
              End AddHandler

              RemoveHandler(ByVal value As $eventHandlerType$)
                  Me.RemoveHandler($eventName$Event, value)
              End RemoveHandler

	      RaiseEvent(ByVal sender As Object, ByVal e As RoutedEventArgs)
        	  Me.RaiseEvent(e)
	      End RaiseEvent
          End Event

    Public Shared ReadOnly $eventName$Event As RoutedEvent = _
                      EventManager.RegisterRoutedEvent("$eventName$", _
                      RoutingStrategy.Bubble, _
                      GetType($eventHandlerType$), GetType($ownerType$))
          </Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>c:\program files (x86)\microsoft visual studio\2019\professional\common7\ide\extensions\microsoft\web\mvc4\Snippets\VB\1028\mvcaction.snippet</File>
    <Title>mvcaction4</Title>
    <Author>Microsoft Corporation</Author>
    <Description>動作的程式碼片段。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Public Function $name$() As ActionResult
    Return View()
End Function</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>c:\program files (x86)\microsoft visual studio\2019\professional\common7\ide\extensions\microsoft\web\mvc4\Snippets\VB\1028\mvcpostaction.snippet</File>
    <Title>mvcpostaction4</Title>
    <Author>Microsoft Corporation</Author>
    <Description>經由 HTTP Post 之動作的程式碼片段。</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>&lt;HttpPost()&gt; _
Public Function $name$() As ActionResult
    Return View()
End Function</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Common7\IDE\VC\Snippets\1028\Visual C++\class.snippet</File>
    <Title>class</Title>
    <Author>Microsoft Corporation</Author>
    <Description>類別的程式碼片段</Description>
    <Keywords />
    <Language>cpp</Language>
    <Code>class $name$
				{
				public:
					$name$();
					~$name$();

				private:
					$selected$$end$
				};

				$name$::$name$()
				{
				}

				$name$::~$name$()
				{
				}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Common7\IDE\VC\Snippets\1028\Visual C++\classi.snippet</File>
    <Title>classi</Title>
    <Author>Microsoft Corporation</Author>
    <Description>具有內嵌建構函式/解構函式的類別的程式碼片段</Description>
    <Keywords />
    <Language>cpp</Language>
    <Code>class $name$
				{
				public:
					$name$()
					{
					}
					
					~$name$()
					{
					}

				private:
					$selected$$end$
				};
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Common7\IDE\VC\Snippets\1028\Visual C++\ctor.snippet</File>
    <Title>ctor</Title>
    <Author>Microsoft Corporation</Author>
    <Description>建構函式的程式碼片段</Description>
    <Keywords />
    <Language>cpp</Language>
    <Code>$typename$()
				{
					$end$
				}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Common7\IDE\VC\Snippets\1028\Visual C++\do.snippet</File>
    <Title>do</Title>
    <Author>Microsoft Corporation</Author>
    <Description>do...while 迴圈的程式碼片段</Description>
    <Keywords />
    <Language>cpp</Language>
    <Code>do
	{
	        $selected$ $end$
	} while ($expression$);</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Common7\IDE\VC\Snippets\1028\Visual C++\else.snippet</File>
    <Title>else</Title>
    <Author>Microsoft Corporation</Author>
    <Description>else 陳述式的程式碼片段</Description>
    <Keywords />
    <Language>cpp</Language>
    <Code>else
	{
	        $selected$ $end$
	}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Common7\IDE\VC\Snippets\1028\Visual C++\enum.snippet</File>
    <Title>enum</Title>
    <Author>Microsoft Corporation</Author>
    <Description>列舉的程式碼片段</Description>
    <Keywords />
    <Language>cpp</Language>
    <Code>enum $name$
	{
	        $selected$ $end$
	};</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Common7\IDE\VC\Snippets\1028\Visual C++\enumclass.snippet</File>
    <Title>enum class</Title>
    <Author>Microsoft Corporation</Author>
    <Description>列舉類別的程式碼片段</Description>
    <Keywords />
    <Language>cpp</Language>
    <Code>enum class $name$
	{
		$selected$$end$
	};</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Common7\IDE\VC\Snippets\1028\Visual C++\for.snippet</File>
    <Title>for</Title>
    <Author>Microsoft Corporation</Author>
    <Description>'for' 迴圈的程式碼片段</Description>
    <Keywords />
    <Language>cpp</Language>
    <Code>for ($type$ $index$ = 0; $index$ &lt; $max$; $index$++)
		{
			$selected$ $end$
		}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Common7\IDE\VC\Snippets\1028\Visual C++\foreach.snippet</File>
    <Title>foreach</Title>
    <Author>Microsoft Corporation</Author>
    <Description>foreach 陳述式的程式碼片段</Description>
    <Keywords />
    <Language>cpp</Language>
    <Code>for each ($type$ $indentifier$ in $collection$)
	{
		$selected$ $end$
	}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Common7\IDE\VC\Snippets\1028\Visual C++\forr.snippet</File>
    <Title>forr</Title>
    <Author>Microsoft Corporation</Author>
    <Description>反向 'for' 迴圈的程式碼片段</Description>
    <Keywords />
    <Language>cpp</Language>
    <Code>for (int $index$ = $max$ - 1; $index$ &gt;= 0 ; $index$--)
			{
			$selected$ $end$
			}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Common7\IDE\VC\Snippets\1028\Visual C++\if.snippet</File>
    <Title>if</Title>
    <Author>Microsoft Corporation</Author>
    <Description>if 陳述式的程式碼片段</Description>
    <Keywords />
    <Language>cpp</Language>
    <Code>if ($expression$)
	{
		$selected$ $end$
	}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Common7\IDE\VC\Snippets\1028\Visual C++\interface.snippet</File>
    <Title>interface</Title>
    <Author>Microsoft Corporation</Author>
    <Description>介面的程式碼片段</Description>
    <Keywords />
    <Language>cpp</Language>
    <Code>__interface I$name$
	{
		$selected$$end$
	};</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Common7\IDE\VC\Snippets\1028\Visual C++\namespace.snippet</File>
    <Title>namespace</Title>
    <Author>Microsoft Corporation</Author>
    <Description>命名空間的程式碼片段</Description>
    <Keywords />
    <Language>cpp</Language>
    <Code>namespace $name$
	{
		$selected$ $end$
	}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Common7\IDE\VC\Snippets\1028\Visual C++\pp_if.snippet</File>
    <Title>#if</Title>
    <Author>Microsoft Corporation</Author>
    <Description>#if 的程式碼片段</Description>
    <Keywords />
    <Language>cpp</Language>
    <Code>#if $expression$
				$selected$ $end$ 
				#endif // $expression$
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Common7\IDE\VC\Snippets\1028\Visual C++\pp_ifdef.snippet</File>
    <Title>#ifdef</Title>
    <Author>Microsoft Corporation</Author>
    <Description>#ifdef 的程式碼片段</Description>
    <Keywords />
    <Language>cpp</Language>
    <Code>#ifdef $expression$
				$selected$ $end$ 
				#endif // $expression$
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Common7\IDE\VC\Snippets\1028\Visual C++\pp_ifndef.snippet</File>
    <Title>#ifndef</Title>
    <Author>Microsoft Corporation</Author>
    <Description>#ifndef 的程式碼片段</Description>
    <Keywords />
    <Language>cpp</Language>
    <Code>#ifndef $expression$
				$selected$ $end$ 
				#endif // !$expression$
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Common7\IDE\VC\Snippets\1028\Visual C++\pp_region.snippet</File>
    <Title>#region</Title>
    <Author>Microsoft Corporation</Author>
    <Description>#region 的程式碼片段</Description>
    <Keywords />
    <Language>cpp</Language>
    <Code>#pragma region $name$
				$selected$ $end$ 
				#pragma endregion
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Common7\IDE\VC\Snippets\1028\Visual C++\rfor.snippet</File>
    <Title>rfor</Title>
    <Author>Microsoft Corporation</Author>
    <Description>'range-based for' 迴圈的程式碼片段</Description>
    <Keywords />
    <Language>cpp</Language>
    <Code>for (auto&amp; $variable$ : $range$)
	{
		$selected$ $end$
	}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Common7\IDE\VC\Snippets\1028\Visual C++\struct.snippet</File>
    <Title>struct</Title>
    <Author>Microsoft Corporation</Author>
    <Description>結構的程式碼片段</Description>
    <Keywords />
    <Language>cpp</Language>
    <Code>struct $name$
	{
		$selected$$end$
	};</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Common7\IDE\VC\Snippets\1028\Visual C++\switch.snippet</File>
    <Title>switch</Title>
    <Author>Microsoft Corporation</Author>
    <Description>switch 陳述式的程式碼片段</Description>
    <Keywords />
    <Language>cpp</Language>
    <Code>switch ($expression$)
	{
		$cases$$end$
	}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Common7\IDE\VC\Snippets\1028\Visual C++\try.snippet</File>
    <Title>try</Title>
    <Author>Microsoft Corporation</Author>
    <Description>try catch 的程式碼片段</Description>
    <Keywords />
    <Language>cpp</Language>
    <Code>try
	{
		$selected$
	}
	catch (const std::exception&amp;)
	{
		$end$
	}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Common7\IDE\VC\Snippets\1028\Visual C++\union.snippet</File>
    <Title>union</Title>
    <Author>Microsoft Corporation</Author>
    <Description>等位的程式碼片段</Description>
    <Keywords />
    <Language>cpp</Language>
    <Code>union $name$
	{
		$selected$$end$
	};</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Common7\IDE\VC\Snippets\1028\Visual C++\while.snippet</File>
    <Title>while</Title>
    <Author>Microsoft Corporation</Author>
    <Description>while 迴圈的程式碼片段</Description>
    <Keywords />
    <Language>cpp</Language>
    <Code>while ($expression$)
	{
	        $selected$ $end$
	}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Common7\IDE\VC\Snippets\1028\Visual C++\~.snippet</File>
    <Title>~</Title>
    <Author>Microsoft Corporation</Author>
    <Description>解構函式的程式碼片段</Description>
    <Keywords />
    <Language>cpp</Language>
    <Code>~$typename$()
	{
		$end$
	}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC#\Snippets\1028\Visual C#\attribute.snippet</File>
    <Title>attribute</Title>
    <Author>Microsoft Corporation</Author>
    <Description>使用建議模式之屬性的程式碼片段</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>[$SystemAttributeUsage$($SystemAttributeTargets$.$target$, Inherited = $inherited$, AllowMultiple = $allowmultiple$)]
sealed class $name$Attribute : $SystemAttribute$
{
    // See the attribute guidelines at 
    //  http://go.microsoft.com/fwlink/?LinkId=85236
    readonly string positionalString;
    
   // This is a positional argument
   public $name$Attribute (string positionalString) 
   { 
        this.positionalString = positionalString;
        
       // TODO: Implement code here
       $end$throw new $Exception$();       
   }
   
    public string PositionalString
    {
        get { return positionalString; }
    }
   
   // This is a named argument
   public int NamedInt { get; set; } 
}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC#\Snippets\1028\Visual C#\checked.snippet</File>
    <Title>checked</Title>
    <Author>Microsoft Corporation</Author>
    <Description>已核取區塊的程式碼片段</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>checked
	{
		$selected$ $end$
	}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC#\Snippets\1028\Visual C#\class.snippet</File>
    <Title>class</Title>
    <Author>Microsoft Corporation</Author>
    <Description>類別的程式碼片段</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>class $name$
	{
		$selected$$end$
	}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC#\Snippets\1028\Visual C#\ctor.snippet</File>
    <Title>ctor</Title>
    <Author>Microsoft Corporation</Author>
    <Description>建構函式的程式碼片段</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>public $classname$ ()
	{
		$end$
	}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC#\Snippets\1028\Visual C#\cw.snippet</File>
    <Title>cw</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Console.WriteLine 的程式碼片段</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>$SystemConsole$.WriteLine($end$);</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC#\Snippets\1028\Visual C#\do.snippet</File>
    <Title>do</Title>
    <Author>Microsoft Corporation</Author>
    <Description>do...while 迴圈的程式碼片段</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>do
	{
	        $selected$ $end$
	} while ($expression$);</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC#\Snippets\1028\Visual C#\else.snippet</File>
    <Title>else</Title>
    <Author>Microsoft Corporation</Author>
    <Description>else 陳述式的程式碼片段</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>else
	{
	        $selected$ $end$
	}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC#\Snippets\1028\Visual C#\enum.snippet</File>
    <Title>enum</Title>
    <Author>Microsoft Corporation</Author>
    <Description>列舉的程式碼片段</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>enum $name$
	{
	        $selected$ $end$
	}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC#\Snippets\1028\Visual C#\equals.snippet</File>
    <Title>equals</Title>
    <Author>Microsoft Corporation</Author>
    <Description>根據方針實作 Equals() 的程式碼片段</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>// override object.Equals
    public override bool Equals (object obj)
    {
        //       
        // See the full list of guidelines at
        //   http://go.microsoft.com/fwlink/?LinkID=85237  
        // and also the guidance for operator== at
        //   http://go.microsoft.com/fwlink/?LinkId=85238
        //

        if (obj == null || GetType() != obj.GetType()) 
        {
            return false;
        }
        
        // TODO: write your implementation of Equals() here
        throw new $Exception$();
        return base.Equals (obj);$end$ 
    }
    
    // override object.GetHashCode
    public override int GetHashCode()
    {
        // TODO: write your implementation of GetHashCode() here
        throw new $Exception$();
        return base.GetHashCode();
    }</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC#\Snippets\1028\Visual C#\exception.snippet</File>
    <Title>exception</Title>
    <Author>Microsoft Corporation</Author>
    <Description>例外狀況的程式碼片段</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>[$SystemSerializable$]
public class $newException$Exception : $baseException$
{
  public $newException$Exception() { }
  public $newException$Exception( string message ) : base( message ) { }
  public $newException$Exception( string message, $SystemException$ inner ) : base( message, inner ) { }
  protected $newException$Exception( 
	$SystemRuntimeSerializationSerializationInfo$ info, 
	$SystemRuntimeSerializationStreamingContext$ context ) : base( info, context ) { }
}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC#\Snippets\1028\Visual C#\for.snippet</File>
    <Title>for</Title>
    <Author>Microsoft Corporation</Author>
    <Description>'for' 迴圈的程式碼片段</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>for (int $index$ = 0; $index$ &lt; $max$; $index$++)
			{
			$selected$ $end$
			}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC#\Snippets\1028\Visual C#\foreach.snippet</File>
    <Title>foreach</Title>
    <Author>Microsoft Corporation</Author>
    <Description>foreach 陳述式的程式碼片段</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>foreach ($type$ $identifier$ in $collection$)
	{
		$selected$ $end$
	}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC#\Snippets\1028\Visual C#\forr.snippet</File>
    <Title>forr</Title>
    <Author>Microsoft Corporation</Author>
    <Description>反向 'for' 迴圈的程式碼片段</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>for (int $index$ = $max$ - 1; $index$ &gt;= 0 ; $index$--)
			{
			$selected$ $end$
			}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC#\Snippets\1028\Visual C#\if.snippet</File>
    <Title>if</Title>
    <Author>Microsoft Corporation</Author>
    <Description>if 陳述式的程式碼片段</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>if ($expression$)
	{
		$selected$ $end$
	}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC#\Snippets\1028\Visual C#\indexer.snippet</File>
    <Title>indexer</Title>
    <Author>Microsoft Corporation</Author>
    <Description>索引子的程式碼片段</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>$access$ $type$ this[$indextype$ index]
	{
		get {$end$ /* return the specified index here */ }
		set { /* set the specified index to value here */ }
	}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC#\Snippets\1028\Visual C#\interface.snippet</File>
    <Title>interface</Title>
    <Author>Microsoft Corporation</Author>
    <Description>介面的程式碼片段</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>interface I$name$
	{
		$selected$$end$
	}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC#\Snippets\1028\Visual C#\invoke.snippet</File>
    <Title>invoke</Title>
    <Author>Microsoft Corporation</Author>
    <Description>安全叫用事件的程式碼片段</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>$DelegateType$ temp = $event$;
if (temp != null)
{
temp($end$);
}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC#\Snippets\1028\Visual C#\iterator.snippet</File>
    <Title>iterator</Title>
    <Author>Microsoft Corporation</Author>
    <Description>簡易迭代器的程式碼片段</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>public $SystemCollectionsGenericIEnumeratorG$&lt;$type$&gt; GetEnumerator()
{
    $end$throw new $Exception$();
    yield return default($type$);
}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC#\Snippets\1028\Visual C#\iterindex.snippet</File>
    <Title>iterindex</Title>
    <Author>Microsoft Corporation</Author>
    <Description>使用巢狀類別的 'named' 迭代器/索引子組的程式碼片段</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>public $name$Iterator $name$
        {
            get
            {
                return new $name$Iterator(this);
            }
        }

        public class $name$Iterator
        {
            readonly $outer$ outer;

            internal $name$Iterator($outer$ outer)
            {
                this.outer = outer;
            }

            // TODO: provide an appropriate implementation here
            public int Length { get { return 1; } }

            public $type$ this[int index]
            {
                get
                {
                    //
                    // TODO: implement indexer here
                    //
                    // you have full access to $outer$ privates
                    //
                    $end$throw new $Exception$();
                    return default($type$);
                }
            }

            public $SystemCollectionsGenericIEnumeratorG$&lt;$type$&gt; GetEnumerator()
            {
                for (int i = 0; i &lt; this.Length; i++)
                {				 
                    yield return this[i];
                }
            }
        }</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC#\Snippets\1028\Visual C#\lock.snippet</File>
    <Title>lock</Title>
    <Author>Microsoft Corporation</Author>
    <Description>lock 陳述式的程式碼片段</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>lock ($expression$)
	{
		$selected$ $end$
	}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC#\Snippets\1028\Visual C#\mbox.snippet</File>
    <Title>mbox</Title>
    <Author>Microsoft Corporation</Author>
    <Description>MessageBox.Show 的程式碼片段</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>$SystemWindowsFormsMessageBox$.Show($string$);$end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC#\Snippets\1028\Visual C#\namespace.snippet</File>
    <Title>namespace</Title>
    <Author>Microsoft Corporation</Author>
    <Description>命名空間的程式碼片段</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>namespace $name$
	{
		$selected$ $end$
	}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC#\Snippets\1028\Visual C#\pp_if.snippet</File>
    <Title>#if</Title>
    <Author>Microsoft Corporation</Author>
    <Description>#if 的程式碼片段</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>#if $expression$
		$selected$ $end$ 
	#endif</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC#\Snippets\1028\Visual C#\pp_region.snippet</File>
    <Title>#region</Title>
    <Author>Microsoft Corporation</Author>
    <Description>#region 的程式碼片段</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>#region $name$
		$selected$ $end$
	#endregion</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC#\Snippets\1028\Visual C#\prop.snippet</File>
    <Title>prop</Title>
    <Author>Microsoft Corporation</Author>
    <Description>自動實作之屬性的程式碼片段
語言版本:  C# 3.0 (含) 以上版本</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>public $type$ $property$ { get; set; }$end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC#\Snippets\1028\Visual C#\propfull.snippet</File>
    <Title>propfull</Title>
    <Author>Microsoft Corporation</Author>
    <Description>屬性和支援欄位的程式碼片段</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>private $type$ $field$;

	public $type$ $property$
	{
		get { return $field$;}
		set { $field$ = value;}
	}
	$end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC#\Snippets\1028\Visual C#\propg.snippet</File>
    <Title>propg</Title>
    <Author>Microsoft Corporation</Author>
    <Description>有 'get' 存取子和私用 'set' 存取子的自動實作之屬性的程式碼片段
語言版本: C# 3.0 (含) 以上版本</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>public $type$ $property$ { get; private set; }$end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC#\Snippets\1028\Visual C#\sim.snippet</File>
    <Title>sim</Title>
    <Author>Microsoft Corporation</Author>
    <Description>int Main() 的程式碼片段</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>static int Main(string[] args)
{
	$end$
	return 0;
}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC#\Snippets\1028\Visual C#\struct.snippet</File>
    <Title>struct</Title>
    <Author>Microsoft Corporation</Author>
    <Description>結構的程式碼片段</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>struct $name$
	{
		$selected$$end$
	}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC#\Snippets\1028\Visual C#\svm.snippet</File>
    <Title>svm</Title>
    <Author>Microsoft Corporation</Author>
    <Description>'void Main' 方法的程式碼片段</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>static void Main(string[] args)
{
	$end$
}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC#\Snippets\1028\Visual C#\switch.snippet</File>
    <Title>switch</Title>
    <Author>Microsoft Corporation</Author>
    <Description>switch 陳述式的程式碼片段</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>switch ($expression$)
	{
		$cases$
	}$end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC#\Snippets\1028\Visual C#\try.snippet</File>
    <Title>try</Title>
    <Author>Microsoft Corporation</Author>
    <Description>try catch 的程式碼片段</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>try 
	{	        
		$selected$
	}
	catch ($expression$)
	{
		$end$
		throw;
	}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC#\Snippets\1028\Visual C#\tryf.snippet</File>
    <Title>tryf</Title>
    <Author>Microsoft Corporation</Author>
    <Description>try finally 的程式碼片段</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>try 
	    {	        
		    $selected$
	    }
	    finally
	    {
		    $end$
	    }</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC#\Snippets\1028\Visual C#\unchecked.snippet</File>
    <Title>unchecked</Title>
    <Author>Microsoft Corporation</Author>
    <Description>未核取區塊的程式碼片段</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>unchecked
	{
		$selected$ $end$
	}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC#\Snippets\1028\Visual C#\unsafe.snippet</File>
    <Title>unsafe</Title>
    <Author>Microsoft Corporation</Author>
    <Description>unsafe 陳述式的程式碼片段</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>unsafe
	{
		$selected$ $end$
	}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC#\Snippets\1028\Visual C#\using.snippet</File>
    <Title>using</Title>
    <Author>Microsoft Corporation</Author>
    <Description>using 陳述式的程式碼片段</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>using($resource$)
	{
		$selected$ $end$
	}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC#\Snippets\1028\Visual C#\while.snippet</File>
    <Title>while</Title>
    <Author>Microsoft Corporation</Author>
    <Description>while 迴圈的程式碼片段</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>while ($expression$)
	{
	        $selected$ $end$
	}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC#\Snippets\1028\Visual C#\~.snippet</File>
    <Title>~</Title>
    <Author>Microsoft Corporation</Author>
    <Description>解構函式的程式碼片段</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>~$classname$()
	{
		$end$
	}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC#\Snippets\1028\Refactoring\EncapsulateField.snippet</File>
    <Title>Encapsulate Field</Title>
    <Author>Microsoft Corporation</Author>
    <Description>正在重構封裝欄位的程式碼片段</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>

$modifier$ $type$ $name$
{
  get { return $field$; }
  set { $field$ = value; }
}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC#\Snippets\1028\Refactoring\EncapsulateFieldGet.snippet</File>
    <Title>Encapsulate Field Get</Title>
    <Author>Microsoft Corporation</Author>
    <Description>正在重構封裝欄位的程式碼片段</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>

$modifier$ $type$ $name$
{
  get { return $field$; }  
} 
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC#\Snippets\1028\Refactoring\EncapsulateFieldSet.snippet</File>
    <Title>Encapsulate Field Set</Title>
    <Author>Microsoft Corporation</Author>
    <Description>正在重構封裝欄位的程式碼片段</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>

$modifier$ $type$ $name$
{
  set { $field$ = value; }
} 
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC#\Snippets\1028\Refactoring\EventStub - Field.snippet</File>
    <Title>Event Stub - Field</Title>
    <Author>Microsoft Corporation</Author>
    <Description>產生隱含事件 Stub 的程式碼片段</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>$signature$;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC#\Snippets\1028\Refactoring\EventStub - Property.snippet</File>
    <Title>Event Stub - Property</Title>
    <Author>Microsoft Corporation</Author>
    <Description>產生明確事件 Stub 的程式碼片段</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>$signature$
{
	add { $end$throw new $Exception$(); }	
	remove { throw new $Exception$(); }
}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC#\Snippets\1028\Refactoring\GenerateConstructor - Constructor.snippet</File>
    <Title>Generate Constructor - Constructor</Title>
    <Author>Microsoft Corporation</Author>
    <Description>由 [產生建構函式] 重構所建立之建構函式的程式碼片段</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>$end$public $modifiers$ $signature$
    {
        // TODO: Complete member initialization$memberassignments$
    }</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC#\Snippets\1028\Refactoring\GenerateConstructor - MemberAssignment.snippet</File>
    <Title>Generate Constructor - Member Assignment</Title>
    <Author>Microsoft Corporation</Author>
    <Description>於 [產生建構函式] 重構期間所加入之成員指派的程式碼片段</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>$end$this.$signature$ = $parametername$;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC#\Snippets\1028\Refactoring\GenerateConstructor - MemberDeclaration.snippet</File>
    <Title>Generate Constructor - Member Declaration</Title>
    <Author>Microsoft Corporation</Author>
    <Description>於 [產生建構函式] 重構期間所宣告成員的程式碼片段</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>$end$private $modifiers$ $type$ $signature$;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC#\Snippets\1028\Refactoring\GenerateEnumMember.snippet</File>
    <Title>Generate Enum Member</Title>
    <Author>Microsoft Corporation</Author>
    <Description>於 [產生建構函式] 重構期間所建立之列舉成員的程式碼片段</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>$end$$signature$$comma$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC#\Snippets\1028\Refactoring\GenerateField.snippet</File>
    <Title>Generate Field</Title>
    <Author>Microsoft Corporation</Author>
    <Description>由 [產生欄位] 重構所建立之欄位的程式碼片段</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>$end$$accessibility$ $modifiers$ $type$ $signature$;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC#\Snippets\1028\Refactoring\GenerateProperty - Auto Property.snippet</File>
    <Title>Generate Property - Auto Property</Title>
    <Author>Microsoft Corporation</Author>
    <Description>由 [產生屬性] 重構所建立之自動屬性的程式碼片段</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>$end$$accessibility$ $modifiers$ $type$ $signature$ { get; set; }</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC#\Snippets\1028\Refactoring\GenerateProperty - Property.snippet</File>
    <Title>Generate Property - Property And Backing Field</Title>
    <Author>Microsoft Corporation</Author>
    <Description>由 [產生屬性] 重構所建立之屬性的程式碼片段</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>private $modifiers$ $type$ $field$;

$accessibility$ $modifiers$ $type$ $signature$
{
    get { return $field$;}
    set { $field$ = value;}
}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC#\Snippets\1028\Refactoring\GenerateTypeInExistingFile.snippet</File>
    <Title>Generate Type In Existing File</Title>
    <Author>Microsoft Corporation</Author>
    <Description>在現有檔案中產生類型的程式碼片段</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>
$end$namespace $namespace$
{
    $modifiers$ $typekind$ $typename$ $typebase$
    {
    }
}
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC#\Snippets\1028\Refactoring\GenerateTypeInExistingFileNoEnclosingNamespace.snippet</File>
    <Title>Generate Type In Existing File - No Enclosing Namespace</Title>
    <Author>Microsoft Corporation</Author>
    <Description>在沒有封入命名空間的現有檔案中產生類型的程式碼片段</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>
$end$$modifiers$ $typekind$ $typename$ $typebase$
{
}
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC#\Snippets\1028\Refactoring\GenerateTypeInNewFile.snippet</File>
    <Title>Generate Type In New File</Title>
    <Author>Microsoft Corporation</Author>
    <Description>在新檔案中產生類型的程式碼片段</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>$end$using System;
using System.Collections.Generic;$linqusing$
using System.Text;

namespace $namespace$
{
    $modifiers$ $typekind$ $typename$ $typebase$
    {
    }
}
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC#\Snippets\1028\Refactoring\GenerateTypeInNewFileNoEnclosingNamespace.snippet</File>
    <Title>Generate Type In New File - No Enclosing Namespace</Title>
    <Author>Microsoft Corporation</Author>
    <Description>在沒有封入命名空間的新檔案中產生類型的程式碼片段</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>$end$using System;
using System.Collections.Generic;$linqusing$
using System.Text;

$modifiers$ $typekind$ $typename$ $typebase$
{
}
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC#\Snippets\1028\Refactoring\MethodOverrideStub.snippet</File>
    <Title>Method Override Stub</Title>
    <Author>Microsoft Corporation</Author>
    <Description>覆寫方法的程式碼片段</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>$signature$
{
 	$end$ $CallBase$
}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC#\Snippets\1028\Refactoring\MethodStub.snippet</File>
    <Title>Method Stub - Body</Title>
    <Author>Microsoft Corporation</Author>
    <Description>產生含有主體的方法 Stub 的程式碼片段</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>$signature$
{
 	$end$throw new $Exception$();
}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC#\Snippets\1028\Refactoring\MethodStubNoBody.snippet</File>
    <Title>Method Stub - No Body</Title>
    <Author>Microsoft Corporation</Author>
    <Description>產生沒有主體的方法 Stub 的程式碼片段</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>$signature$;$end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC#\Snippets\1028\Refactoring\PropertyOverrideStub.snippet</File>
    <Title>Property Override Stub</Title>
    <Author>Microsoft Corporation</Author>
    <Description>覆寫屬性的程式碼片段</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>$signature$
{
	$GetterAccessibility$ get 
	{ 
		$end$ $CallBaseGet$
	}
	$SetterAccessibility$ set 
	{ 
		$CallBaseSet$
	}
}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC#\Snippets\1028\Refactoring\PropertyOverrideStubGet.snippet</File>
    <Title>Property Override Stub Get</Title>
    <Author>Microsoft Corporation</Author>
    <Description>覆寫屬性的程式碼片段</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>$signature$
{
	get 
	{ 
		$end$ $CallBaseGet$
	}
}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC#\Snippets\1028\Refactoring\PropertyOverrideStubSet.snippet</File>
    <Title>Property Override Stub Set</Title>
    <Author>Microsoft Corporation</Author>
    <Description>覆寫屬性的程式碼片段</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>$signature$
{
	set 
	{ 
		$end$ $CallBaseSet$
	}
}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC#\Snippets\1028\Refactoring\PropertyStub.snippet</File>
    <Title>Property Stub</Title>
    <Author>Microsoft Corporation</Author>
    <Description>產生屬性 Stub 的程式碼片段</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>$signature$
{
	$GetterAccessibility$ get 
	{ 
		$end$throw new $Exception$(); 
	}
	$SetterAccessibility$ set 
	{ 
		throw new $Exception$(); 
	}
}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC#\Snippets\1028\Refactoring\PropertyStubGet.snippet</File>
    <Title>Property Stub Get</Title>
    <Author>Microsoft Corporation</Author>
    <Description>產生屬性 Stub 的程式碼片段</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>$signature$
{
	get { $end$throw new $Exception$(); }
}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC#\Snippets\1028\Refactoring\PropertyStubGetNoBody.snippet</File>
    <Title>Property Stub Get - No Body</Title>
    <Author>Microsoft Corporation</Author>
    <Description>用於產生沒有主體之屬性 Stub 的程式碼片段</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>$signature$
{
	get;
}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC#\Snippets\1028\Refactoring\PropertyStubNoBody.snippet</File>
    <Title>Property Stub - No Body</Title>
    <Author>Microsoft Corporation</Author>
    <Description>用於產生沒有主體之屬性 Stub 的程式碼片段</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>$signature$
{
	$GetterAccessibility$ get; $SetterAccessibility$ set;
}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC#\Snippets\1028\Refactoring\PropertyStubSet.snippet</File>
    <Title>Property Stub Set</Title>
    <Author>Microsoft Corporation</Author>
    <Description>產生屬性 Stub 的程式碼片段</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>$signature$
{
	set { $end$throw new $Exception$(); }
}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC#\Snippets\1028\Refactoring\PropertyStubSetNoBody.snippet</File>
    <Title>Property Stub Set - No Body</Title>
    <Author>Microsoft Corporation</Author>
    <Description>用於產生沒有主體之屬性 Stub 的程式碼片段</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>$signature$
{
	set;
}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Users\thony\Documents\Visual Studio 2019\Code Snippets\Visual C#\My Code Snippets\dynamic_result.snippet</File>
    <Title>dynamic_result</Title>
    <Author />
    <Description />
    <Keywords />
    <Language>csharp</Language>
    <Code>			dynamic data = new ExpandoObject();
			var _ddl = new ddlController();
			data.ops_LINE = _ddl.LINE("");
			ViewData["result"] = ((object)data).ToJson(false);</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Users\thony\Documents\Visual Studio 2019\Code Snippets\Visual C#\My Code Snippets\mdl_Search.snippet</File>
    <Title>mdl_Search</Title>
    <Author />
    <Description />
    <Keywords />
    <Language>csharp</Language>
    <Code>public List&lt;$mdl$.$mdl$&gt; $mdl$(string Search = null, MDL.SearchKey SearchType = MDL.SearchKey.$SID$)
		{
			List&lt;$mdl$.$mdl$&gt; _r = null;
			if (Search == "%") Search = "";
			using (var dbContext = new MDL.MESContext())
			{
				_r = (from t in dbContext.$mdl$
					  where
						  (SearchType == MDL.SearchKey.$SID$ &amp;&amp; t.$SID$ == Search)
						  || (SearchType == MDL.SearchKey.$Name$ &amp;&amp; t.$Name$ == Search)
						  || (SearchType == MDL.SearchKey.No &amp;&amp; t.$NO$ == Search)
						  || (SearchType == MDL.SearchKey.All
							  &amp;&amp; (t.$SID$.Contains(Search)
							  || t.$Name$.Contains(Search)
							  || t.$NO$.Contains(Search)))
					  select t)
					.ToList();
			}
			return _r;
		}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Users\thony\Documents\Visual Studio 2019\Code Snippets\Visual C#\My Code Snippets\mvc_Pagination.snippet</File>
    <Title>mvc_Pagination</Title>
    <Author />
    <Description />
    <Keywords />
    <Language>csharp</Language>
    <Code>		public ActionResult QueryWORKT(Pagination pagination)
		{
			var data = new
			{
				data = ZZServices.QueryWORKT(pagination),
				recordsTotal = pagination.records,
				recordsFiltered = pagination.records,
				records = pagination.records
			};
			return Content((data).ToJson(true));
		}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC#\Snippets\1028\NetFX30\propa.snippet</File>
    <Title>Define an attached DependencyProperty</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Code snippet for an attached property using DependencyProperty as the backing store</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>
                
public static $type$ Get$property$(DependencyObject obj)
{
    return ($type$)obj.GetValue($property$Property);
}

public static void Set$property$(DependencyObject obj, $type$ value)
{
    obj.SetValue($property$Property, value);
}

// Using a DependencyProperty as the backing store for $property$.  This enables animation, styling, binding, etc...
public static readonly DependencyProperty $property$Property =
    DependencyProperty.RegisterAttached("$property$", typeof($type$), typeof($ownerclass$), new PropertyMetadata($defaultvalue$));

$end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC#\Snippets\1028\NetFX30\propdp.snippet</File>
    <Title>Define a DependencyProperty</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Code snippet for a property using DependencyProperty as the backing store</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>

public $type$ $property$
{
    get { return ($type$)GetValue($property$Property); }
    set { SetValue($property$Property, value); }
}

// Using a DependencyProperty as the backing store for $property$.  This enables animation, styling, binding, etc...
public static readonly DependencyProperty $property$Property = 
    DependencyProperty.Register("$property$", typeof($type$), typeof($ownerclass$), new PropertyMetadata($defaultvalue$));

$end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>c:\program files (x86)\microsoft visual studio\2019\professional\common7\ide\extensions\microsoft\adl tools\2.4.1000.0\Snippets\CSharp\U-SQL\Applier.snippet</File>
    <Title>Operator - applier</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Code snippet for Applier</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>
          //for more information on how to write UDOs, please refer to the doc http://go.microsoft.com/fwlink/?LinkID=623598&amp;clcid=0x409 
    [SqlUserDefinedApplier] 
    public class $classname$ : IApplier 
    { 
        /// &lt;summary&gt;Apply is called at least once per instance&lt;/summary&gt; 
        /// &lt;param name="input"&gt;&lt;/param&gt; 
        /// &lt;param name="output"&gt;&lt;/param&gt; 
        /// &lt;returns&gt;A sequence of IRows.&lt;/returns&gt; 
        public override IEnumerable&lt;IRow&gt; Apply(IRow input, IUpdatableRow output) 
        { 
            output.Set(0, input.Get&lt;int&gt;("col1")); 
            yield return output.AsReadOnly(); 
        } 
    } 
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>c:\program files (x86)\microsoft visual studio\2019\professional\common7\ide\extensions\microsoft\adl tools\2.4.1000.0\Snippets\CSharp\U-SQL\Combiner.snippet</File>
    <Title>Operator - combiner</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Code snippet for Combiner </Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>
    /// &lt;summary&gt; 
    /// For more information about writing UDOs, please refer to http://go.microsoft.com/fwlink/?LinkID=623598&amp;clcid=0x409 
    /// &lt;/summary&gt;
     [SqlUserDefinedCombiner] 
    public class MyCombiner : ICombiner 
    { 
        public override IEnumerable&lt;IRow&gt; Combine(IRowset left, IRowset right, IUpdatableRow output) 
        { 
            int i = 0; 
            if (right.Rows.GetEnumerator().MoveNext()) 
            { 
                foreach (IRow row in left.Rows) 
                { 
                    output.Set(i++, row); 
                    yield return output.AsReadOnly(); 
                } 
            } 
        }
    } 
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>c:\program files (x86)\microsoft visual studio\2019\professional\common7\ide\extensions\microsoft\adl tools\2.4.1000.0\Snippets\CSharp\U-SQL\Extractor.snippet</File>
    <Title>Operator - extractor</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Code snippet for Extractor </Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>        /// &lt;summary&gt; 

    /// For more information about writing UDOs, please refer to http://go.microsoft.com/fwlink/?LinkID=623598&amp;clcid=0x409 
    /// &lt;/summary&gt; 
    [SqlUserDefinedExtractor] 
    public class $classname$ : IExtractor 
    { 
        /// &lt;summary&gt; 
        ///  
        /// &lt;/summary&gt; 
        /// &lt;param name="input"&gt;&lt;/param&gt; 
        /// &lt;param name="outputrow"&gt;&lt;/param&gt; 
        /// &lt;returns&gt;&lt;/returns&gt; 
        public override IEnumerable&lt;IRow&gt; Extract(IUnstructuredReader input, IUpdatableRow outputrow) 
        { 
            char column_delimiter = '\t'; 
            string line; 
            var reader = new StreamReader(input.BaseStream); 
            while ((line = reader.ReadLine()) != null) 
            { 
                var tokens = line.Split(column_delimiter); 
                outputrow.Set("Name", tokens[0]); 
                outputrow.Set("Company", tokens[1]); 
                outputrow.Set("Salary", Convert.ToInt64(tokens[2])); 
                yield return outputrow.AsReadOnly(); 
            } 
        } 
    } 

</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>c:\program files (x86)\microsoft visual studio\2019\professional\common7\ide\extensions\microsoft\adl tools\2.4.1000.0\Snippets\CSharp\U-SQL\Outputter.snippet</File>
    <Title>Operator - outputter</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Code snippet for Outputter</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>      /// &lt;summary&gt; 
    /// For more information about writing UDOs, please refer to http://go.microsoft.com/fwlink/?LinkID=623598&amp;clcid=0x409 
    /// &lt;/summary&gt; 
    [SqlUserDefinedOutputter] 
    public class $classname$ : IOutputter 
    { 
        private string row_delim;// = Encoding.ASCII.GetBytes("~"); 
        private char[] col_delim;// = new char[] { ',' }; 


        public $classname$(string trow_del, string tcol_del) 
        { 
            row_delim = trow_del; 
            col_delim = tcol_del.ToCharArray(); 
        }  
        /// &lt;summary&gt; 
        ///  
        /// &lt;/summary&gt; 
        /// &lt;param name="input"&gt;&lt;/param&gt; 
        /// &lt;param name="output"&gt;&lt;/param&gt; 
        /// &lt;returns&gt;&lt;/returns&gt; 
        public override void Output(IRow input, IUnstructuredWriter output) 
        { 
            using (var outputWriter = new StreamWriter(output.BaseStream)) 
            { 
                int columnCount = input.Schema.Count; 
                for (int columnIdx = 0; columnIdx &lt; columnCount; columnIdx++) 
                { 
                    if (columnIdx == 2) 
                        outputWriter.Write(input.Get&lt;long&gt;(columnIdx)); 
                    else 
                        outputWriter.Write(input.Get&lt;string&gt;(columnIdx)); 
                    if (columnIdx == (columnCount - 1)) 
                        outputWriter.Write(row_delim); 
                    else 
                        outputWriter.Write(col_delim); 
                } 
            } 
        } 
    } 
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>c:\program files (x86)\microsoft visual studio\2019\professional\common7\ide\extensions\microsoft\adl tools\2.4.1000.0\Snippets\CSharp\U-SQL\Processor.snippet</File>
    <Title>Operator - processor</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Code snippet for Processor</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>
    [SqlUserDefinedProcessor] 
    /// &lt;summary&gt; 
    /// For more information about writing UDOs, please refer to http://go.microsoft.com/fwlink/?LinkID=623598&amp;clcid=0x409 
    /// &lt;/summary&gt; 
    ///  
    public class $classname$ : IProcessor  
{ 
  /// &lt;summary&gt; 
        ///  
        /// &lt;/summary&gt; 
        /// &lt;param name="input"&gt;&lt;/param&gt; 
        /// &lt;param name="output"&gt;&lt;/param&gt; 
        /// &lt;returns&gt;&lt;/returns&gt; 
        public override IRow Process(IRow input, IUpdatableRow output) 
        { 
            output.Set(0, input); 
            return output.AsReadOnly();         
        } 
 } 
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>c:\program files (x86)\microsoft visual studio\2019\professional\common7\ide\extensions\microsoft\adl tools\2.4.1000.0\Snippets\CSharp\U-SQL\Reducer.snippet</File>
    <Title>Operator - reducer</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Code snippet for Reducer</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>      /// &lt;summary&gt; 
    /// For more information about writing UDOs, please refer to http://go.microsoft.com/fwlink/?LinkID=623598&amp;clcid=0x409 
    /// &lt;/summary&gt; 
    [SqlUserDefinedReducer] 
    public class $classname$ : IReducer 
    { 
        /// &lt;summary&gt; 
        ///  
        /// &lt;/summary&gt; 
        /// &lt;param name="input"&gt;&lt;/param&gt; 
        /// &lt;param name="output"&gt;&lt;/param&gt; 
        /// &lt;returns&gt;&lt;/returns&gt; 
        public override IEnumerable&lt;IRow&gt; Reduce(IRowset input, IUpdatableRow output) 
        { 
            int? maxlatency = null; 
            string tquery = "", tmarket = ""; 
            foreach (var row in input.Rows) 
            { 
                int? l = row.Get&lt;int?&gt;("Latency"); 
                if (maxlatency == null || l &gt; maxlatency) 
                { 
                    maxlatency = l; 
                    tquery = row.Get&lt;string&gt;("Query"); 
                    tmarket = row.Get&lt;string&gt;("Market"); 
                } 
            } 
            output.Set("Query", tquery); 
            output.Set("Market", tmarket); 
            output.Set("Latency", maxlatency); 
            yield return output.AsReadOnly(); 

        } 
    } 

</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC#\Snippets\1028\Test\testclass.snippet</File>
    <Title>測試類別</Title>
    <Author>Microsoft Corporation</Author>
    <Description>測試類別的程式碼片段</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>[$TestClass$]
      public class $name$
      {
          $end$
      }</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC#\Snippets\1028\Test\testmethod.snippet</File>
    <Title>測試方法</Title>
    <Author>Microsoft Corporation</Author>
    <Description>測試方法的程式碼片段</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>[$TestMethod$]
      public void $name$()
      {
          $end$
      }</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>c:\program files (x86)\microsoft visual studio\2019\professional\common7\ide\extensions\microsoft\web\mvc4\Snippets\VC#\1028\mvcaction.snippet</File>
    <Title>mvcaction4</Title>
    <Author>Microsoft Corporation</Author>
    <Description>動作的程式碼片段。</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>public ActionResult fk $name$()
      {
          return View();$end$
      }</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>c:\program files (x86)\microsoft visual studio\2019\professional\common7\ide\extensions\microsoft\web\mvc4\Snippets\VC#\1028\mvcpostaction.snippet</File>
    <Title>mvcpostaction4</Title>
    <Author>Microsoft Corporation</Author>
    <Description>經由 HTTP Post 之動作的程式碼片段。</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>[HttpPost]
	  public ActionResult $name$()
      {
          return View();$end$
      }</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>c:\program files (x86)\microsoft visual studio\2019\professional\common7\ide\extensions\microsoft\web\mvc4\Snippets\VC#\1028\mvc_dbc.snippet</File>
    <Title>mvc_dbc</Title>
    <Author />
    <Description />
    <Keywords />
    <Language>csharp</Language>
    <Code>using (var dbc = mes.dbc())
{
}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Web\Snippets\CSS\1028\CSS\css-linear-gradient.snippet</File>
    <Title>跨瀏覽器線性漸層</Title>
    <Author>Microsoft Corporation</Author>
    <Description>線性漸層程式碼片段</Description>
    <Keywords />
    <Language>css</Language>
    <Code>background-color: $fromcolor$;
background-image: -moz-linear-gradient(top, $fromcolor$, $tocolor$);
background-image: -o-linear-gradient(top, $fromcolor$, $tocolor$);
background-image: -webkit-gradient(linear, left top, left bottom, from($fromcolor$), to($tocolor$));
background-image: -webkit-linear-gradient(top, $fromcolor$, $tocolor$);
background-image: linear-gradient(to bottom, $fromcolor$, $tocolor$);$end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Web\Snippets\CSS\1028\CSS\css-radial-gradient.snippet</File>
    <Title>跨瀏覽器放射漸層</Title>
    <Author>Microsoft Corporation</Author>
    <Description>放射漸層程式碼片段</Description>
    <Keywords />
    <Language>css</Language>
    <Code>background: $fromcolor$;
background: -moz-radial-gradient(center, ellipse cover, $fromcolor$ 0%, $tocolor$ 100%);
background: -o-radial-gradient(center, ellipse cover, $fromcolor$ 0%, $tocolor$ 100%);
background: -webkit-gradient(radial, center center, 0px, center center, 100%, color-stop(0%, $fromcolor$), color-stop(100%, $tocolor$));
background: -webkit-radial-gradient(center, ellipse cover, $fromcolor$ 0%, $tocolor$ 100%);
background: -ms-radial-gradient(center, ellipse cover, $fromcolor$ 0%, $tocolor$ 100%);$end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Web\Snippets\CSS\1028\CSS\font-face directive.snippet</File>
    <Title>字體</Title>
    <Author>Microsoft Corporation</Author>
    <Description>內嵌字型的程式碼片段</Description>
    <Keywords />
    <Language>css</Language>
    <Code>@font-face {  
  font-family: '$name$';
  src: url('$file$.eot');
  src: local('☺'), url('$file$.woff') format('woff'), url('$file$.ttf') format('truetype');
}$end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Web\Snippets\CSS\1028\CSS\keyframes directive.snippet</File>
    <Title>主要畫面格</Title>
    <Author>Microsoft Corporation</Author>
    <Description>動畫主要畫面格程式碼片段</Description>
    <Keywords />
    <Language>css</Language>
    <Code>@keyframes $name$ {
    from {
        background: red;$end$
    }

    to {
        background: yellow;
    }
}

@-moz-keyframes $name$ {

}

@-webkit-keyframes $name$ {

}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Web\Snippets\CSS\1028\CSS\media query desktop laptop.snippet</File>
    <Title>適用於桌上型電腦和膝上型電腦的媒體查詢</Title>
    <Author>Microsoft Corporation</Author>
    <Description>媒體查詢範例</Description>
    <Keywords />
    <Language>css</Language>
    <Code>@media only screen and (min-width : 1224px) {
    $selected$$end$
}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Web\Snippets\CSS\1028\CSS\media query directive.snippet</File>
    <Title>媒體查詢</Title>
    <Author>Microsoft Corporation</Author>
    <Description>媒體查詢範例</Description>
    <Keywords />
    <Language>css</Language>
    <Code>@media only screen and (max-width: $width$) and (max-height: $height$) {
  $selected$$end$
}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Web\Snippets\CSS\1028\CSS\media query ipad landscape.snippet</File>
    <Title>適用於橫向 iPad 的媒體查詢</Title>
    <Author>Microsoft Corporation</Author>
    <Description>媒體查詢範例</Description>
    <Keywords />
    <Language>css</Language>
    <Code>@media only screen and (min-device-width : 768px) and (max-device-width : 1024px) and (orientation : landscape) {
  $selected$$end$
}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Web\Snippets\CSS\1028\CSS\media query ipad portrait.snippet</File>
    <Title>適用於直向 iPad 的媒體查詢</Title>
    <Author>Microsoft Corporation</Author>
    <Description>媒體查詢範例</Description>
    <Keywords />
    <Language>css</Language>
    <Code>@media only screen and (min-device-width : 768px) and (max-device-width : 1024px) and (orientation : portrait) {
  $selected$$end$
}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Web\Snippets\CSS\1028\CSS\media query ipad.snippet</File>
    <Title>適用於 iPad 的媒體查詢</Title>
    <Author>Microsoft Corporation</Author>
    <Description>媒體查詢範例</Description>
    <Keywords />
    <Language>css</Language>
    <Code>@media only screen and (min-device-width : 768px) and (max-device-width : 1024px) {
  $selected$$end$
}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Web\Snippets\CSS\1028\CSS\media query iphone 4 landscape.snippet</File>
    <Title>適用於橫向 iPhone 4 的媒體查詢</Title>
    <Author>Microsoft Corporation</Author>
    <Description>媒體查詢範例</Description>
    <Keywords />
    <Language>css</Language>
    <Code>@media only screen and (min-device-width : 320px) and (max-device-width : 480px) and (orientation : landscape) {
  $selected$$end$
}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Web\Snippets\CSS\1028\CSS\media query iphone 4 portrait.snippet</File>
    <Title>適用於直向 iPhone 4 的媒體查詢</Title>
    <Author>Microsoft Corporation</Author>
    <Description>媒體查詢範例</Description>
    <Keywords />
    <Language>css</Language>
    <Code>@media only screen and (min-device-width : 320px) and (max-device-width : 480px) and (orientation : portrait) {
  $selected$$end$
}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Web\Snippets\CSS\1028\CSS\media query iphone 4.snippet</File>
    <Title>適用於 iPhone 4 的媒體查詢</Title>
    <Author>Microsoft Corporation</Author>
    <Description>媒體查詢範例</Description>
    <Keywords />
    <Language>css</Language>
    <Code>@media only screen and (-webkit-min-device-pixel-ratio : 1.5), only screen and (min-device-pixel-ratio : 1.5) {
  $selected$$end$
}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Web\Snippets\CSS\1028\CSS\media query iphone 5 landscape.snippet</File>
    <Title>適用於橫向 iPhone 5 的媒體查詢</Title>
    <Author>Microsoft Corporation</Author>
    <Description>媒體查詢範例</Description>
    <Keywords />
    <Language>css</Language>
    <Code>@media only screen and (min-device-width : 320px) and (max-device-width : 568px) and (orientation : landscape) {
  $selected$$end$
}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Web\Snippets\CSS\1028\CSS\media query iphone 5 portrait.snippet</File>
    <Title>適用於直向 iPhone 5 的媒體查詢</Title>
    <Author>Microsoft Corporation</Author>
    <Description>媒體查詢範例</Description>
    <Keywords />
    <Language>css</Language>
    <Code>@media only screen and (min-device-width : 320px) and (max-device-width : 568px) and (orientation : portrait) {
  $selected$$end$
}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Web\Snippets\CSS\1028\CSS\media query iphone 5.snippet</File>
    <Title>適用於 iPhone 5 的媒體查詢</Title>
    <Author>Microsoft Corporation</Author>
    <Description>媒體查詢範例</Description>
    <Keywords />
    <Language>css</Language>
    <Code>@media only screen and (min-device-width : 320px) and (max-device-width : 568px) {
  $selected$$end$
}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Web\Snippets\CSS\1028\CSS\media query large screen.snippet</File>
    <Title>適用於大螢幕的媒體查詢</Title>
    <Author>Microsoft Corporation</Author>
    <Description>媒體查詢範例</Description>
    <Keywords />
    <Language>css</Language>
    <Code>@media only screen and (min-width : 1824px) {
    $selected$$end$
}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Web\Snippets\CSS\1028\CSS\media query smartphone landscape.snippet</File>
    <Title>適用於橫向智慧型手機的媒體查詢</Title>
    <Author>Microsoft Corporation</Author>
    <Description>媒體查詢範例</Description>
    <Keywords />
    <Language>css</Language>
    <Code>@media only screen and (min-width : 321px) {
    $selected$$end$
}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Web\Snippets\CSS\1028\CSS\media query smartphone portrait.snippet</File>
    <Title>適用於直向智慧型手機的媒體查詢</Title>
    <Author>Microsoft Corporation</Author>
    <Description>媒體查詢範例</Description>
    <Keywords />
    <Language>css</Language>
    <Code>@media only screen and (max-width : 320px) {
    $selected$$end$
}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Web\Snippets\CSS\1028\CSS\media query smartphone.snippet</File>
    <Title>適用於智慧型手機的媒體查詢</Title>
    <Author>Microsoft Corporation</Author>
    <Description>媒體查詢範例</Description>
    <Keywords />
    <Language>css</Language>
    <Code>@media only screen and (min-device-width : 320px) and (max-device-width : 480px) {
    $selected$$end$
}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Web\Snippets\CSS\1028\CSS\media query windows snap view.snippet</File>
    <Title>適用於 Windows 8 貼齊模式的媒體查詢</Title>
    <Author>Microsoft Corporation</Author>
    <Description>媒體查詢範例</Description>
    <Keywords />
    <Language>css</Language>
    <Code>@media screen and (max-width:400px) {
    @-ms-viewport{
        width:320px;
    }
    $selected$$end$
}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Web\Snippets\CSS\1028\CSS\region comment.snippet</File>
    <Title>區域</Title>
    <Author>Microsoft Corporation</Author>
    <Description>用於加入自訂區域的程式碼片段</Description>
    <Keywords />
    <Language>css</Language>
    <Code>/*#region $name$ */

$selected$$end$

/*#endregion */</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Web\Snippets\HTML\1028\HTML\a.snippet</File>
    <Title>a</Title>
    <Author>Microsoft Corporation</Author>
    <Description>連結的標記程式碼片段</Description>
    <Keywords />
    <Language>html</Language>
    <Code>&lt;a href="$href$"&gt;$selected$&lt;/a&gt;$end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Web\Snippets\HTML\1028\HTML\audio.snippet</File>
    <Title>音訊</Title>
    <Author>Microsoft Corporation</Author>
    <Description>有多重來源之音訊的標記程式碼片段</Description>
    <Keywords />
    <Language>html</Language>
    <Code>&lt;audio controls="controls"&gt;
  &lt;source src="$file$.mp3" type="audio/mp3" /&gt;
  &lt;source src="$file$.ogg" type="audio/ogg" /&gt;
&lt;/audio&gt;$end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Web\Snippets\HTML\1028\HTML\base.snippet</File>
    <Title>基底</Title>
    <Author>Microsoft Corporation</Author>
    <Description>基底元素的標記程式碼片段</Description>
    <Keywords />
    <Language>html</Language>
    <Code>&lt;base href="$path$" /&gt;$end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Web\Snippets\HTML\1028\HTML\charset.snippet</File>
    <Title>字元集</Title>
    <Author>Microsoft Corporation</Author>
    <Description>字元集中繼標籤的標記程式碼片段</Description>
    <Keywords />
    <Language>html</Language>
    <Code>&lt;meta charset="utf-8" /&gt;$end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Web\Snippets\HTML\1028\HTML\content.snippet</File>
    <Title>內容</Title>
    <Author>Microsoft Corporation</Author>
    <Description>成對標籤元素的標記程式碼片段。</Description>
    <Keywords />
    <Language>html</Language>
    <Code>&lt;$shortcut$&gt;$selected$$end$&lt;/$shortcut$&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Web\Snippets\HTML\1028\HTML\dd.snippet</File>
    <Title>dd</Title>
    <Author>Microsoft Corporation</Author>
    <Description>定義清單的標記程式碼片段</Description>
    <Keywords />
    <Language>html</Language>
    <Code>&lt;dl&gt;
    &lt;dt&gt;$selected$&lt;/dt&gt;
    &lt;dd&gt;$end$&lt;/dd&gt;
&lt;/dl&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Web\Snippets\HTML\1028\HTML\figure.snippet</File>
    <Title>圖表</Title>
    <Author>Microsoft Corporation</Author>
    <Description>有 figcaption 之圖表的標記程式碼片段</Description>
    <Keywords />
    <Language>html</Language>
    <Code>&lt;figure&gt;$end$
        $selected$
        &lt;figcaption&gt;$text$&lt;/figcaption&gt;        
   &lt;/figure&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Web\Snippets\HTML\1028\HTML\form.snippet</File>
    <Title>表單</Title>
    <Author>Microsoft Corporation</Author>
    <Description>HTML 表單的標記程式碼片段</Description>
    <Keywords />
    <Language>html</Language>
    <Code>&lt;form action="$action$" method="$method$"&gt;$selected$$end$&lt;/form&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Web\Snippets\HTML\1028\HTML\html.snippet</File>
    <Title>html</Title>
    <Author>Microsoft Corporation</Author>
    <Description>html 元素的標記程式碼片段</Description>
    <Keywords />
    <Language>html</Language>
    <Code>&lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
    &lt;head&gt;&lt;title&gt;&lt;/title&gt;&lt;/head&gt;
    &lt;body&gt;$selected$$end$&lt;/body&gt;
&lt;/html&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Web\Snippets\HTML\1028\HTML\html4f.snippet</File>
    <Title>html4f</Title>
    <Author>Microsoft Corporation</Author>
    <Description>HTML 4.01 Frameset Doctype 宣告的標記程式碼片段</Description>
    <Keywords />
    <Language>html</Language>
    <Code>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Frameset//EN" "http://www.w3.org/TR/html4/frameset.dtd"&gt;$end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Web\Snippets\HTML\1028\HTML\html4s.snippet</File>
    <Title>html4s</Title>
    <Author>Microsoft Corporation</Author>
    <Description>HTML 4.01 Strict Doctype 宣告的標記程式碼片段</Description>
    <Keywords />
    <Language>html</Language>
    <Code>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"&gt;$end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Web\Snippets\HTML\1028\HTML\html4t.snippet</File>
    <Title>html4t</Title>
    <Author>Microsoft Corporation</Author>
    <Description>HTML 4.01 Transitional Doctype 宣告的標記程式碼片段</Description>
    <Keywords />
    <Language>html</Language>
    <Code>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;$end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Web\Snippets\HTML\1028\HTML\html5.snippet</File>
    <Title>html5</Title>
    <Author>Microsoft Corporation</Author>
    <Description>HTML 5 Doctype 宣告的標記程式碼片段</Description>
    <Keywords />
    <Language>html</Language>
    <Code>&lt;!DOCTYPE html&gt;
    &lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;$end$&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
    
    &lt;/body&gt;
    &lt;/html&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Web\Snippets\HTML\1028\HTML\iframe.snippet</File>
    <Title>iframe</Title>
    <Author>Microsoft Corporation</Author>
    <Description>iframe 元素的標記程式碼片段</Description>
    <Keywords />
    <Language>html</Language>
    <Code>&lt;iframe src="$src$"&gt;&lt;/iframe&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Web\Snippets\HTML\1028\HTML\img.snippet</File>
    <Title>img</Title>
    <Author>Microsoft Corporation</Author>
    <Description>影像的標記程式碼片段</Description>
    <Keywords />
    <Language>html</Language>
    <Code>&lt;img src="$src$" alt="$alt$" /&gt;$end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Web\Snippets\HTML\1028\HTML\input.snippet</File>
    <Title>輸入</Title>
    <Author>Microsoft Corporation</Author>
    <Description>輸入元素的標記程式碼片段</Description>
    <Keywords />
    <Language>html</Language>
    <Code>&lt;input type="$type$" name="$name$" value="$selected$" /&gt;$end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Web\Snippets\HTML\1028\HTML\link.snippet</File>
    <Title>連結</Title>
    <Author>Microsoft Corporation</Author>
    <Description>樣式表關聯性的標記程式碼片段</Description>
    <Keywords />
    <Language>html</Language>
    <Code>&lt;link href="$href$" rel="stylesheet" /&gt;$end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Web\Snippets\HTML\1028\HTML\meta.snippet</File>
    <Title>meta</Title>
    <Author>Microsoft Corporation</Author>
    <Description>meta 元素的標記程式碼片段</Description>
    <Keywords />
    <Language>html</Language>
    <Code>&lt;meta $end$/&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Web\Snippets\HTML\1028\HTML\metaviewport.snippet</File>
    <Title>metaviewport</Title>
    <Author>Microsoft Corporation</Author>
    <Description>裝置檢視區的標記程式碼片段</Description>
    <Keywords />
    <Language>html</Language>
    <Code>&lt;meta name="viewport" content="width=device-width" /&gt;$end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Web\Snippets\HTML\1028\HTML\picture.snippet</File>
    <Title>圖片</Title>
    <Author>Microsoft Corporation</Author>
    <Description>為具有多重來源的圖片標記程式碼片段</Description>
    <Keywords />
    <Language>html</Language>
    <Code>&lt;picture&gt;
  &lt;source media="(min-width: 465px)" srcset="$file$-small.jpg" /&gt;
  &lt;source media="(min-width: 650px)" srcset="$file$-medium.jpg" /&gt;
  &lt;img src="$file$.jpg" alt="" /&gt;
&lt;/picture&gt;$end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Web\Snippets\HTML\1028\HTML\region.snippet</File>
    <Title>區域</Title>
    <Author>Microsoft Corporation</Author>
    <Description>用於加入自訂區域的程式碼片段</Description>
    <Keywords />
    <Language>html</Language>
    <Code>&lt;!-- #region $name$ --&gt;

$selected$$end$

&lt;!-- #endregion --&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Web\Snippets\HTML\1028\HTML\script.snippet</File>
    <Title>指令碼</Title>
    <Author>Microsoft Corporation</Author>
    <Description>用戶端指令碼區塊的標記程式碼片段</Description>
    <Keywords />
    <Language>html</Language>
    <Code>&lt;script&gt;$selected$$end$&lt;/script&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Web\Snippets\HTML\1028\HTML\scriptr.snippet</File>
    <Title>scriptr</Title>
    <Author>Microsoft Corporation</Author>
    <Description>伺服器指令碼區塊的標記程式碼片段</Description>
    <Keywords />
    <Language>html</Language>
    <Code>&lt;script runat="server"&gt;$selected$$end$&lt;/script&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Web\Snippets\HTML\1028\HTML\scriptr2.snippet</File>
    <Title>scriptr2</Title>
    <Author>Microsoft Corporation</Author>
    <Description>伺服器指令碼區塊的標記程式碼片段</Description>
    <Keywords />
    <Language>html</Language>
    <Code>&lt;script runat="server"&gt;
        $selected$$end$        
   &lt;/script&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Web\Snippets\HTML\1028\HTML\select.snippet</File>
    <Title>選取</Title>
    <Author>Microsoft Corporation</Author>
    <Description>下拉式清單的標記程式碼片段</Description>
    <Keywords />
    <Language>html</Language>
    <Code>&lt;select&gt;
    &lt;option value="$value$"&gt;$text$&lt;/option&gt;
&lt;/select&gt;$end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Web\Snippets\HTML\1028\HTML\selfclosing.snippet</File>
    <Title>自我結尾</Title>
    <Author>Microsoft Corporation</Author>
    <Description>自我結尾元素的標記程式碼片段</Description>
    <Keywords />
    <Language>html</Language>
    <Code>&lt;$shortcut$ /&gt;$end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Web\Snippets\HTML\1028\HTML\source.snippet</File>
    <Title>source</Title>
    <Author>Microsoft Corporation</Author>
    <Description>source 元素的標記程式碼片段</Description>
    <Keywords />
    <Language>html</Language>
    <Code>&lt;source src="$src$" type=$type$ /&gt;$end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Web\Snippets\HTML\1028\HTML\style.snippet</File>
    <Title>樣式</Title>
    <Author>Microsoft Corporation</Author>
    <Description>樣式區塊的標記程式碼片段</Description>
    <Keywords />
    <Language>html</Language>
    <Code>&lt;style&gt;$selected$$end$&lt;/style&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Web\Snippets\HTML\1028\HTML\svg.snippet</File>
    <Title>svg</Title>
    <Author>Microsoft Corporation</Author>
    <Description>已定義命名空間之 svg 的標記程式碼片段</Description>
    <Keywords />
    <Language>html</Language>
    <Code>&lt;svg xmlns="http://www.w3.org/2000/svg"&gt;$end$&lt;/svg&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Web\Snippets\HTML\1028\HTML\table.snippet</File>
    <Title>表格</Title>
    <Author>Microsoft Corporation</Author>
    <Description>表格的標記程式碼片段</Description>
    <Keywords />
    <Language>html</Language>
    <Code>&lt;table&gt;
    &lt;tr&gt;
        &lt;td&gt;$selected$$end$&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Web\Snippets\HTML\1028\HTML\ul.snippet</File>
    <Title>ul</Title>
    <Author>Microsoft Corporation</Author>
    <Description>清單的標記程式碼片段</Description>
    <Keywords />
    <Language>html</Language>
    <Code>&lt;$shortcut$&gt;
    &lt;li&gt;$selected$$end$&lt;/li&gt;
&lt;/$shortcut$&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Web\Snippets\HTML\1028\HTML\video.snippet</File>
    <Title>視訊</Title>
    <Author>Microsoft Corporation</Author>
    <Description>有多重來源之視訊的標記程式碼片段</Description>
    <Keywords />
    <Language>html</Language>
    <Code>&lt;video controls="controls"&gt;
  &lt;source src="$file$.mp4"  type="video/mp4" /&gt;
  &lt;source src="$file$.webm" type="video/webm" /&gt;
  &lt;source src="$file$.ogv"  type="video/ogg" /&gt;
&lt;/video&gt;$end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Web\Snippets\HTML\1028\HTML\xhtml10f.snippet</File>
    <Title>xhtml10f</Title>
    <Author>Microsoft Corporation</Author>
    <Description>XHTML 1.0 Frameset Doctype 宣告的標記程式碼片段</Description>
    <Keywords />
    <Language>html</Language>
    <Code>&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd"&gt;$end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Web\Snippets\HTML\1028\HTML\xhtml10s.snippet</File>
    <Title>xhtml10s</Title>
    <Author>Microsoft Corporation</Author>
    <Description>XHTML 1.0 Strict Doctype 宣告的標記程式碼片段</Description>
    <Keywords />
    <Language>html</Language>
    <Code>&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&gt;$end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Web\Snippets\HTML\1028\HTML\xhtml10t.snippet</File>
    <Title>xhtml10t</Title>
    <Author>Microsoft Corporation</Author>
    <Description>XHTML 1.0 Transitional Doctype 宣告的標記程式碼片段</Description>
    <Keywords />
    <Language>html</Language>
    <Code>&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;$end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Web\Snippets\HTML\1028\HTML\xhtml11.snippet</File>
    <Title>xhtml11</Title>
    <Author>Microsoft Corporation</Author>
    <Description>XHTML 1.1 Doctype 宣告的標記程式碼片段</Description>
    <Keywords />
    <Language>html</Language>
    <Code>&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"&gt;$end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Web\Snippets\HTML\1028\HTML\xhtml5.snippet</File>
    <Title>xhtml5</Title>
    <Author>Microsoft Corporation</Author>
    <Description>XHTML 5 Doctype 宣告和命名空間的標記程式碼片段</Description>
    <Keywords />
    <Language>html</Language>
    <Code>&lt;!DOCTYPE html&gt;
    &lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
    &lt;head&gt;
        &lt;title&gt;$end$&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
    
    &lt;/body&gt;
    &lt;/html&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Web\Snippets\HTML\1028\ASP.NET\checkbox.snippet</File>
    <Title>checkbox</Title>
    <Author>Microsoft Corporation</Author>
    <Description>核取方塊控制項的標記程式碼片段</Description>
    <Keywords />
    <Language>html</Language>
    <Code>&lt;asp:checkbox text="$text$" runat="server" /&gt;$end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Web\Snippets\HTML\1028\ASP.NET\detailsview.snippet</File>
    <Title>detailsview</Title>
    <Author>Microsoft Corporation</Author>
    <Description>DetailsView 控制項的標記程式碼片段</Description>
    <Keywords />
    <Language>html</Language>
    <Code>&lt;asp:DetailsView runat="server" /&gt;$end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Web\Snippets\HTML\1028\ASP.NET\dynamiccontrol.snippet</File>
    <Title>dynamiccontrol</Title>
    <Author>Microsoft Corporation</Author>
    <Description>動態控制項的標記程式碼片段</Description>
    <Keywords />
    <Language>html</Language>
    <Code>&lt;asp:dynamiccontrol datafield="$datafield$" runat="server" /&gt;$end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Web\Snippets\HTML\1028\ASP.NET\dynamicdatamanager.snippet</File>
    <Title>dynamicdatamanager</Title>
    <Author>Microsoft Corporation</Author>
    <Description>dynamicdatamanager 控制項的標記程式碼片段</Description>
    <Keywords />
    <Language>html</Language>
    <Code>&lt;asp:dynamicdatamanager runat="server" /&gt;$end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Web\Snippets\HTML\1028\ASP.NET\formr.snippet</File>
    <Title>formr</Title>
    <Author>Microsoft Corporation</Author>
    <Description>伺服器端表單的標記程式碼片段</Description>
    <Keywords />
    <Language>html</Language>
    <Code>&lt;form runat="server"&gt;$selected$$end$&lt;/form&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Web\Snippets\HTML\1028\ASP.NET\gridview.snippet</File>
    <Title>gridview</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Gridview 控制項的標記程式碼片段</Description>
    <Keywords />
    <Language>html</Language>
    <Code>&lt;asp:gridview runat="server"&gt;$end$&lt;/asp:gridview&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Web\Snippets\HTML\1028\ASP.NET\hyperlink.snippet</File>
    <Title>超連結</Title>
    <Author>Microsoft Corporation</Author>
    <Description>超連結控制項的標記程式碼片段</Description>
    <Keywords />
    <Language>html</Language>
    <Code>&lt;asp:hyperlink navigateurl="$navigateurl$" runat="server" /&gt;$end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Web\Snippets\HTML\1028\ASP.NET\image.snippet</File>
    <Title>影像</Title>
    <Author>Microsoft Corporation</Author>
    <Description>包含影像的控制項的標記程式碼片段</Description>
    <Keywords />
    <Language>html</Language>
    <Code>&lt;asp:$shortcut$ imageurl="$imageurl$" runat="server" /&gt;$end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Web\Snippets\HTML\1028\ASP.NET\label.snippet</File>
    <Title>標籤</Title>
    <Author>Microsoft Corporation</Author>
    <Description>包含文字的控制項的標記程式碼片段</Description>
    <Keywords />
    <Language>html</Language>
    <Code>&lt;asp:$shortcut$ text="$text$" runat="server" /&gt;$end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Web\Snippets\HTML\1028\ASP.NET\listbox.snippet</File>
    <Title>清單方塊</Title>
    <Author>Microsoft Corporation</Author>
    <Description>清單控制項的標記程式碼片段</Description>
    <Keywords />
    <Language>html</Language>
    <Code>&lt;asp:$shortcut$ runat="server"&gt;
    &lt;asp:listitem text="$text1$" /&gt;
    &lt;asp:listitem text="$text2$" /&gt;
&lt;/asp:$shortcut$&gt;$end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Web\Snippets\HTML\1028\ASP.NET\listitem.snippet</File>
    <Title>清單項目</Title>
    <Author>Microsoft Corporation</Author>
    <Description>清單項目控制項的標記程式碼片段</Description>
    <Keywords />
    <Language>html</Language>
    <Code>&lt;asp:listitem text="$text$" /&gt;$end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Web\Snippets\HTML\1028\ASP.NET\listview.snippet</File>
    <Title>listview</Title>
    <Author>Microsoft Corporation</Author>
    <Description>listview 控制項的標記程式碼片段</Description>
    <Keywords />
    <Language>html</Language>
    <Code>&lt;asp:listview runat="server"&gt;
    &lt;itemtemplate&gt;$selected$$end$&lt;/itemtemplate&gt;
&lt;/asp:listview&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Web\Snippets\HTML\1028\ASP.NET\loginname.snippet</File>
    <Title>loginname</Title>
    <Author>Microsoft Corporation</Author>
    <Description>loginname 控制項的標記程式碼片段</Description>
    <Keywords />
    <Language>html</Language>
    <Code>&lt;asp:loginname formatstring="$formatstring$" runat="server" /&gt;$end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Web\Snippets\HTML\1028\ASP.NET\loginstatus.snippet</File>
    <Title>loginstatus</Title>
    <Author>Microsoft Corporation</Author>
    <Description>loginstatus 控制項的標記程式碼片段</Description>
    <Keywords />
    <Language>html</Language>
    <Code>&lt;asp:loginstatus runat="server" /&gt;$end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Web\Snippets\HTML\1028\ASP.NET\loginview.snippet</File>
    <Title>loginview</Title>
    <Author>Microsoft Corporation</Author>
    <Description>loginview 控制項的標記程式碼片段</Description>
    <Keywords />
    <Language>html</Language>
    <Code>&lt;asp:loginview runat="server"&gt;
    &lt;anonymoustemplate&gt;$selected$$end$&lt;/anonymoustemplate&gt;
    &lt;loggedintemplate&gt;&lt;/loggedintemplate&gt;
&lt;/asp:loginview&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Web\Snippets\HTML\1028\ASP.NET\multiview.snippet</File>
    <Title>multiview</Title>
    <Author>Microsoft Corporation</Author>
    <Description>multiview 控制項的標記程式碼片段</Description>
    <Keywords />
    <Language>html</Language>
    <Code>&lt;asp:multiview activeviewindex="0" runat="server"&gt;
    &lt;asp:view runat="server"&gt;$selected$$end$&lt;/asp:view&gt;
&lt;/asp:multiview&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Web\Snippets\HTML\1028\ASP.NET\panel.snippet</File>
    <Title>面板</Title>
    <Author>Microsoft Corporation</Author>
    <Description>面板控制項的標記程式碼片段</Description>
    <Keywords />
    <Language>html</Language>
    <Code>&lt;asp:panel runat="server"&gt;$selected$$end$&lt;/asp:panel&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Web\Snippets\HTML\1028\ASP.NET\placeholder.snippet</File>
    <Title>預留位置</Title>
    <Author>Microsoft Corporation</Author>
    <Description>預留位置控制項的標記程式碼片段</Description>
    <Keywords />
    <Language>html</Language>
    <Code>&lt;asp:placeholder runat="server" /&gt;$end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Web\Snippets\HTML\1028\ASP.NET\radiobutton.snippet</File>
    <Title>radiobutton</Title>
    <Author>Microsoft Corporation</Author>
    <Description>radiobutton 控制項的標記程式碼片段</Description>
    <Keywords />
    <Language>html</Language>
    <Code>&lt;asp:radiobutton text="$text$" runat="server" /&gt;$end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Web\Snippets\HTML\1028\ASP.NET\register.snippet</File>
    <Title>註冊</Title>
    <Author>Microsoft Corporation</Author>
    <Description>自訂控制項註冊指示詞的標記程式碼片段</Description>
    <Keywords />
    <Language>html</Language>
    <Code>&lt;%@ Register tagprefix="$tagprefix$" namespace="$namespace$" assembly="$assembly$" %&gt;$end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Web\Snippets\HTML\1028\ASP.NET\registerascx.snippet</File>
    <Title>registerascx</Title>
    <Author>Microsoft Corporation</Author>
    <Description>使用者控制項註冊指示詞的標記程式碼片段</Description>
    <Keywords />
    <Language>html</Language>
    <Code>&lt;%@ Register tagprefix="$tagprefix$" tagname="$tagname$" src="$src$" %&gt;$end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Web\Snippets\HTML\1028\ASP.NET\repeater.snippet</File>
    <Title>重複項</Title>
    <Author>Microsoft Corporation</Author>
    <Description>資料繫結控制項的標記程式碼片段</Description>
    <Keywords />
    <Language>html</Language>
    <Code>&lt;asp:$shortcut$ runat="server"&gt;
    &lt;itemtemplate&gt;$selected$$end$&lt;/itemtemplate&gt;
&lt;/asp:$shortcut$&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Web\Snippets\HTML\1028\ASP.NET\requiredfieldvalidator.snippet</File>
    <Title>requiredfieldvalidator</Title>
    <Author>Microsoft Corporation</Author>
    <Description>驗證程式控制項的標記程式碼片段</Description>
    <Keywords />
    <Language>html</Language>
    <Code>&lt;asp:$shortcut$ errormessage="$errormessage$" controltovalidate="$controltovalidate$" runat="server"/&gt;$end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Web\Snippets\HTML\1028\ASP.NET\runat.snippet</File>
    <Title>runat</Title>
    <Author>Microsoft Corporation</Author>
    <Description>runat 屬性的標記程式碼片段</Description>
    <Keywords />
    <Language>html</Language>
    <Code>runat="server"$end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Web\Snippets\HTML\1028\ASP.NET\scriptreference.snippet</File>
    <Title>scriptreference</Title>
    <Author>Microsoft Corporation</Author>
    <Description>指令碼參考的標記程式碼片段</Description>
    <Keywords />
    <Language>html</Language>
    <Code>&lt;asp:scriptreference path="$path$" /&gt;$end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Web\Snippets\HTML\1028\ASP.NET\scripts.snippet</File>
    <Title>指令碼範本</Title>
    <Author>Microsoft Corporation</Author>
    <Description>scriptmanager 指令碼集合的標記程式碼片段</Description>
    <Keywords />
    <Language>html</Language>
    <Code>&lt;scripts&gt;
    &lt;asp:scriptreference path="$path$" /&gt;$end$
&lt;/scripts&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Web\Snippets\HTML\1028\ASP.NET\servicereference.snippet</File>
    <Title>servicereference</Title>
    <Author>Microsoft Corporation</Author>
    <Description>服務參考的標記程式碼片段</Description>
    <Keywords />
    <Language>html</Language>
    <Code>&lt;asp:servicereference path="$path$" /&gt;$end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Web\Snippets\HTML\1028\ASP.NET\sitemappath.snippet</File>
    <Title>sitemappath</Title>
    <Author>Microsoft Corporation</Author>
    <Description>sitemappath 控制項的標記程式碼片段</Description>
    <Keywords />
    <Language>html</Language>
    <Code>&lt;asp:sitemappath runat="server" /&gt;$end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Web\Snippets\HTML\1028\ASP.NET\sm.snippet</File>
    <Title>sm</Title>
    <Author>Microsoft Corporation</Author>
    <Description>scriptmanager 控制項的標記程式碼片段</Description>
    <Keywords />
    <Language>html</Language>
    <Code>&lt;asp:scriptmanager runat="server" /&gt;$end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Web\Snippets\HTML\1028\ASP.NET\smp.snippet</File>
    <Title>smp</Title>
    <Author>Microsoft Corporation</Author>
    <Description>scriptmanagerproxy 控制項的標記程式碼片段</Description>
    <Keywords />
    <Language>html</Language>
    <Code>&lt;asp:scriptmanagerproxy runat="server" /&gt;$end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Web\Snippets\HTML\1028\ASP.NET\sqldatasource.snippet</File>
    <Title>sqldatasource</Title>
    <Author>Microsoft Corporation</Author>
    <Description>資料來源控制項的標記程式碼片段</Description>
    <Keywords />
    <Language>html</Language>
    <Code>&lt;asp:$shortcut$ runat="server" /&gt;$end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Web\Snippets\HTML\1028\ASP.NET\textbox.snippet</File>
    <Title>textbox</Title>
    <Author>Microsoft Corporation</Author>
    <Description>文字方塊控制項的標記程式碼片段</Description>
    <Keywords />
    <Language>html</Language>
    <Code>&lt;asp:textbox runat="server" /&gt;$end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Web\Snippets\HTML\1028\ASP.NET\updatepanel.snippet</File>
    <Title>updatepanel</Title>
    <Author>Microsoft Corporation</Author>
    <Description>更新面板的標記程式碼片段</Description>
    <Keywords />
    <Language>html</Language>
    <Code>&lt;asp:updatepanel runat="server"&gt;
    &lt;contenttemplate&gt;$selected$$end$&lt;/contenttemplate&gt;
&lt;/asp:updatepanel&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Web\Snippets\HTML\1028\ASP.NET\updateprogress.snippet</File>
    <Title>updateprogress</Title>
    <Author>Microsoft Corporation</Author>
    <Description>updateprogress 控制項的標記程式碼片段</Description>
    <Keywords />
    <Language>html</Language>
    <Code>&lt;asp:updateprogress runat="server"&gt;
    &lt;progresstemplate&gt;$end$&lt;/progresstemplate&gt;
&lt;/asp:updateprogress&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Web\Snippets\HTML\1028\ASP.NET\validationsummary.snippet</File>
    <Title>validationsummary</Title>
    <Author>Microsoft Corporation</Author>
    <Description>validationsummary 控制項的標記程式碼片段</Description>
    <Keywords />
    <Language>html</Language>
    <Code>&lt;asp:validationsummary runat="server" /&gt;$end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Web\Snippets\HTML\1028\ASP.NET\view.snippet</File>
    <Title>檢視</Title>
    <Author>Microsoft Corporation</Author>
    <Description>檢視控制項的標記程式碼片段</Description>
    <Keywords />
    <Language>html</Language>
    <Code>&lt;asp:view runat="server"&gt;$selected$$end$&lt;/asp:view&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>c:\program files (x86)\microsoft visual studio\2019\professional\common7\ide\extensions\25fmjdlm.yjg\snippets\VueJS Snippets HTML\code.snippet</File>
    <Title>Scaffold SFC</Title>
    <Author>Sridhar Nathani</Author>
    <Description>Code snippet to scaffold a Single File Component (SFC)</Description>
    <Keywords />
    <Language>HTML</Language>
    <Code>
            
&lt;template&gt;
  &lt;div class="^name^"&gt;
    {{context.name}}
  &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
  //imports
  //import mxin1 from '@/mixins/mixin1';
  
  //exports
  export default {
    name: '^name^',
    //mixins:[mxin1],
    props: { context: Object },
    data() {
      let vm = this;

      //public interface
      return {
        isBusy: false
        //define data() properties here ...
      }
    },
    computed: {
      //
    },
    methods: {
      //
    },
    watch: {
      isBusy(newVal, oldVal) {
        //show or hide busy indicator
      }
    },

    //Life-cycle hooks  ---------- ---------- ---------- ---------- ----------
    beforeCreate() {
      //
    },
    created() {
      //
    },
    beforeMount() {
      //
    },
    mounted() {
      //
    },
    beforeUpdate() {
      //
    },
    updated() {
      /*
      this.$nextTick(function () {
        // Code that will run only after the
        // entire view has been re-rendered
      });
      */
    },
    /*
    activated() {
      //
    },
    deactivated() {
      //
    },

    beforeDestroy() {
      //
    },
    destroyed() {
      //
    },
    errorCaptured() {
      console.log(...arguments);
      return false;
    }
    */
  }
&lt;/script&gt;

&lt;style scoped&gt;
  .^name^ {
    display: block;
  }
&lt;/style&gt;
^end^
</Code>
    <Delimiter>^</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>c:\program files (x86)\microsoft visual studio\2019\professional\common7\ide\extensions\25fmjdlm.yjg\snippets\VueJS Snippets HTML\code.snippet</File>
    <Title>Scaffold a SFC script tag</Title>
    <Author>Sridhar Nathani</Author>
    <Description>Code snippet to scaffold a script tag for SFC</Description>
    <Keywords />
    <Language>HTML</Language>
    <Code>

&lt;script&gt;
  //imports
  //import mxin1 from '@/mixins/mixin1';
  
  //exports
  export default {
    name: '^name^',
    //mixins:[mxin1],
    functional: false,
    props: { context: Object },
    data() {
      let vm = this;

      //public interface
      return {
        isBusy: false
        //define data() properties here ...
      }
    },
    computed: {
      //
    },
    methods: {
      //
    },
    watch: {
      isBusy(newVal, oldVal) {
        //show or hide busy indicator
      }
    },

    //Life-cycle hooks  ---------- ---------- ---------- ---------- ----------
    beforeCreate() {
      //
    },
    created() {
      //
    },
    beforeMount() {
      //
    },
    mounted() {
      //
    },
    beforeUpdate() {
      //
    },
    updated() {
      /*
      this.$nextTick(function () {
        // Code that will run only after the
        // entire view has been re-rendered
      });
      */
    },
    /*
    activated() {
      //
    },
    deactivated() {
      //
    },

    beforeDestroy() {
      //
    },
    destroyed() {
      //
    },
    errorCaptured() {
      console.log(...arguments);
      return false;
    }
    */
  }
&lt;/script&gt;
^end^
</Code>
    <Delimiter>^</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>c:\program files (x86)\microsoft visual studio\2019\professional\common7\ide\extensions\25fmjdlm.yjg\snippets\VueJS Snippets HTML\code.snippet</File>
    <Title>Scaffold SFC style tag</Title>
    <Author>Sridhar Nathani</Author>
    <Description>Code snippet to scaffold a style tag for SFC</Description>
    <Keywords />
    <Language>HTML</Language>
    <Code>
            
&lt;style scoped&gt;
  .^name^ {
    display: block;
  }^end^
&lt;/style&gt;
</Code>
    <Delimiter>^</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>c:\program files (x86)\microsoft visual studio\2019\professional\common7\ide\extensions\25fmjdlm.yjg\snippets\VueJS Snippets HTML\code.snippet</File>
    <Title>Scaffold a SFC template tag</Title>
    <Author>Sridhar Nathani</Author>
    <Description>Code snippet to scaffold a template tag</Description>
    <Keywords />
    <Language>HTML</Language>
    <Code>           
&lt;template&gt;
  &lt;div class="^name^"&gt;
^end^  
  &lt;/div&gt;
&lt;/template&gt;
</Code>
    <Delimiter>^</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>c:\program files (x86)\microsoft visual studio\2019\professional\common7\ide\extensions\25fmjdlm.yjg\snippets\VueJS Snippets HTML\code.snippet</File>
    <Title>Slot tag</Title>
    <Author>Sridhar Nathani</Author>
    <Description>Code snippet for slot tag</Description>
    <Keywords />
    <Language>HTML</Language>
    <Code>           
  &lt;slot class="^name^"&gt;
    ^end^  
  &lt;/slot&gt;
</Code>
    <Delimiter>^</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>c:\program files (x86)\microsoft visual studio\2019\professional\common7\ide\extensions\25fmjdlm.yjg\snippets\VueJS Snippets HTML\code.snippet</File>
    <Title>v-for expansion</Title>
    <Author>Sridhar Nathani</Author>
    <Description>Snippet to expand v-for</Description>
    <Keywords />
    <Language>HTML</Language>
    <Code>           
v-for="(item,index) in items" :key="index"
            </Code>
    <Delimiter>^</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>c:\program files (x86)\microsoft visual studio\2019\professional\common7\ide\extensions\microsoft\web\mvc4\Snippets\HTML\1028\actionlink.snippet</File>
    <Title>actionlink4</Title>
    <Author>Microsoft Corporation</Author>
    <Description>ASP.NET MVC 動作連結 Helper 的標記程式碼片段</Description>
    <Keywords />
    <Language>html</Language>
    <Code>&lt;%: Html.ActionLink("$linktext$", "$actionname$") %&gt;$end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>c:\program files (x86)\microsoft visual studio\2019\professional\common7\ide\extensions\microsoft\web\mvc4\Snippets\HTML\1028\beginformajaxcs.snippet</File>
    <Title>beginformajaxcs4</Title>
    <Author>Microsoft Corporation</Author>
    <Description>C# 中啟用 ASP.NET MVC AJAX 表單 Helper 的標記程式碼片段</Description>
    <Keywords />
    <Language>html</Language>
    <Code>&lt;% using (Ajax.BeginForm("$actionname$", new AjaxOptions {UpdateTargetId= "$elementid$" })) { %&gt;
$selected$$end$
&lt;% } %&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>c:\program files (x86)\microsoft visual studio\2019\professional\common7\ide\extensions\microsoft\web\mvc4\Snippets\HTML\1028\beginformajaxvb.snippet</File>
    <Title>beginformajaxvb4</Title>
    <Author>Microsoft Corporation</Author>
    <Description>VB 中啟用 ASP.NET MVC AJAX 表單 Helper 的標記程式碼片段</Description>
    <Keywords />
    <Language>html</Language>
    <Code>&lt;% Using Ajax.BeginForm("$actionname$", new AjaxOptions {UpdateTargetId= "$elementid$" }) %&gt;
$selected$$end$
&lt;% End Using %&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>c:\program files (x86)\microsoft visual studio\2019\professional\common7\ide\extensions\microsoft\web\mvc4\Snippets\HTML\1028\beginformcs.snippet</File>
    <Title>beginformcs4</Title>
    <Author>Microsoft Corporation</Author>
    <Description>C# 中 ASP.NET MVC 表單 Helper 的標記程式碼片段</Description>
    <Keywords />
    <Language>html</Language>
    <Code>&lt;% using (Html.BeginForm()) { %&gt;
$selected$$end$
&lt;% } %&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>c:\program files (x86)\microsoft visual studio\2019\professional\common7\ide\extensions\microsoft\web\mvc4\Snippets\HTML\1028\beginformvb.snippet</File>
    <Title>beginformvb4</Title>
    <Author>Microsoft Corporation</Author>
    <Description>VB 中 ASP.NET MVC 表單 Helper 的標記程式碼片段</Description>
    <Keywords />
    <Language>html</Language>
    <Code>&lt;% Using Html.BeginForm() %&gt;
$selected$$end$
&lt;% End Using %&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>c:\program files (x86)\microsoft visual studio\2019\professional\common7\ide\extensions\microsoft\web\mvc4\Snippets\HTML\1028\displayforcs.snippet</File>
    <Title>displayforcs4</Title>
    <Author>Microsoft Corporation</Author>
    <Description>ASP.NET MVC 樣板化 Helper 的標記程式碼片段。</Description>
    <Keywords />
    <Language>html</Language>
    <Code>&lt;%: Html.DisplayFor($param$ =&gt; $param$.$property$) %&gt;$end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>c:\program files (x86)\microsoft visual studio\2019\professional\common7\ide\extensions\microsoft\web\mvc4\Snippets\HTML\1028\displayforvb.snippet</File>
    <Title>displayforvb4</Title>
    <Author>Microsoft Corporation</Author>
    <Description>ASP.NET MVC 樣板化 Helper 的標記程式碼片段。</Description>
    <Keywords />
    <Language>html</Language>
    <Code>&lt;%: Html.DisplayFor(Function($param$) $param$.$property$) %&gt;$end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>c:\program files (x86)\microsoft visual studio\2019\professional\common7\ide\extensions\microsoft\web\mvc4\Snippets\HTML\1028\editorforcs.snippet</File>
    <Title>editorforcs4</Title>
    <Author>Microsoft Corporation</Author>
    <Description>ASP.NET MVC 樣板化 Helper 的標記程式碼片段。</Description>
    <Keywords />
    <Language>html</Language>
    <Code>&lt;%: Html.EditorFor($param$ =&gt; $param$.$property$) %&gt;$end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>c:\program files (x86)\microsoft visual studio\2019\professional\common7\ide\extensions\microsoft\web\mvc4\Snippets\HTML\1028\editorforvb.snippet</File>
    <Title>editorforvb4</Title>
    <Author>Microsoft Corporation</Author>
    <Description>ASP.NET MVC 樣板化 Helper 的標記程式碼片段。</Description>
    <Keywords />
    <Language>html</Language>
    <Code>&lt;%: Html.EditorFor(Function($param$) $param$.$property$) %&gt;$end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>c:\program files (x86)\microsoft visual studio\2019\professional\common7\ide\extensions\microsoft\web\mvc4\Snippets\HTML\1028\foreachcs.snippet</File>
    <Title>foreachcs4</Title>
    <Author>Microsoft Corporation</Author>
    <Description>C# 中 ASP.NET MVC foreach 陳述式的標記程式碼片段</Description>
    <Keywords />
    <Language>html</Language>
    <Code>&lt;% foreach ($type$ $identifier$ in $collection$) { %&gt;
$selected$$end$
&lt;% } %&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>c:\program files (x86)\microsoft visual studio\2019\professional\common7\ide\extensions\microsoft\web\mvc4\Snippets\HTML\1028\foreachvb.snippet</File>
    <Title>foreachvb4</Title>
    <Author>Microsoft Corporation</Author>
    <Description>VB 中 ASP.NET MVC foreach 陳述式的標記程式碼片段</Description>
    <Keywords />
    <Language>html</Language>
    <Code>&lt;% For Each $Variable$ As $ObjectType$ In $CollectionObject$ %&gt;
$selected$$end$
&lt;% Next %&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>c:\program files (x86)\microsoft visual studio\2019\professional\common7\ide\extensions\microsoft\web\mvc4\Snippets\HTML\1028\ifcs.snippet</File>
    <Title>ifcs4</Title>
    <Author>Microsoft Corporation</Author>
    <Description>C# 中程式碼區塊 if else 陳述式的標記程式碼片段</Description>
    <Keywords />
    <Language>html</Language>
    <Code>&lt;% if ($expression$) { %&gt;
$selected$$end$
&lt;% } %&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>c:\program files (x86)\microsoft visual studio\2019\professional\common7\ide\extensions\microsoft\web\mvc4\Snippets\HTML\1028\ifelsecs.snippet</File>
    <Title>ifelsecs4</Title>
    <Author>Microsoft Corporation</Author>
    <Description>C# 中程式碼區塊 if else 陳述式的標記程式碼片段</Description>
    <Keywords />
    <Language>html</Language>
    <Code>&lt;% if ($expression$) { %&gt;
$selected$$end$
&lt;% } else { %&gt;
 
&lt;% } %&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>c:\program files (x86)\microsoft visual studio\2019\professional\common7\ide\extensions\microsoft\web\mvc4\Snippets\HTML\1028\ifelsevb.snippet</File>
    <Title>ifelsevb4</Title>
    <Author>Microsoft Corporation</Author>
    <Description>VB 中程式碼區塊 if else 陳述式的標記程式碼片段</Description>
    <Keywords />
    <Language>html</Language>
    <Code>&lt;% If $condition$ Then %&gt;
$selected$$end$
&lt;% Else %&gt;
 
&lt;% End If %&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>c:\program files (x86)\microsoft visual studio\2019\professional\common7\ide\extensions\microsoft\web\mvc4\Snippets\HTML\1028\ifvb.snippet</File>
    <Title>ifvb4</Title>
    <Author>Microsoft Corporation</Author>
    <Description>VB 中程式碼區塊 if else 陳述式的標記程式碼片段</Description>
    <Keywords />
    <Language>html</Language>
    <Code>&lt;% If $condition$ Then %&gt;
$selected$$end$
&lt;% End If %&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>c:\program files (x86)\microsoft visual studio\2019\professional\common7\ide\extensions\microsoft\web\mvc4\Snippets\HTML\1028\renderpartialcs.snippet</File>
    <Title>renderpartialcs4</Title>
    <Author>Microsoft Corporation</Author>
    <Description>C# 中 ASP.NET MVC 部分檢視呈現的標記程式碼片段</Description>
    <Keywords />
    <Language>html</Language>
    <Code>&lt;% Html.RenderPartial("$viewname$"); %&gt;$end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>c:\program files (x86)\microsoft visual studio\2019\professional\common7\ide\extensions\microsoft\web\mvc4\Snippets\HTML\1028\renderpartialvb.snippet</File>
    <Title>renderpartialvb4</Title>
    <Author>Microsoft Corporation</Author>
    <Description>VB 中 ASP.NET MVC 部分檢視呈現的標記程式碼片段</Description>
    <Keywords />
    <Language>html</Language>
    <Code>&lt;% Html.RenderPartial("$viewname$") %&gt;$end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>c:\program files (x86)\microsoft visual studio\2019\professional\common7\ide\extensions\microsoft\web\mvc4\Snippets\HTML\1028\textboxmvc.snippet</File>
    <Title>textboxmvc4</Title>
    <Author>Microsoft Corporation</Author>
    <Description>ASP.NET MVC 文字方塊 Helper 的標記程式碼片段</Description>
    <Keywords />
    <Language>html</Language>
    <Code>&lt;%: Html.TextBox("$name$") %&gt;$end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>c:\program files (x86)\microsoft visual studio\2019\professional\common7\ide\extensions\microsoft\web\mvc4\Snippets\HTML\1028\validationsummarymvc.snippet</File>
    <Title>validationsummarymvc4</Title>
    <Author>Microsoft Corporation</Author>
    <Description>ASP.NET MVC 驗證摘要 Helper 的標記程式碼片段</Description>
    <Keywords />
    <Language>html</Language>
    <Code>&lt;%: Html.ValidationSummary() %&gt;$end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>c:\program files (x86)\microsoft visual studio\2019\professional\common7\ide\extensions\microsoft\web tools\Mvc\Snippets\HTML\1028\ASP.NET Web Stack 5\text.snippet</File>
    <Title>text</Title>
    <Author>Microsoft Corporation</Author>
    <Description>&lt;text&gt; 區塊的 Razor 程式碼片段</Description>
    <Keywords />
    <Language>html</Language>
    <Code>&lt;text&gt;$end$&lt;/text&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\JS\1028\Snippets\General\alert.snippet</File>
    <Title>alert</Title>
    <Author>Microsoft Corporation</Author>
    <Description>alert 函式呼叫的程式碼片段</Description>
    <Keywords />
    <Language>JavaScript</Language>
    <Code>alert($selected$);$end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\JS\1028\Snippets\General\cl.snippet</File>
    <Title>cl</Title>
    <Author>Microsoft Corporation</Author>
    <Description>console.log 的程式碼片段</Description>
    <Keywords />
    <Language>JavaScript</Language>
    <Code>console.log($end$);</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\JS\1028\Snippets\General\class.snippet</File>
    <Title>類別</Title>
    <Author>Microsoft Corporation</Author>
    <Description>類別的程式碼片段 (在 JavaScript 語言的 ECMAScript 6 版或更新版本中支援)</Description>
    <Keywords />
    <Language>JavaScript</Language>
    <Code>
     class $name$ {
     
     }
    </Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\JS\1028\Snippets\General\do.snippet</File>
    <Title>do</Title>
    <Author>Microsoft Corporation</Author>
    <Description>do...while 迴圈的程式碼片段</Description>
    <Keywords />
    <Language>JavaScript</Language>
    <Code>do {
    $selected$$end$
} while ($expression$);</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\JS\1028\Snippets\General\else.snippet</File>
    <Title>else</Title>
    <Author>Microsoft Corporation</Author>
    <Description>else 陳述式的程式碼片段</Description>
    <Keywords />
    <Language>JavaScript</Language>
    <Code>else {
    $selected$$end$
}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\JS\1028\Snippets\General\for.snippet</File>
    <Title>for</Title>
    <Author>Microsoft Corporation</Author>
    <Description>for 迴圈的程式碼片段</Description>
    <Keywords />
    <Language>JavaScript</Language>
    <Code>for (var $index$ = 0; $index$ &lt; $max$; $index$++) {
    $selected$$end$
}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\JS\1028\Snippets\General\forin.snippet</File>
    <Title>forin</Title>
    <Author>Microsoft Corporation</Author>
    <Description>for...in 迴圈的程式碼片段</Description>
    <Keywords />
    <Language>JavaScript</Language>
    <Code>for (var $index$ in $object$) {
    $selected$$end$
}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\JS\1028\Snippets\General\forr.snippet</File>
    <Title>forr</Title>
    <Author>Microsoft Corporation</Author>
    <Description>反向 for 迴圈的程式碼片段</Description>
    <Keywords />
    <Language>JavaScript</Language>
    <Code>for (var $index$ = $max$ - 1; $index$ &gt;= 0; $index$--) {
    $selected$$end$
}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\JS\1028\Snippets\General\function.snippet</File>
    <Title>函式</Title>
    <Author>Microsoft Corporation</Author>
    <Description>函式的程式碼片段</Description>
    <Keywords />
    <Language>JavaScript</Language>
    <Code>function $name$() {
    $selected$$end$
}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\JS\1028\Snippets\General\if.snippet</File>
    <Title>if</Title>
    <Author>Microsoft Corporation</Author>
    <Description>if 陳述式的程式碼片段</Description>
    <Keywords />
    <Language>JavaScript</Language>
    <Code>if ($expression$) {
    $selected$$end$
}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\JS\1028\Snippets\General\iife.snippet</File>
    <Title>iife</Title>
    <Author>Microsoft Corporation</Author>
    <Description>立即叫用函式運算式的程式碼片段</Description>
    <Keywords />
    <Language>JavaScript</Language>
    <Code>(function ($args$) {

    $selected$$end$

})($args$);</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\JS\1028\Snippets\General\switch.snippet</File>
    <Title>switch</Title>
    <Author>Microsoft Corporation</Author>
    <Description>switch 陳述式的程式碼片段</Description>
    <Keywords />
    <Language>JavaScript</Language>
    <Code>switch ($expression$) {
    $end$
    default:
}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\JS\1028\Snippets\General\try.snippet</File>
    <Title>try</Title>
    <Author>Microsoft Corporation</Author>
    <Description>try catch 陳述式的程式碼片段</Description>
    <Keywords />
    <Language>JavaScript</Language>
    <Code>try {
    $selected$
} catch ($exception$) {
    $end$
}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\JS\1028\Snippets\General\while.snippet</File>
    <Title>while</Title>
    <Author>Microsoft Corporation</Author>
    <Description>while 迴圈的程式碼片段</Description>
    <Keywords />
    <Language>JavaScript</Language>
    <Code>while ($expression$) {
    $selected$$end$
}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\JS\1028\Snippets\ASP.NET AJAX\behavior.snippet</File>
    <Title>行為</Title>
    <Author>Microsoft Corporation</Author>
    <Description>ASP.NET AJAX 用戶端控制的程式碼片段</Description>
    <Keywords />
    <Language>JavaScript</Language>
    <Code>Type.registerNamespace("$namespace$");

$namespace$.$controlname$ = function(element) {
    $namespace$.$controlname$.initializeBase(this, [element]);
}

$namespace$.$controlname$.prototype = {
    initialize: function() {
        $namespace$.$controlname$.callBaseMethod(this, 'initialize');
    },
    dispose: function() {
        $namespace$.$controlname$.callBaseMethod(this, 'dispose');
    }
}

$namespace$.$controlname$.registerClass('$namespace$.$controlname$', Sys.UI.Behavior);$end$
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\JS\1028\Snippets\ASP.NET AJAX\control.snippet</File>
    <Title>控制項</Title>
    <Author>Microsoft Corporation</Author>
    <Description>ASP.NET AJAX 用戶端控制的程式碼片段</Description>
    <Keywords />
    <Language>JavaScript</Language>
    <Code>Type.registerNamespace("$namespace$");

$namespace$.$controlname$ = function(element) {
    $namespace$.$controlname$.initializeBase(this, [element]);
}

$namespace$.$controlname$.prototype = {
    initialize: function() {
        $namespace$.$controlname$.callBaseMethod(this, 'initialize');
    },
    dispose: function() {
        $namespace$.$controlname$.callBaseMethod(this, 'dispose');
    }
}

$namespace$.$controlname$.registerClass('$namespace$.$controlname$', Sys.UI.Control);$end$
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\JS\1028\Snippets\ASP.NET AJAX\create.snippet</File>
    <Title>create</Title>
    <Author>Microsoft Corporation</Author>
    <Description>$create() 的程式碼片段</Description>
    <Keywords />
    <Language>JavaScript</Language>
    <Code>$$create($type$, {}, {}, {}, $element$)$end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\JS\1028\Snippets\Angular 1\ng.controller.snippet</File>
    <Title>ngctrl</Title>
    <Author>Microsoft Corporation</Author>
    <Description>用於新增 Angular Controller 的範本</Description>
    <Keywords />
    <Language>JavaScript</Language>
    <Code>
(function () {
    'use strict';

    angular
      .module('$module$')
      .controller('$controller$', ['$dependency$', $controller$]);

    function $controller$($dependency$) {
        var vm = this;

        vm.title = '';

        activate();

        function activate() { }
    }
})();
                </Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\JS\1028\Snippets\Angular 1\ng.directive.snippet</File>
    <Title>ngdir</Title>
    <Author>Microsoft Corporation</Author>
    <Description>用於新增 Angular Directive 的範本</Description>
    <Keywords />
    <Language>JavaScript</Language>
    <Code> 
(function () {
    'use strict';
    
    angular
      .module('$module$')
      .directive('$directive$', ['$dependency$', $directive$]);

    function $directive$($dependency$) {
        var directive = {
            link: link,
            restrict: 'EA'
        };

        function link(scope, element, attrs) {
        }
        
        return directive;
    }
})();

                </Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\JS\1028\Snippets\Angular 1\ng.service.snippet</File>
    <Title>ngservice</Title>
    <Author>Microsoft Corporation</Author>
    <Description>用於新增 Angular Service 的範本</Description>
    <Keywords />
    <Language>JavaScript</Language>
    <Code>
(function () {
    'use strict';

    angular
      .module('$module$')
      .factory('$service$', ['$dependency$', $service$]);

    function $service$($dependency$) {
        var service = {
            $member1$: $member1$
        };

        function $member1$() {

        }
        
        return service;
    }
})();
                </Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Common7\IDE\Extensions\Microsoft\SQLEditor\Snippets\1028\Function\Create Inline Table Function.snippet</File>
    <Title>建立內嵌資料表函式</Title>
    <Author>Microsoft Corporation</Author>
    <Description>建立內嵌資料表函式。</Description>
    <Keywords />
    <Language>SQL_SSDT</Language>
    <Code>
CREATE FUNCTION [$SchemaName$].[$FunctionName$]
(
    @$Param1$ $Datatype_Param1$,
    @$Param2$ $Datatype_Param2$
)
RETURNS TABLE AS RETURN
(
    SELECT @$Param1$ AS c1,
           @$Param2$ AS c2
)
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Common7\IDE\Extensions\Microsoft\SQLEditor\Snippets\1028\Function\Create Multi-Statement Table Function.snippet</File>
    <Title>建立多重陳述式資料表函式</Title>
    <Author>Microsoft Corporation</Author>
    <Description>建立多重陳述式資料表函式。</Description>
    <Keywords />
    <Language>SQL_SSDT</Language>
    <Code>
CREATE FUNCTION [$SchemaName$].[$FunctionName$]
(
    @$Param1$ $Datatype_Param1$,
    @$Param2$ $Datatype_Param2$
)
RETURNS @$TableVarName$ TABLE 
(
    [$Column1$] $Datatype_Column1$,
    [$Column2$] $Datatype_Column2$
)
AS
BEGIN
    INSERT @$TableVarName$
    SELECT @$Param1$, @$Param2$
    RETURN 
END
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Common7\IDE\Extensions\Microsoft\SQLEditor\Snippets\1028\Function\Create Scalar Function.snippet</File>
    <Title>建立純量函式</Title>
    <Author>Microsoft Corporation</Author>
    <Description>建立純量函式。</Description>
    <Keywords />
    <Language>SQL_SSDT</Language>
    <Code>
CREATE FUNCTION [$SchemaName$].[$FunctionName$]
(
    @$Param1$ $Datatype_Param1$,
    @$Param2$ $Datatype_Param2$
)
RETURNS $Returned_datatype$
AS
BEGIN

    RETURN @$Param1$ + @$Param2$

END
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Common7\IDE\Extensions\Microsoft\SQLEditor\Snippets\1028\Index\Create Index Basic.snippet</File>
    <Title>建立索引基本</Title>
    <Author>Microsoft Corporation</Author>
    <Description>建立簡單、非叢集的索引。</Description>
    <Keywords />
    <Language>SQL_SSDT</Language>
    <Code>
CREATE INDEX $IndexName$
    ON $SchemaName$.$TableName$
    ($Column1$)
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Common7\IDE\Extensions\Microsoft\SQLEditor\Snippets\1028\Index\Create Primary Selective XML Index.snippet</File>
    <Title>建立主要選擇性 XML 索引</Title>
    <Author>Microsoft Corporation</Author>
    <Description>建立主要選擇性 XML 索引。</Description>
    <Keywords />
    <Language>SQL_SSDT</Language>
    <Code>
CREATE SELECTIVE XML INDEX $SelectiveXMLIndexName$
    ON [$SchemaName$].[$TableName$]
    ($XMLColumn1$)
    FOR
    (
        [$XPath1$]='/'
    )
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Common7\IDE\Extensions\Microsoft\SQLEditor\Snippets\1028\Index\Create Primary XML Index.snippet</File>
    <Title>建立主要 XML 索引</Title>
    <Author>Microsoft Corporation</Author>
    <Description>建立主要 XML 索引。</Description>
    <Keywords />
    <Language>SQL_SSDT</Language>
    <Code>
CREATE PRIMARY XML INDEX $XMLIndexName$
    ON [$SchemaName$].[$TableName$]
    ($XMLColumn1$)
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Common7\IDE\Extensions\Microsoft\SQLEditor\Snippets\1028\Index\Create Unique Non-Clustered Index.snippet</File>
    <Title>建立唯一的非叢集索引</Title>
    <Author>Microsoft Corporation</Author>
    <Description>建立唯一、非叢集的索引。</Description>
    <Keywords />
    <Language>SQL_SSDT</Language>
    <Code>
CREATE UNIQUE NONCLUSTERED INDEX $IndexName$
    ON $SchemaName$.$TableName$
    ($Column1$)
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Common7\IDE\Extensions\Microsoft\SQLEditor\Snippets\1028\Login\Create SQL Authentication Login.snippet</File>
    <Title>建立 SQL 驗證登入</Title>
    <Author>Microsoft Corporation</Author>
    <Description>建立 SQL Server 驗證登入。</Description>
    <Keywords />
    <Language>SQL_SSDT</Language>
    <Code>
CREATE LOGIN $LoginName$ WITH PASSWORD = N'$Password_val$'
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Common7\IDE\Extensions\Microsoft\SQLEditor\Snippets\1028\Login\Create Windows Authentication Login.snippet</File>
    <Title>建立 Windows 驗證登入</Title>
    <Author>Microsoft Corporation</Author>
    <Description>建立 Windows 驗證登入。</Description>
    <Keywords />
    <Language>SQL_SSDT</Language>
    <Code>
CREATE LOGIN [$DomainName$\$UserName$] FROM WINDOWS
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Common7\IDE\Extensions\Microsoft\SQLEditor\Snippets\1028\Role\Create Database Role.snippet</File>
    <Title>建立資料庫角色</Title>
    <Author>Microsoft Corporation</Author>
    <Description>建立資料庫角色。</Description>
    <Keywords />
    <Language>SQL_SSDT</Language>
    <Code>
CREATE ROLE $RoleName$
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Common7\IDE\Extensions\Microsoft\SQLEditor\Snippets\1028\Schema\Create Schema.snippet</File>
    <Title>建立結構描述</Title>
    <Author>Microsoft Corporation</Author>
    <Description>建立資料庫結構描述。</Description>
    <Keywords />
    <Language>SQL_SSDT</Language>
    <Code>
CREATE SCHEMA $SchemaName$
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Common7\IDE\Extensions\Microsoft\SQLEditor\Snippets\1028\Stored Procedure\Create Procedure With Output Cursor.snippet</File>
    <Title>建立含 CURSOR OUTPUT 參數的程序</Title>
    <Author>Microsoft Corporation</Author>
    <Description>建立具有資料指標輸出參數的預存程序。</Description>
    <Keywords />
    <Language>SQL_SSDT</Language>
    <Code>CREATE PROCEDURE $SchemaName$.$storedprocname$ 
    @$Param1$ $datatype1$ VARYING OUTPUT
AS
    SET @$Param1$ = CURSOR FOR
        select 1
    OPEN @$Param1$ 
RETURN 0 $end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Common7\IDE\Extensions\Microsoft\SQLEditor\Snippets\1028\Stored Procedure\Create Procedure with Output Parameters.snippet</File>
    <Title>建立含 OUTPUT 參數的程序</Title>
    <Author>Microsoft Corporation</Author>
    <Description>建立具有輸出參數的預存程序。</Description>
    <Keywords />
    <Language>SQL_SSDT</Language>
    <Code>CREATE PROCEDURE $SchemaName$.$storedprocname$ 
    @$Param1$ $datatype1$ = $DefValue1$,
    @$Param2$ $datatype2$ OUTPUT 
AS
    SELECT @$Param2$ = @$Param2$ + @$Param1$ 
RETURN 0 $end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Common7\IDE\Extensions\Microsoft\SQLEditor\Snippets\1028\Stored Procedure\Create Stored Procedure.snippet</File>
    <Title>建立程序基本範本</Title>
    <Author>Microsoft Corporation</Author>
    <Description>建立簡單的預存程序。</Description>
    <Keywords />
    <Language>SQL_SSDT</Language>
    <Code>CREATE PROCEDURE $SchemaName$.$storedprocname$ 
    @$Param1$ $datatype1$ = $DefValue1$,
    @$Param2$ $datatype2$  
AS
    SELECT @$Param1$,@$Param2$ 
RETURN 0 $end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Common7\IDE\Extensions\Microsoft\SQLEditor\Snippets\1028\Synonym\Create Synonym.snippet</File>
    <Title>建立同義字</Title>
    <Author>Microsoft Corporation</Author>
    <Description>建立同義字。</Description>
    <Keywords />
    <Language>SQL_SSDT</Language>
    <Code>
CREATE SYNONYM $DefaultSchemaName$.$SynonymName$
    FOR $SchemaName$.$ObjectName$
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Common7\IDE\Extensions\Microsoft\SQLEditor\Snippets\1028\Table\Create Table.snippet</File>
    <Title>建立資料表</Title>
    <Author>Microsoft Corporation</Author>
    <Description>建立資料表。</Description>
    <Keywords />
    <Language>SQL_SSDT</Language>
    <Code>CREATE TABLE $SchemaName$.$Tablename$
(
    $column1$ $datatype1$,
    $column2$ $datatype2$
);$end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Common7\IDE\Extensions\Microsoft\SQLEditor\Snippets\1028\Trigger\Create Trigger.snippet</File>
    <Title>建立觸發程序</Title>
    <Author>Microsoft Corporation</Author>
    <Description>建立觸發程序。</Description>
    <Keywords />
    <Language>SQL_SSDT</Language>
    <Code>
CREATE TRIGGER [$TriggerSchemaName$].[$TriggerName$]
    ON [$TargetSchemaName$].[$TableName$]
    FOR DELETE, INSERT, UPDATE
    AS
    BEGIN
    SET NOCOUNT ON
    END
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Common7\IDE\Extensions\Microsoft\SQLEditor\Snippets\1028\User Defined Data Type\Create User-Defined Data Type.snippet</File>
    <Title>建立使用者定義資料型別</Title>
    <Author>Microsoft Corporation</Author>
    <Description>建立使用者定義資料型別。</Description>
    <Keywords />
    <Language>SQL_SSDT</Language>
    <Code>
CREATE TYPE [$SchemaName$].[$TypeName$]
    FROM $BaseType$ $AllowNull$
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Common7\IDE\Extensions\Microsoft\SQLEditor\Snippets\1028\User Defined Table Type\Create User-Defined Table Type.snippet</File>
    <Title>建立使用者定義資料表類型</Title>
    <Author>Microsoft Corporation</Author>
    <Description>建立使用者定義資料表類型。</Description>
    <Keywords />
    <Language>SQL_SSDT</Language>
    <Code>
CREATE TYPE [$SchemaName$].[$TypeName$] AS TABLE
(
    $Column1$ $Datatype_Column1$, $Column2$ $Datatype_Column2$
)
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Common7\IDE\Extensions\Microsoft\SQLEditor\Snippets\1028\User Defined Type\Create User-Defined Type.snippet</File>
    <Title>建立使用者定義型別</Title>
    <Author>Microsoft Corporation</Author>
    <Description>建立 CLR 整合使用者定義型別。</Description>
    <Keywords />
    <Language>SQL_SSDT</Language>
    <Code>
CREATE TYPE $TypeName$
EXTERNAL NAME $AssemblyName$.[$ClassName$];
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Common7\IDE\Extensions\Microsoft\SQLEditor\Snippets\1028\View\Create View.snippet</File>
    <Title>建立檢視表</Title>
    <Author>Microsoft Corporation</Author>
    <Description>建立檢視表。</Description>
    <Keywords />
    <Language>SQL_SSDT</Language>
    <Code>
CREATE VIEW $SchemaName$.$viewname$
AS
    Select * from $SchemaName$.$tablename$
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\TS\1028\Snippets\General\alert.snippet</File>
    <Title>alert</Title>
    <Author>Microsoft Corporation</Author>
    <Description>alert 函式呼叫的程式碼片段</Description>
    <Keywords />
    <Language>TypeScript</Language>
    <Code>alert($selected$);$end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\TS\1028\Snippets\General\cl.snippet</File>
    <Title>cl</Title>
    <Author>Microsoft Corporation</Author>
    <Description>console.log 的程式碼片段</Description>
    <Keywords />
    <Language>TypeScript</Language>
    <Code>console.log($end$);</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\TS\1028\Snippets\General\class.snippet</File>
    <Title>類別</Title>
    <Author>Microsoft Corporation</Author>
    <Description>類別的程式碼片段 (在 JavaScript 語言的 ECMAScript 6 版或更新版本中支援)</Description>
    <Keywords />
    <Language>TypeScript</Language>
    <Code>
     class $name$ {
     
     }
    </Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\TS\1028\Snippets\General\do.snippet</File>
    <Title>do</Title>
    <Author>Microsoft Corporation</Author>
    <Description>do...while 迴圈的程式碼片段</Description>
    <Keywords />
    <Language>TypeScript</Language>
    <Code>do {
    $selected$$end$
} while ($expression$);</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\TS\1028\Snippets\General\else.snippet</File>
    <Title>else</Title>
    <Author>Microsoft Corporation</Author>
    <Description>else 陳述式的程式碼片段</Description>
    <Keywords />
    <Language>TypeScript</Language>
    <Code>else {
    $selected$$end$
}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\TS\1028\Snippets\General\for.snippet</File>
    <Title>for</Title>
    <Author>Microsoft Corporation</Author>
    <Description>for 迴圈的程式碼片段</Description>
    <Keywords />
    <Language>TypeScript</Language>
    <Code>for (var $index$ = 0; $index$ &lt; $max$; $index$++) {
    $selected$$end$
}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\TS\1028\Snippets\General\forin.snippet</File>
    <Title>forin</Title>
    <Author>Microsoft Corporation</Author>
    <Description>for...in 迴圈的程式碼片段</Description>
    <Keywords />
    <Language>TypeScript</Language>
    <Code>for (var $index$ in $object$) {
    $selected$$end$
}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\TS\1028\Snippets\General\forr.snippet</File>
    <Title>forr</Title>
    <Author>Microsoft Corporation</Author>
    <Description>反向 for 迴圈的程式碼片段</Description>
    <Keywords />
    <Language>TypeScript</Language>
    <Code>for (var $index$ = $max$ - 1; $index$ &gt;= 0; $index$--) {
    $selected$$end$
}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\TS\1028\Snippets\General\function.snippet</File>
    <Title>函式</Title>
    <Author>Microsoft Corporation</Author>
    <Description>函式的程式碼片段</Description>
    <Keywords />
    <Language>TypeScript</Language>
    <Code>function $name$() {
    $selected$$end$
}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\TS\1028\Snippets\General\getter.snippet</File>
    <Title>getter</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Code snippet for a getter</Description>
    <Keywords />
    <Language>TypeScript</Language>
    <Code>
     private _$property$: $type$;

     get $property$(): $type$ {
         return this._$property$;
     }

     </Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\TS\1028\Snippets\General\if.snippet</File>
    <Title>if</Title>
    <Author>Microsoft Corporation</Author>
    <Description>if 陳述式的程式碼片段</Description>
    <Keywords />
    <Language>TypeScript</Language>
    <Code>if ($expression$) {
    $selected$$end$
}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\TS\1028\Snippets\General\iife.snippet</File>
    <Title>iife</Title>
    <Author>Microsoft Corporation</Author>
    <Description>立即叫用函式運算式的程式碼片段</Description>
    <Keywords />
    <Language>TypeScript</Language>
    <Code>(function ($args$) {

    $selected$$end$

})($args$);</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\TS\1028\Snippets\General\interface.snippet</File>
    <Title>interface</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Code snippet for an interface</Description>
    <Keywords />
    <Language>TypeScript</Language>
    <Code>
     interface $name$ {
     
     }
     </Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\TS\1028\Snippets\General\setter.snippet</File>
    <Title>setter</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Code snippet for a setter</Description>
    <Keywords />
    <Language>TypeScript</Language>
    <Code>
     private _$property$: $type$;

     set $property$($newValue$): $type$ {
         this._$property$ = $newValue$;
     }

     </Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\TS\1028\Snippets\General\switch.snippet</File>
    <Title>switch</Title>
    <Author>Microsoft Corporation</Author>
    <Description>switch 陳述式的程式碼片段</Description>
    <Keywords />
    <Language>TypeScript</Language>
    <Code>switch ($expression$) {
    $end$
    default:
}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\TS\1028\Snippets\General\try.snippet</File>
    <Title>try</Title>
    <Author>Microsoft Corporation</Author>
    <Description>try catch 陳述式的程式碼片段</Description>
    <Keywords />
    <Language>TypeScript</Language>
    <Code>try {
    $selected$
} catch ($exception$) {
    $end$
}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\TS\1028\Snippets\General\while.snippet</File>
    <Title>while</Title>
    <Author>Microsoft Corporation</Author>
    <Description>while 迴圈的程式碼片段</Description>
    <Keywords />
    <Language>TypeScript</Language>
    <Code>while ($expression$) {
    $selected$$end$
}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\TS\1028\Snippets\Angular 2\ng2.component.snippet</File>
    <Title>ng2component</Title>
    <Author>Microsoft Corporation</Author>
    <Description>用於新增 Angular 2 元件的程式碼片段</Description>
    <Keywords />
    <Language>TypeScript</Language>
    <Code>
      import { Component } from 'angular/core'; 
     
      @Component({
          selector: '$myComponent$',
          template: '$template$'
      })
      export class $ComponentName$Component {
          constructor() {
              this.name = 'Sam';
          }
      }
     </Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\TS\1028\Snippets\Angular 2\ng2.pipe.snippet</File>
    <Title>ng2pipe</Title>
    <Author>Microsoft Corporation</Author>
    <Description>用於新增 Angular 2 管道的程式碼片段</Description>
    <Keywords />
    <Language>TypeScript</Language>
    <Code>
     import { Pipe, PipeTransform } from 'angular/core'; 
     
     @Pipe({
         name: $name$  
     })
     export class $classname$Pipe implements PipeTransform {
         transform(value: any, args: any[]): any {
         }
     }
     </Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\TS\1028\Snippets\Angular 2\ng2.service.snippet</File>
    <Title>ng2service</Title>
    <Author>Microsoft Corporation</Author>
    <Description>用於新增 Angular 2 服務的程式碼片段</Description>
    <Keywords />
    <Language>TypeScript</Language>
    <Code>
     import { Injectable } from 'angular/core'; 
     
     @Injectable()
     export class $ServiceName$Service {
     
     }
    </Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>c:\program files (x86)\microsoft visual studio\2019\professional\common7\ide\extensions\microsoft\adl tools\2.4.1000.0\Snippets\U-SQL\COMBINE.snippet</File>
    <Title>COMBINE - snippet</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Code snippet for COMBINE command</Description>
    <Keywords />
    <Language>U-SQL</Language>
    <Code>
$name$ = 
        COMBINE 
        $r$ AS $r1$ WITH $r$ AS $r2$
        ON $condition$
        PRODUCE $z$ string
        USING new $MyCombiner$;
$end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>c:\program files (x86)\microsoft visual studio\2019\professional\common7\ide\extensions\microsoft\adl tools\2.4.1000.0\Snippets\U-SQL\CREATEASSEMBLY.snippet</File>
    <Title>CREATE ASSEMBLY - snippet</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Code snippet for CREATE ASSEMBLY command</Description>
    <Keywords />
    <Language>U-SQL</Language>
    <Code>CREATE ASSEMBLY $variable$ FROM $path$; $end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>c:\program files (x86)\microsoft visual studio\2019\professional\common7\ide\extensions\microsoft\adl tools\2.4.1000.0\Snippets\U-SQL\CREATEDATABASE.snippet</File>
    <Title>CREATE DATABASE - snippet</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Code snippet for CREATE DATABASE command</Description>
    <Keywords />
    <Language>U-SQL</Language>
    <Code>CREATE DATABASE $variable$; $end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>c:\program files (x86)\microsoft visual studio\2019\professional\common7\ide\extensions\microsoft\adl tools\2.4.1000.0\Snippets\U-SQL\CREATESCHEMA.snippet</File>
    <Title>CREATE SCHEMA - snippet</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Code snippet for CREATE SCHEMA command</Description>
    <Keywords />
    <Language>U-SQL</Language>
    <Code>CREATE SCHEMA $schemaname$; $end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>c:\program files (x86)\microsoft visual studio\2019\professional\common7\ide\extensions\microsoft\adl tools\2.4.1000.0\Snippets\U-SQL\CREATETABLE.snippet</File>
    <Title>CREATE TABLE - snippet</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Code snippet for CREATE TABLE command</Description>
    <Keywords />
    <Language>U-SQL</Language>
    <Code>
CREATE TABLE $table$(
      $id$ int,
      $column_1$ long?, 
      $column_2$ int,
      $date$ DateTime, 
      INDEX $idx$ CLUSTERED ($id$ ASC) PARTITIONED BY ($date$) DISTRIBUTED BY HASH ($id$) INTO 4
      ); $end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>c:\program files (x86)\microsoft visual studio\2019\professional\common7\ide\extensions\microsoft\adl tools\2.4.1000.0\Snippets\U-SQL\CREATE_CREDENTIAL.snippet</File>
    <Title>CREATE CREDENTIAL - snippet</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Code snippet for CREATE CREDENTIAL command</Description>
    <Keywords />
    <Language>U-SQL</Language>
    <Code>
/*Your Azure SQL DB credentials need to be registered via the Azure Data Lake PowerShell commands. For more information please refer to the U-SQL documentation http://go.microsoft.com/fwlink/?LinkID=627262&amp;clcid=0x409 */
CREATE CREDENTIAL $credname$ WITH USER_NAME = $user_name$, IDENTITY = $identity$;
 $end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>c:\program files (x86)\microsoft visual studio\2019\professional\common7\ide\extensions\microsoft\adl tools\2.4.1000.0\Snippets\U-SQL\CREATE_VIEW.snippet</File>
    <Title>CREATE VIEW - snippet</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Code snippet for CREATE VIEW command</Description>
    <Keywords />
    <Language>U-SQL</Language>
    <Code>
CREATE VIEW $viewname$
AS
EXTRACT 
      $id$ int
    , $col1$ long?
FROM
$inputpath$
USING Extractors.Tsv();
 $end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>c:\program files (x86)\microsoft visual studio\2019\professional\common7\ide\extensions\microsoft\adl tools\2.4.1000.0\Snippets\U-SQL\DATA_SOURCE.snippet</File>
    <Title>DATA SOURCE - snippet</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Code snippet for DATA SOURCE command</Description>
    <Keywords />
    <Language>U-SQL</Language>
    <Code>
CREATE DATA SOURCE $datasourcename$ FROM $AZURESQLDB$ WITH 
        ( PROVIDER_STRING = "Database=DataBaseName;Trusted_Connection=False;Encrypt=True" 
        , CREDENTIAL = $credname$ 
        , REMOTABLE_TYPES = (bool, byte, sbyte, short, ushort, int, uint, long, ulong, decimal, float, double, string, DateTime)  
        );
 $end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>c:\program files (x86)\microsoft visual studio\2019\professional\common7\ide\extensions\microsoft\adl tools\2.4.1000.0\Snippets\U-SQL\DECLARE.snippet</File>
    <Title>DECLARE - snippet</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Code snippet for DECLARE command</Description>
    <Keywords />
    <Language>U-SQL</Language>
    <Code>
DECLARE $variable$ $type$ = $value$;$end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>c:\program files (x86)\microsoft visual studio\2019\professional\common7\ide\extensions\microsoft\adl tools\2.4.1000.0\Snippets\U-SQL\EXTERNAL_TABLE.snippet</File>
    <Title>EXTERNAL TABLE - snippet</Title>
    <Author>Microsoft</Author>
    <Description>Code snippet for EXTERNAL TABLE command</Description>
    <Keywords />
    <Language>U-SQL</Language>
    <Code>
CREATE EXTERNAL TABLE $tablename$ ( 
      $id$ int
    , $name$ string
) FROM $datasourcename$ LOCATION $table$;
 $end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>c:\program files (x86)\microsoft visual studio\2019\professional\common7\ide\extensions\microsoft\adl tools\2.4.1000.0\Snippets\U-SQL\EXTRACT.snippet</File>
    <Title>EXTRACT - snippet</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Code snippet for EXTRACT command</Description>
    <Keywords />
    <Language>U-SQL</Language>
    <Code>
$input$ = EXTRACT $data$ string FROM $inputpath$
USING Extractors.Tsv();
$end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>c:\program files (x86)\microsoft visual studio\2019\professional\common7\ide\extensions\microsoft\adl tools\2.4.1000.0\Snippets\U-SQL\EXTRACT_FROM_FILE_SET.snippet</File>
    <Title>EXTRACT FROM FILE SET - snippet</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Code snippet for EXTRACT FROM FILE SET command</Description>
    <Keywords />
    <Language>U-SQL</Language>
    <Code>
$input$ = EXTRACT 
           $col1$ int
          ,$col2$ int
          ,$vid$ int $comment1$
          ,$date$ DateTime $comment2$
          FROM $inputpath$ 
USING Extractors.Csv();
$end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>c:\program files (x86)\microsoft visual studio\2019\professional\common7\ide\extensions\microsoft\adl tools\2.4.1000.0\Snippets\U-SQL\INSERT_SELECT.snippet</File>
    <Title>INSERT SELECT - snippet</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Code snippet for INSERT SELECT command</Description>
    <Keywords />
    <Language>U-SQL</Language>
    <Code>
INSERT INTO $table$ 
SELECT * FROM $source$; $end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>c:\program files (x86)\microsoft visual studio\2019\professional\common7\ide\extensions\microsoft\adl tools\2.4.1000.0\Snippets\U-SQL\OUTPUT.snippet</File>
    <Title>OUTPUT - snippet</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Code snippet for OUTPUT command</Description>
    <Keywords />
    <Language>U-SQL</Language>
    <Code>
OUTPUT $stream$ 
TO $outputpath$ 
USING Outputters.Tsv();
$end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>c:\program files (x86)\microsoft visual studio\2019\professional\common7\ide\extensions\microsoft\adl tools\2.4.1000.0\Snippets\U-SQL\PROCESS.snippet</File>
    <Title>PROCESS - snippet</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Code snippet for PROCESS command</Description>
    <Keywords />
    <Language>U-SQL</Language>
    <Code>
$ProcessorName$ = PROCESS $MyProcessor$ PRODUCE $x$ int USING new $Processor$;
$end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>c:\program files (x86)\microsoft visual studio\2019\professional\common7\ide\extensions\microsoft\adl tools\2.4.1000.0\Snippets\U-SQL\REDUCE.snippet</File>
    <Title>REDUCE - snippet</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Code snippet for REDUCE command</Description>
    <Keywords />
    <Language>U-SQL</Language>
    <Code>
$name$ = REDUCE $name2$ ON $x$ PRODUCE $y$ int USING new $MyReducer$;
$end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>c:\program files (x86)\microsoft visual studio\2019\professional\common7\ide\extensions\microsoft\adl tools\2.4.1000.0\Snippets\U-SQL\SELECT.snippet</File>
    <Title>SELECT - snippet</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Code snippet for SELECT command</Description>
    <Keywords />
    <Language>U-SQL</Language>
    <Code>
$processname$ = SELECT $columnlist$ FROM $from$ WHERE $whereexpression$ GROUP BY $groupby$ ORDER BY $groupby$ FETCH FIRST $number$ ROWS;
$end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>c:\program files (x86)\microsoft visual studio\2019\professional\common7\ide\extensions\microsoft\adl tools\2.4.1000.0\Snippets\U-SQL\TableValuedFunction.snippet</File>
    <Title>Table Valued Function - snippet</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Code snippet for Table Valued Function command</Description>
    <Keywords />
    <Language>U-SQL</Language>
    <Code>
CREATE FUNCTION $dbo$.$FunctionName$
(
    $param1$ int,
    $param2$ string
)
RETURNS $result$ TABLE
(
    $col1$ int,
    $col2$ string
)
AS BEGIN 
    $result$ = SELECT $param1$ AS col1, 
                      $param2$ AS col2;
END;
        $end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\DesignTools\Snippets\XAML\1028\Snippets\DataContext.snippet</File>
    <Title>d:DataContext</Title>
    <Author>Microsoft Corporation</Author>
    <Description>新設計階段 DataContext 屬性的程式碼片段</Description>
    <Keywords />
    <Language>XAML</Language>
    <Code>d:DataContext="{d:DesignInstance Type=$DesignTimeViewModel$, IsDesignTimeCreatable=True}"</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\DesignTools\Snippets\XAML\1028\Snippets\Grid.snippet</File>
    <Title>方格 ColumnDefinition</Title>
    <Author>Microsoft Corporation</Author>
    <Description>方格 ColumnDefinition 的程式碼片段</Description>
    <Keywords />
    <Language>XAML</Language>
    <Code>&lt;ColumnDefinition Width="$Value$" /&gt;$selected$$end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\DesignTools\Snippets\XAML\1028\Snippets\Grid.snippet</File>
    <Title>方格 RowDefinition</Title>
    <Author>Microsoft Corporation</Author>
    <Description>方格 RowDefinition 的程式碼片段</Description>
    <Keywords />
    <Language>XAML</Language>
    <Code>&lt;RowDefinition Height="$Value$" /&gt;$selected$$end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\DesignTools\Snippets\XAML\1028\Snippets\Region.snippet</File>
    <Title>#區域</Title>
    <Author>Microsoft Corporation</Author>
    <Description>新的可摺疊 XAML 區域的程式碼片段</Description>
    <Keywords />
    <Language>XAML</Language>
    <Code>&lt;!--#region $RegionName$ --&gt;$end$$selected$&lt;!--#endregion--&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\DesignTools\Snippets\XAML\1028\Snippets\Setter.snippet</File>
    <Title>Setter</Title>
    <Author>Microsoft Corporation</Author>
    <Description>新 XAML 資源庫的程式碼片段</Description>
    <Keywords />
    <Language>XAML</Language>
    <Code>&lt;Setter Property="$PropertyName$" Value="$PropertyValue$" /&gt;$selected$$end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\DesignTools\Snippets\XAML\1028\Snippets\Tag.snippet</File>
    <Title>標籤</Title>
    <Author>Microsoft Corporation</Author>
    <Description>新元素的程式碼片段</Description>
    <Keywords />
    <Language>XAML</Language>
    <Code>&lt;$TagName$&gt;$selected$$end$&lt;/$TagName$&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\xml\1028\Snippets\Parent.snippet</File>
    <Title>Element</Title>
    <Author>Microsoft Corporation</Author>
    <Description>新父元素的 XML 程式碼片段</Description>
    <Keywords />
    <Language>XML</Language>
    <Code>&lt;$name$&gt;$selected$$end$&lt;/$name$&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\xml\1028\Snippets\schema.snippet</File>
    <Title>Schema</Title>
    <Author>Microsoft Corporation</Author>
    <Description>XSD 結構描述的展開程式碼片段</Description>
    <Keywords />
    <Language>XML</Language>
    <Code>&lt;xs:schema targetNamespace="$namespace$"
           xmlns="$namespace$"
           elementFormDefault="qualified"
           attributeFormDefault="unqualified"
           xmlns:xs="http://www.w3.org/2001/XMLSchema"&gt;$selected$$end$&lt;/xs:schema&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\xml\1028\Snippets\snippet.snippet</File>
    <Title>Snippet</Title>
    <Author>Microsoft Corporation</Author>
    <Description>用於建立新 XML 程式碼片段的 XML 程式碼片段!</Description>
    <Keywords />
    <Language>XML</Language>
    <Code>&lt;CodeSnippet Format="1.0.0" xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet"&gt;
  &lt;Header&gt;
    &lt;Title&gt;$title$&lt;/Title&gt;
    &lt;Author&gt;$author$&lt;/Author&gt;
    &lt;Shortcut&gt;$shortcut$&lt;/Shortcut&gt;
    &lt;Description&gt;$description$&lt;/Description&gt;
    &lt;SnippetTypes&gt;
      &lt;SnippetType&gt;SurroundsWith&lt;/SnippetType&gt;
      &lt;SnippetType&gt;Expansion&lt;/SnippetType&gt;
    &lt;/SnippetTypes&gt;
  &lt;/Header&gt;
  &lt;Snippet&gt;
    &lt;Declarations&gt;
    &lt;Literal&gt;
        &lt;ID&gt;$name$&lt;/ID&gt;
        &lt;Default&gt;$value$&lt;/Default&gt;
    &lt;/Literal&gt;
    &lt;/Declarations&gt;
    &lt;Code Language="XML"&gt;&lt;![CDATA[$end$&lt;test&gt;
      &lt;name&gt;$$$name$$$&lt;/name&gt;
      $selected$$$selected$$ $$end$$&lt;/test&gt;$endcdata$
    &lt;/Code&gt;
    &lt;/Snippet&gt;
&lt;/CodeSnippet&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\xml\1028\Snippets\xsd\Attributes\enum.snippet</File>
    <Title>enumeration</Title>
    <Author>Microsoft Corporation</Author>
    <Description>有列舉的 XSD 屬性之 XML 程式碼片段</Description>
    <Keywords />
    <Language>XML</Language>
    <Code>&lt;xsd:attribute name="$name$" xmlns:xsd="http://www.w3.org/2001/XMLSchema"&gt;
      &lt;xsd:simpleType&gt;
        &lt;xsd:restriction base="$prefix$$type$"&gt;
          &lt;xsd:enumeration value="$value$"/&gt;$selected$$end$
        &lt;/xsd:restriction&gt;&lt;/xsd:simpleType&gt;
      &lt;/xsd:attribute&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\xml\1028\Snippets\xsd\Attributes\integer.snippet</File>
    <Title>integer restriction</Title>
    <Author>Microsoft Corporation</Author>
    <Description>型別整數之 XSD 屬性的 XML 程式碼片段</Description>
    <Keywords />
    <Language>XML</Language>
    <Code>&lt;xsd:attribute name="$name$" xmlns:xsd="http://www.w3.org/2001/XMLSchema"&gt;
     &lt;xsd:simpleType&gt;
      &lt;xsd:restriction base="$prefix$$type$"&gt;$selected$$end$
      &lt;/xsd:restriction&gt;
     &lt;/xsd:simpleType&gt;
    &lt;/xsd:attribute&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\xml\1028\Snippets\xsd\Attributes\pattern.snippet</File>
    <Title>pattern restriction</Title>
    <Author>Microsoft Corporation</Author>
    <Description>定義有模式的 simpleType 之 XSD 屬性的 XML 程式碼片段</Description>
    <Keywords />
    <Language>XML</Language>
    <Code>&lt;xsd:attribute name="$name$" xmlns:xsd="http://www.w3.org/2001/XMLSchema"&gt;
     &lt;xsd:simpleType&gt;
      &lt;xsd:restriction base="$prefix$$type$"&gt;
       &lt;xsd:pattern value="$value$"/&gt;$selected$$end$
      &lt;/xsd:restriction&gt;
     &lt;/xsd:simpleType&gt;
    &lt;/xsd:attribute&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\xml\1028\Snippets\xsd\Attributes\string.snippet</File>
    <Title>string restriction</Title>
    <Author>Microsoft Corporation</Author>
    <Description>定義型別附 simpleType 字串限制之 XSD 屬性的 XML 程式碼片段</Description>
    <Keywords />
    <Language>XML</Language>
    <Code>&lt;xsd:attribute name="$name$" xmlns:xsd="http://www.w3.org/2001/XMLSchema"&gt;
     &lt;xsd:simpleType&gt;
      &lt;xsd:restriction base="$prefix$$type$"&gt;$selected$$end$
      &lt;/xsd:restriction&gt;
     &lt;/xsd:simpleType&gt;
    &lt;/xsd:attribute&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\xml\1028\Snippets\xsd\ComplexTypes\all.snippet</File>
    <Title>all group</Title>
    <Author>Microsoft Corporation</Author>
    <Description>具備 all 的 XSD complexType 元素之 XML 程式碼片段</Description>
    <Keywords />
    <Language>XML</Language>
    <Code>&lt;xsd:complexType name="$name$" xmlns:xsd="http://www.w3.org/2001/XMLSchema"&gt;
    &lt;xsd:all&gt;$selected$$end$&lt;/xsd:all&gt;
    &lt;/xsd:complexType&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\xml\1028\Snippets\xsd\ComplexTypes\any.snippet</File>
    <Title>具有 any 的序列</Title>
    <Author>Microsoft Corporation</Author>
    <Description>具備 any 元素的 XSD complexType 元素之 XML 程式碼片段</Description>
    <Keywords />
    <Language>XML</Language>
    <Code>&lt;xsd:complexType name="$name$" xmlns:xsd="http://www.w3.org/2001/XMLSchema"&gt;
     &lt;xsd:sequence&gt;$selected$$end$
      &lt;xsd:any namespace="$namespace$" processContents="$pc$"/&gt;
     &lt;/xsd:sequence&gt;
    &lt;/xsd:complexType&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\xml\1028\Snippets\xsd\ComplexTypes\attribute.snippet</File>
    <Title>attribute</Title>
    <Author>Microsoft Corporation</Author>
    <Description>具備屬性的 XSD complexType 元素之 XML 程式碼片段</Description>
    <Keywords />
    <Language>XML</Language>
    <Code>&lt;xsd:complexType name="$name$" xmlns:xsd="http://www.w3.org/2001/XMLSchema"&gt;$selected$
      &lt;xsd:attribute name=$attName$&gt;$end$&lt;/xsd:attribute&gt;
     &lt;/xsd:complexType&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\xml\1028\Snippets\xsd\ComplexTypes\choice.snippet</File>
    <Title>choice</Title>
    <Author>Microsoft Corporation</Author>
    <Description>具備 choice 的 XSD complexType 元素之 XML 程式碼片段。</Description>
    <Keywords />
    <Language>XML</Language>
    <Code>&lt;xsd:complexType name="$name$" xmlns:xsd="http://www.w3.org/2001/XMLSchema"&gt;
    &lt;xsd:choice minOccurs="$min$" maxOccurs="$max$"&gt;$selected$$end$
    &lt;/xsd:choice&gt;
    &lt;/xsd:complexType&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\xml\1028\Snippets\xsd\ComplexTypes\sequence.snippet</File>
    <Title>sequence</Title>
    <Author>Microsoft Corporation</Author>
    <Description>具備 sequence 的 XSD complexType 元素之 XML 程式碼片段</Description>
    <Keywords />
    <Language>XML</Language>
    <Code>&lt;xsd:complexType name="$name$" xmlns:xsd="http://www.w3.org/2001/XMLSchema"&gt;
    &lt;xsd:sequence&gt;$selected$$end$&lt;/xsd:sequence&gt;
    &lt;/xsd:complexType&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\xml\1028\Snippets\xsd\Elements\all.snippet</File>
    <Title>all group</Title>
    <Author>Microsoft Corporation</Author>
    <Description>具備 XSD all 的 XSD complexType 元素之 XML 程式碼片段</Description>
    <Keywords />
    <Language>XML</Language>
    <Code>&lt;xsd:element name="$name$" xmlns:xsd="http://www.w3.org/2001/XMLSchema"&gt;
    &lt;xsd:complexType&gt;
    &lt;xsd:all&gt;$selected$$end$&lt;/xsd:all&gt;
    &lt;/xsd:complexType&gt;
    &lt;/xsd:element&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\xml\1028\Snippets\xsd\Elements\choice.snippet</File>
    <Title>choice</Title>
    <Author>Microsoft Corporation</Author>
    <Description>具備 XSD choice 的 XSD complexType 元素之 XML 程式碼片段</Description>
    <Keywords />
    <Language>XML</Language>
    <Code>&lt;xsd:element name="$name$" xmlns:xsd="http://www.w3.org/2001/XMLSchema"&gt;
    &lt;xsd:complexType&gt;
    &lt;xsd:choice&gt;$selected$$end$&lt;/xsd:choice&gt;
    &lt;/xsd:complexType&gt;
    &lt;/xsd:element&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\xml\1028\Snippets\xsd\Elements\complex.snippet</File>
    <Title>complexType</Title>
    <Author>Microsoft Corporation</Author>
    <Description>XSD complexType 元素的 XML 程式碼片段</Description>
    <Keywords />
    <Language>XML</Language>
    <Code>&lt;xsd:element name="$name$" xmlns:xsd="http://www.w3.org/2001/XMLSchema"&gt;
    &lt;xsd:complexType&gt;$selected$$end$&lt;/xsd:complexType&gt;
    &lt;/xsd:element&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\xml\1028\Snippets\xsd\Elements\sequence.snippet</File>
    <Title>sequence</Title>
    <Author>Microsoft Corporation</Author>
    <Description>具備 XSD sequence 的 XSD complexType 元素之 XML 程式碼片段</Description>
    <Keywords />
    <Language>XML</Language>
    <Code>&lt;xsd:element name="$name$" xmlns:xsd="http://www.w3.org/2001/XMLSchema"&gt;
    &lt;xsd:complexType&gt;
    &lt;xsd:sequence&gt;$selected$$end$&lt;/xsd:sequence&gt;
    &lt;/xsd:complexType&gt;
    &lt;/xsd:element&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\xml\1028\Snippets\xsd\Elements\simple.snippet</File>
    <Title>simpleType</Title>
    <Author>Microsoft Corporation</Author>
    <Description>XSD simpleType  元素的 XML 程式碼片段</Description>
    <Keywords />
    <Language>XML</Language>
    <Code>&lt;xsd:element name="$name$" xmlns:xsd="http://www.w3.org/2001/XMLSchema"&gt;
    &lt;xsd:simpleType&gt;
    &lt;xsd:restriction base="$prefix$$base$"&gt;$selected$$end$&lt;/xsd:restriction&gt;
    &lt;/xsd:simpleType&gt;
    &lt;/xsd:element&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\xml\1028\Snippets\xsd\Extensions\attribute.snippet</File>
    <Title>simpleContent</Title>
    <Author>Microsoft Corporation</Author>
    <Description>新增一屬性的 XSD complexType simpleContent 擴充程式之 XML 程式碼片段</Description>
    <Keywords />
    <Language>XML</Language>
    <Code>&lt;xsd:complexType name="$name$" xmlns:xsd="http://www.w3.org/2001/XMLSchema"&gt;&lt;xsd:simpleContent&gt;&lt;xsd:extension base="$prefix$$base$"&gt;&lt;xsd:attribute name=$attName$&gt;$selected$$end$&lt;/xsd:attribute&gt;&lt;/xsd:extension&gt;&lt;/xsd:simpleContent&gt;&lt;/xsd:complexType&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\xml\1028\Snippets\xsd\Extensions\complex.snippet</File>
    <Title>complexContent</Title>
    <Author>Microsoft Corporation</Author>
    <Description>XSD complexType complexContent 擴充程式的 XML 程式碼片段</Description>
    <Keywords />
    <Language>XML</Language>
    <Code>&lt;xsd:complexType name="$name$" xmlns:xsd="http://www.w3.org/2001/XMLSchema"&gt;&lt;xsd:complexContent&gt;&lt;xsd:extension base="$base$"&gt;$selected$$end$&lt;/xsd:extension&gt;&lt;/xsd:complexContent&gt;&lt;/xsd:complexType&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\xml\1028\Snippets\xsd\Misc\attributeGroup.snippet</File>
    <Title>attributeGroup</Title>
    <Author>Microsoft Corporation</Author>
    <Description>XSD attributeGroup 的 XML 程式碼片段</Description>
    <Keywords />
    <Language>XML</Language>
    <Code>&lt;xs:attributeGroup name="$name$" xmlns:xs="http://www.w3.org/2001/XMLSchema"&gt;
     &lt;xs:attribute ref="$attrName$"/&gt;$selected$$end$
    &lt;/xs:attributeGroup&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\xml\1028\Snippets\xsd\Misc\documentation.snippet</File>
    <Title>documentation</Title>
    <Author>Microsoft Corporation</Author>
    <Description>XSD 文件的 XML 程式碼片段</Description>
    <Keywords />
    <Language>XML</Language>
    <Code>&lt;xsd:annotation xmlns:xsd="http://www.w3.org/2001/XMLSchema"&gt;&lt;xsd:documentation&gt;$text$$selected$$end$&lt;/xsd:documentation&gt;&lt;/xsd:annotation&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\xml\1028\Snippets\xsd\SimpleTypes\enum.snippet</File>
    <Title>enumeration</Title>
    <Author>Microsoft Corporation</Author>
    <Description>XSD simpleType 列舉的 XML 程式碼片段</Description>
    <Keywords />
    <Language>XML</Language>
    <Code>&lt;xsd:simpleType name="$name$" xmlns:xsd="http://www.w3.org/2001/XMLSchema"&gt;
    &lt;xsd:restriction base="$prefix$$type$"&gt;
    &lt;xsd:enumeration value="$value$"/&gt;$selected$$end$
    &lt;/xsd:restriction&gt;
    &lt;/xsd:simpleType&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\xml\1028\Snippets\xsd\SimpleTypes\integer.snippet</File>
    <Title>integer restriction</Title>
    <Author>Microsoft Corporation</Author>
    <Description>XSD simpleType 整數的 XML 程式碼片段</Description>
    <Keywords />
    <Language>XML</Language>
    <Code>&lt;xsd:simpleType name="$name$" xmlns:xsd="http://www.w3.org/2001/XMLSchema"&gt;
    &lt;xsd:restriction base="$prefix$$type$"&gt;$selected$$end$&lt;/xsd:restriction&gt;
    &lt;/xsd:simpleType&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\xml\1028\Snippets\xsd\SimpleTypes\pattern.snippet</File>
    <Title>pattern restriction</Title>
    <Author>Microsoft Corporation</Author>
    <Description>XSD simpleType pattern 的 XML 程式碼片段</Description>
    <Keywords />
    <Language>XML</Language>
    <Code>&lt;xsd:simpleType  name="$name$" xmlns:xsd="http://www.w3.org/2001/XMLSchema"&gt;
    &lt;xsd:restriction base="$prefix$$type$"&gt;
    &lt;xsd:pattern value="$value$"/&gt;$selected$$end$
    &lt;/xsd:restriction&gt;
    &lt;/xsd:simpleType&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\xml\1028\Snippets\xsd\SimpleTypes\string.snippet</File>
    <Title>string restriction</Title>
    <Author>Microsoft Corporation</Author>
    <Description>XSD simpleType 字串的 XML 程式碼片段</Description>
    <Keywords />
    <Language>XML</Language>
    <Code>&lt;xsd:simpleType name="$name$" xmlns:xsd="http://www.w3.org/2001/XMLSchema"&gt;
    &lt;xsd:restriction base="$prefix$$type$"&gt;$selected$$end$&lt;/xsd:restriction&gt;
    &lt;/xsd:simpleType&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\xml\1028\Snippets\xslt\html\htmlTable.snippet</File>
    <Title>Table Template </Title>
    <Author>Microsoft Corporation</Author>
    <Description>在 XSLT 中建立一 HTML 表的 XML 程式碼片段</Description>
    <Keywords />
    <Language>XML</Language>
    <Code>&lt;xsl:template match="/" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;
    &lt;html&gt;&lt;head&gt;&lt;title&gt;$title$&lt;/title&gt;&lt;/head&gt;
    &lt;body&gt;&lt;h4&gt;$title$&lt;/h4&gt;
    &lt;table border="1"&gt;
    &lt;tbody &gt;&lt;tr&gt;&lt;th&gt;$header1$&lt;/th&gt;&lt;th&gt;$header2$&lt;/th&gt;&lt;/tr&gt;
    &lt;xsl:apply-templates select="$xpath$"/&gt;&lt;/tbody&gt;
    &lt;/table&gt;&lt;/body&gt;&lt;/html&gt;&lt;/xsl:template&gt;$end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\xml\1028\Snippets\xslt\html\tableRowTemplate.snippet</File>
    <Title>Table Row Template</Title>
    <Author>Microsoft Corporation</Author>
    <Description>用於在範本中產生資料表列的 XSL 範本</Description>
    <Keywords />
    <Language>XML</Language>
    <Code>&lt;xsl:template match="$xpath_1$" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;&lt;tr&gt;&lt;td&gt;&lt;xsl:value-of select="$xpath_2$"/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/xsl:template&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\xml\1028\Snippets\xslt\xslTags\scriptCS.snippet</File>
    <Title>C# XSLT 指令碼區塊</Title>
    <Author>Microsoft Corporation</Author>
    <Description>用於建立 XSLT 中 C# 指令碼區塊的 XML 程式碼片段</Description>
    <Keywords />
    <Language>XML</Language>
    <Code>&lt;ms:script implements-prefix="$user$" xmlns:ms="urn:schemas-microsoft-com:xslt" language="C#"&gt;
    &lt;ms:using namespace="System.Xml.XPath"/&gt;
    &lt;![CDATA[
    public string $function$(XPathNodeIterator iterator) {
      if (iterator.MoveNext()) {
        XPathNavigator nav = iterator.Current;
        return nav.LocalName$end$;
      }
      return "";
    }$endcdata$
    &lt;/ms:script&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\xml\1028\Snippets\xslt\xslTags\scriptJS.snippet</File>
    <Title>JScript XSLT 指令碼區塊</Title>
    <Author>Microsoft Corporation</Author>
    <Description>用於建立 XSLT 中 JScript 指令碼區塊的 XML 程式碼片段</Description>
    <Keywords />
    <Language>XML</Language>
    <Code>&lt;ms:script implements-prefix="$user$" xmlns:ms="urn:schemas-microsoft-com:xslt" language="JScript"&gt;
      &lt;ms:using namespace="System.Xml.XPath"/&gt;
      &lt;![CDATA[
      function $function$ (iterator : XPathNodeIterator) 
      {
        if (iterator.MoveNext()) 
        {
          var nav : XPathNavigator = iterator.Current;
          return nav.LocalName$end$;
        }
        return "";
      }$endcdata$
    &lt;/ms:script&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\xml\1028\Snippets\xslt\xslTags\scriptVB.snippet</File>
    <Title>VB XSLT 指令碼區塊</Title>
    <Author>Microsoft Corporation</Author>
    <Description>用於建立 XSLT 中 VBScript 指令碼區塊的 XML 程式碼片段</Description>
    <Keywords />
    <Language>XML</Language>
    <Code>&lt;ms:script implements-prefix="$user$" xmlns:ms="urn:schemas-microsoft-com:xslt" language="VB"&gt;
    &lt;ms:using namespace="System.Xml.XPath"/&gt;
    &lt;![CDATA[    
    function $function$(iterator as XPathNodeIterator) as string 
      if (iterator.MoveNext()) then
        Dim nav as XPathNavigator = iterator.Current
        return nav.LocalName$end$
      else 
        return ""
      end if
    end function
    $endcdata$
    &lt;/ms:script&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Code\git\MyKata\MyKata_ScriptCmd\CodeSnippet\gti\0_C#\Code_CUD_Page.snippet</File>
    <Title>Code_CUD_Page</Title>
    <Description />
    <Keywords />
    <Language>csharp</Language>
    <Code>        ADMServices _svc = new ADMServices();
        [HttpPost]
		public ActionResult Query(PagerQuery obj)
		{
			var Result = _svc.AD_MESSAGE_DATA_PagerQuery(obj);
			return Content(Result.ToJson(true));
		}
		public ActionResult Create(MDL.MES.AD_MESSAGE_DATA data)
		{
			var result = _svc.AD_MESSAGE_DATA_Create(data);
			return Content((result).ToJson(true));
		}

		public ActionResult Update(MDL.MES.AD_MESSAGE_DATA data)
		{
			var result = _svc.AD_MESSAGE_DATA_Update(data);
			return Content((result).ToJson(true));
		}

		public ActionResult Delete(string SID)
		{
			var result = _svc.AD_MESSAGE_DATA_DEL(SID);
			return Content((result).ToJson(true));
		}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Code\git\MyKata\MyKata_ScriptCmd\CodeSnippet\gti\0_C#\Code_PagerQuery.snippet</File>
    <Title>Code_PagerQuery</Title>
    <Author />
    <Description />
    <Keywords />
    <Language>csharp</Language>
    <Code>public static Result QueryWoInfo(PagerQuery PQuery)
	{
		var _result = PQuery.chk();
		if (_result.Success)
		{
			using (var dbContext = new MDL.MESContext())
			{
				try
				{
					var _query = dbContext.WP_WO.BuildQuery(PQuery.Conditions);

					if (PQuery?.Sort?.Code != "")
					{
						_query = _query.OrderBy(PQuery.Sort.Code);
					}
					if (PQuery.Page == null)
					{

						_result.Data = new { Queryable = _query.ToList() };
					}
					else
					{
						var PageInfo = _query.PageResult(PQuery.Page.Index, PQuery.Page.Size);
						var Queryable = (
								from wo in PageInfo.Queryable
								join part in dbContext.PF_PARTNO_VER
									on wo.PARTNO_VER_SID equals part.PARTNO_VER_SID
								select new
								{
								#region [ wo.* ] 
								#endregion
								part.PART_NAME
								}
							)
							.ToList();

						_result.Data = new { Queryable, PageInfo = PQuery.parsePagedResult(PageInfo) };

					}
				}
				catch (Exception Ex)
				{
					_result = new Result(ErrCode.GenericErrorMessage, ErrCode.False);
				}
			}
		}
		return _result;
	}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
</ArrayOfSnippetIndexItem>